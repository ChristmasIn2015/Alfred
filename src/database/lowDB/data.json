{
  "blocks": {
    "DCgJdlX5R": {
      "blockId": "DCgJdlX5R",
      "name": "客户端",
      "color": "#666666"
    },
    "uuzRN_3cX": {
      "blockId": "uuzRN_3cX",
      "name": "服务端",
      "color": "#666666"
    },
    "U2EWIATls": {
      "blockId": "U2EWIATls",
      "name": "计算机通用",
      "color": "#666666"
    },
    "YxnegsTMH": {
      "blockId": "YxnegsTMH",
      "name": "人文社科",
      "color": "#666666"
    }
  },
  "shelfs": {
    "D-CDKmCae": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "name": "浏览器基础"
    },
    "At1V2rMjl": {
      "blockId": "uuzRN_3cX",
      "shelfId": "At1V2rMjl",
      "name": "处理程序"
    },
    "Voh8g7nW6": {
      "blockId": "U2EWIATls",
      "shelfId": "Voh8g7nW6",
      "name": "计算机组成原理"
    },
    "rWmTUaczK": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "name": "操作系统"
    },
    "ntUIPXagV": {
      "blockId": "U2EWIATls",
      "shelfId": "ntUIPXagV",
      "name": "协议与网络"
    },
    "AvNgmhcbf": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "name": "数据结构"
    },
    "9Exg2gPYK": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "name": "算法应用"
    },
    "SdTAGDIMM": {
      "blockId": "U2EWIATls",
      "shelfId": "SdTAGDIMM",
      "name": "软件设计模式"
    },
    "8ehQoNmob": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "name": "前端开发工具"
    },
    "q6_9Db-FR": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "name": "政治学"
    },
    "Ho01HabXF": {
      "blockId": "YxnegsTMH",
      "shelfId": "Ho01HabXF",
      "name": "经济学"
    },
    "MMuN17Zro": {
      "blockId": "YxnegsTMH",
      "shelfId": "MMuN17Zro",
      "name": "人生规划"
    },
    "YKdKtabb9": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "name": "前端开发笔记"
    },
    "w9SAKBPW2": {
      "blockId": "YxnegsTMH",
      "shelfId": "w9SAKBPW2",
      "name": "英语"
    },
    "N7V_Hcwg1": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "name": "数学分析"
    },
    "wxtju1CwP": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "name": "线性代数"
    },
    "TGwZP0vAU": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "name": "C++"
    },
    "OxHRbBgQ1": {
      "blockId": "uuzRN_3cX",
      "shelfId": "OxHRbBgQ1",
      "name": "数据库"
    },
    "KF98qAsO3": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "name": "互联网产品"
    },
    "ofOykdH6L": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "name": "JavaScript"
    },
    "VZjDLYjto": {
      "blockId": "DCgJdlX5R",
      "shelfId": "VZjDLYjto",
      "name": "微信生态圈"
    }
  },
  "books": {
    "hEQsagyJy": {
      "blockId": "uuzRN_3cX",
      "shelfId": "At1V2rMjl",
      "bookId": "hEQsagyJy",
      "name": "服务器软件分类",
      "content": "<div><font color=\"#ff0000\"><b>常见服务器装配（运维）</b></font><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>操作系统：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Windows</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; linux内核</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * CentOS 是企业级的Linux发行版本，稳定、占用资源小、配置简单</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;Ubuntu有强大的软件源支持、兼容性好，但主要以桌面应用为主<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;Debian则以稳定性著称，整个系统基础核心非常小，对于小内存，首选Debian<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Unix内核：商用操作系统</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>服务程序：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Web/HTTP：只需支持HTTP协议（Tomcat，Windows IIS，Apache，Nginx）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 特定应用：支持各种协议并提供服务（<span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px;\">BEA&nbsp;</span>Weblogic，<span style=\"color: rgb(51, 51, 51); font-family: Arial; font-size: 14px;\">IBM&nbsp;</span>WebSphere）</div><div><br></div><div><div><font color=\"#ff0000\"><b>服务器处理请求</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font></div></div>"
    },
    "06thTC3zW": {
      "blockId": "U2EWIATls",
      "shelfId": "SdTAGDIMM",
      "bookId": "06thTC3zW",
      "name": "介绍",
      "content": "<div><font color=\"#ff0000\"><b>* 原则</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font><font color=\"#4169e1\"><b>单一职责原则</b></font>&nbsp;* 一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font><font color=\"#4169e1\"><b>开闭原则</b></font>&nbsp;*&nbsp;在程序需要进行拓展的时候，不能去修改原有的代码</div><div>&nbsp; &nbsp; 里氏代换原则 *&nbsp;任何基类可以出现的地方，子类一定可以出现</div><div>&nbsp; &nbsp; 依赖倒转原则 *&nbsp;针对接口编程，依赖于抽象而不依赖于具体（啥玩意？）</div><div>&nbsp; &nbsp; 接口隔离原则 *&nbsp;使用多个隔离的接口，比使用单个接口要好</div><div>&nbsp; &nbsp; 最少知道原则 *&nbsp;一个实体应当尽量少地与其他实体之间发生相互作用</div><div>&nbsp; &nbsp; 合成复用原则 *&nbsp;尽量使用合成/聚合的方式，而不是使用继承</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>面向对象的三大原则</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;封装：隐藏对象的属性，仅对外公开行为</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;继承：抽取共有特征和方法形成高一层的super类</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;多态：同一个处理手段可以用来处理多种不同的情况</div><div><br></div><font color=\"#ff0000\"><b>1.创建型</b></font><div><div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>单例模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 保证一个类仅有一个 Singleton&nbsp;实例，并提供一个访问它的全局访问点。</div></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>原型模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;通过拷贝原型对象创建新的相同 Prototype 对象</div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>工厂模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * Factory（日志生成器）=&gt; Production（错误日志）</div><div>&nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">抽象工厂模式</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * AbstructFactory（皮肤器）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** AFactory（皮肤色生成器）=&gt; AProduction（皮肤色）</div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** BFactory（皮肤材质生成器）=&gt; BProduction（皮肤材质）</div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>建造者模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * Builder（点餐机）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** AFactory（汉堡生成器）=&gt; AProduction（汉堡）</div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** BFactory（可乐生成器）=&gt; BProduction（可乐）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; =&gt; Production（套餐：可乐+汉堡）</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">2.结构型</b></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>适配器模式&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 视频播放器</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** Adapter（内嵌振动器）=&gt;&nbsp;实现了振动功能的视频播放器</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>桥接模式 ？</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;对于两个独立变化的维度&nbsp;似乎和抽象工厂模式高度相似</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>过滤器模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * Filter（考试筛选）=&gt; Target（及格的孩子）</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>组合模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;Node（结点）=&gt; Tree（树）</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>装饰器模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * A（牛奶）=&gt; * DecoratorA（牛奶带糖）</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>外观模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;其实就是“封装”，不暴露实现细节只提供实现方法</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>享元模式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 第一次查询创建对象，后续查询返回相同对象（已缓存）</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>代理模式</b></font></div>&nbsp; &nbsp; &nbsp; &nbsp; * =&gt; Target（火车票）<div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;Proxy（代售点） =&gt; Target（火车票）</div><div><b style=\"color: rgb(255, 0, 0);\">3.行为型</b></div><div>&nbsp; &nbsp; 责任链模式</div><div>&nbsp; &nbsp; 命令模式</div><div>&nbsp; &nbsp; 解释器模式</div><div>&nbsp; &nbsp; 迭代器模式</div><div>&nbsp; &nbsp; 中介模式</div><div>&nbsp; &nbsp; 备忘录模式</div><div>&nbsp; &nbsp; 观察者模式</div><div>&nbsp; &nbsp; 状态模式</div><div>&nbsp; &nbsp; 空对象模式</div><div>&nbsp; &nbsp; 策略模式</div><div>&nbsp; &nbsp; 模板模式</div><div>&nbsp; &nbsp; 访问者模式</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">4.J2ee型</b></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>MVC模式</b></font></div><div>&nbsp; &nbsp; 业务代表模式</div><div>&nbsp; &nbsp; 组合实体模式</div><div>&nbsp; &nbsp; 数据访问对象模式</div><div>&nbsp; &nbsp; 前端控制器模式</div><div>&nbsp; &nbsp; 拦截过滤器模式</div><div>&nbsp; &nbsp; 服务定位模式</div><div>&nbsp; &nbsp; 传输对象模式</div><div><br></div><div><br></div>"
    },
    "gCahXUHz-": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "bookId": "gCahXUHz-",
      "name": "Git",
      "content": "<div><font color=\"#ff0000\"><b>Git</b></font></div><div>&nbsp; &nbsp; 1.在代码托管服务上创建远程仓库：如 Github / gitlab / 码云</div><div><br></div><div>&nbsp; &nbsp; 2.获取代码</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 创建本地仓库&nbsp;<font color=\"#4169e1\"><b>$ git init</b></font></div><span style=\"white-space: pre;\">\t</span>* 通过远程仓库提供的 URL 克隆代码&nbsp;<font color=\"#4169e1\"><b>$ git clone</b></font><b style=\"color: rgb(255, 0, 0);\">&nbsp;</b><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp; * 分支相关<br></b></font><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>** 查看本地分支&nbsp;<font color=\"#ff0000\"><b>$ git branch 所有分支 -r</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 在当前分支下新建本地分支&nbsp;<font color=\"#ff0000\"><b>$ git checkout -b name</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 提交<font color=\"#ff0000\"><b>新分支</b></font>到服务&nbsp;<font color=\"#ff0000\"><b>$ git push --set-upstream origin&nbsp;name</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 切换分支&nbsp;<font color=\"#ff0000\"><b>$ git checkout name</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 使当前分支与远程某个分支本地合并&nbsp;<font color=\"#ff0000\"><b>$ git merge name</b></font>&nbsp;&gt; push origin thisBranch</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 删除远程分支&nbsp;<font color=\"#ff0000\"><b>git push origin --delete name</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 删除本地分支&nbsp;<font color=\"#ff0000\"><b>git branch -d name</b></font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div>&nbsp; &nbsp; 3.更新本地代码</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 添加到缓存区&nbsp;<font color=\"#4169e1\"><b>$ git stash save 'message'</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 取值并删除缓存<font color=\"#4169e1\"><b>&nbsp;$ git stash pop stash@{0}</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 更新并合并&nbsp;<font color=\"#4169e1\"><b>$ git pull= $ git fetch &gt; diff &gt; merge</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b>* 撤销本地提交</b></font> <font color=\"#4169e1\"><b>$&nbsp;git reset HEAD~</b></font></div><div><br></div><div>&nbsp; &nbsp; 4.更新远程代码</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 添加到暂存区&nbsp;<font color=\"#4169e1\"><b>$ git add .</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 更新本地版本&nbsp;<font color=\"#4169e1\"><b>$ git commit -m 'message'</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>* 更新远程代码&nbsp;<font color=\"#4169e1\"><b>$ git push origin 分支名称</b></font></div><div><br></div><div>&nbsp; &nbsp; 5.权限管理</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 账号&nbsp;<b>$ git config --global user.name / user.email \"message\"</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 秘钥</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 生成本地SSK目录&nbsp;<b>$ ssh-keygen -t rsa -C '邮箱/账号'</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 查看SSH秘钥&nbsp;<b>$ cat id_rsa.pub</b>&nbsp;同时需要在托管服务上添加本地SSH秘钥</div><div><br></div><div>&nbsp; &nbsp; * 通用</div>&nbsp; &nbsp; &nbsp; &nbsp; - 查看当前版本及本地提交状态&nbsp;<b>$ git status</b><div>&nbsp; &nbsp; &nbsp; &nbsp; - 查看这个项目对应的远程仓库&nbsp;<b>$ git remote -v</b></div></div><div><b><br></b></div>"
    },
    "ofIlda18c": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "bookId": "ofIlda18c",
      "name": "Npm",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">Node 版本控制工具</b></div><div>&nbsp; &nbsp; 1.我们在不同的项目里需要切换不同版本的Node.js，所以nvm应运而生。</div><div>&nbsp; &nbsp;&nbsp;如果已经安装过node版本，请先自行卸载</div><div>&nbsp; &nbsp; 2.卸载完后直接下载nvm安装 (推荐使用nvm-setup.zip)</div><div>&nbsp; &nbsp; 地址：https://github.com/coreybutler/nvm-windows/releases</div><div>&nbsp; &nbsp; 3.nvm&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 会提示nvw下的相关命令</div><div>&nbsp; &nbsp; nvm ls&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// 查看已安装node版本</div><div>&nbsp; &nbsp; nvm install vXX&nbsp; &nbsp; &nbsp; // 安装对应vXX版本的node</div><div>&nbsp; &nbsp; nvm uninstall vXX&nbsp; &nbsp; // 卸载对应vXX版本的node</div><div>&nbsp; &nbsp; nvm use xxx&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 选择使用XXX版本</div><div><br></div><div>&nbsp; &nbsp; <b>参考文章</b></div><div>&nbsp; &nbsp;&nbsp;https://www.jianshu.com/p/1886243db936</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">NPM</b><br></div><div><div>&nbsp; &nbsp; 淘宝镜像</div><div><span style=\"white-space: pre;\">\t</span>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div>&nbsp; &nbsp; &nbsp; &nbsp; $ npm config edit registry=https://registry.npm.taobao.org/</div><div><br></div><div>初始化包管理文件</div><div><span style=\"white-space: pre;\">\t</span>$ npm init -y // 产生 package.json</div><div><span style=\"white-space: pre;\">\t</span></div><div>搜索模块</div><div><span style=\"white-space: pre;\">\t</span>$ npm search</div><div><span style=\"white-space: pre;\">\t</span></div><div>安装</div><div><span style=\"white-space: pre;\">\t</span>$ npm install moduleName 命令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1. 安装模块到项目node_modules目录下。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2. 不会将模块依赖写入devDependencies或dependencies 节点。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3. 运行 npm install 初始化项目时不会下载模块。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; $ npm install -g moduleName 命令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1. 安装模块到全局，不会在项目node_modules目录中保存模块包。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2. 不会将模块依赖写入devDependencies或dependencies 节点。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3. 运行 npm install 初始化项目时不会下载模块。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; $ npm install -save moduleName 命令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1. 安装模块到项目node_modules目录下。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2. 会将模块依赖写入dependencies 节点。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3. 运行 npm install 初始化项目时，会将模块下载到项目目录下。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 4. 运行npm install --production</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; $ npm install -save-dev moduleName 命令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1. 安装模块到项目node_modules目录下。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2. 会将模块依赖写入devDependencies 节点。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3. 运行 npm install 初始化项目时，会将模块下载到项目目录下。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 4. 运行npm install --production</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 或者注明NODE_ENV<font color=\"#ff0000\"><b>变量值为production时，不会自动下载模块</b></font>到node_modules目录中。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>删除包</div><div><span style=\"white-space: pre;\">\t</span>$ npm uninstall/remove name</div><div><span style=\"white-space: pre;\">\t</span></div><div>当导入一个包时：require('vue')</div><div>&nbsp; &nbsp; 1.找到对应的 node_modules</div><div>&nbsp; &nbsp; 2.找到require的包文件夹</div><div>&nbsp; &nbsp; 3.根据package.json找到需要的JS库文件</div></div>"
    },
    "aSA3uhCIT": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "bookId": "aSA3uhCIT",
      "name": "基础",
      "content": "<div><font color=\"#ff0000\"><b>概念</b></font></div><div>&nbsp; &nbsp; 算法是对特定问题求解步骤的一种<font color=\"#4169e1\" style=\"\"><b>描述</b></font>，是指令的有限序列</div><div>&nbsp; &nbsp; 特性：有穷性 确定性 有输入 有输出 有效可行性</div><div><br></div><div><font color=\"#ff0000\"><b>算法分析</b></font></div><div>&nbsp; &nbsp; 衡量算法最重要的一点就是效率和低存储量</div><div>&nbsp; &nbsp; 一般鉴于空间较为充足，故把算法的时间复杂度作为分析的重点</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>频度统计法：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 对所有基础语句的执行次数 n 求和来表示时间</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>时间复杂度</b></font>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 通常使用变量 n 代表的问题规模：即语句可能执行的次数合计</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 通常使用&nbsp;<font color=\"#4169e1\" style=\"font-weight: bold;\">函数 f(n) </font><font style=\"\">表示问题的执行时间合计</font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 解决该问题的时间复杂度<font color=\"#4169e1\"><b>&nbsp;T(n)&nbsp;</b></font>通常使用<b>&nbsp;</b><b>函数 f(n) </b>的增长率（求增长率或者阶/数量级）来表示</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; T(n) = O( <font color=\"#4169e1\"><b>f(n)</b></font> )</div><div>&nbsp; &nbsp; 随着问题规模不断扩大，时间复杂度随之不断上升，算法执行效率降低</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 常数阶 O(1) 对数阶 O(log2n) 线性阶 O(n)&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 线性对数阶 O(nlog2n) 平方阶 O(n2) 立方阶 O(n3) 指数阶 O(2^n)</div><div><br></div><div><font color=\"#ff0000\"><b>算法设计模式</b></font></div><div>&nbsp; &nbsp; * 自顶向下设计：强调首先对问题进行按步骤抽象，再根据步骤进行辅助函数设计<br></div><div>&nbsp; &nbsp; * 自底向上设计：强调首先解决辅助函数，然后使用辅助函数解决大问题</div>"
    },
    "zKd47sqnW": {
      "blockId": "U2EWIATls",
      "shelfId": "ntUIPXagV",
      "bookId": "zKd47sqnW",
      "name": "硬件介绍",
      "content": "<div><font color=\"#ff0000\"><b>介绍</b></font></div><div>&nbsp; &nbsp; * IT行业变化非常快，如业内著名的思科网络工程师认证只有两年时间（狗头）</div><div>&nbsp; &nbsp; * 我国现网中普遍使用华为、中兴、H3C等公司生产的计算机网络硬件</div><div><br></div><div><font color=\"#ff0000\"><b>硬件一览</b></font></div><div>&nbsp; &nbsp; * 客户端 / 集线器 / 交换机 / 分布式交换机 / 核心交换机</div><div>&nbsp; &nbsp; * 家用路由器 / 路由器 / 防火墙 / 无限LAN接入点 / 服务器</div><div><br></div><div><font color=\"#ff0000\"><b>网络</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>构成</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 抽象硬件为节点（node），同时节点之间通过链路（link）进行连接</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 网络中其他提供服务的计算机称为为服务器（host）与之对应的则是终端（client）</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>分类&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * LAN：local area network（公司学校内部的通信网络，也称局域网）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 遵循以太网协议</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * MAN：metropolitan area network（使用光缆在较远的区域间建立通信网络）<br></div>&nbsp; &nbsp; &nbsp; &nbsp; * WAN：wide area network（超远程通信，一般由电信运营商建设）<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 用户一般需要与供应商（Internet Service Provider）签订合同，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 使用ISP提供的接入点来完成连接</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 接入点的连接需要运营商提供的承载服务来完成（光缆线路、ADSL、移动通信网等）</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>抽象分层</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * ISO国际标准化组织制定了 OSI 基本参考模型</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 是使各种计算机在世界范围内互连为网络的标准框架</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 物理层：物理层的任务就是透明地传输比特流。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 数据链路层：使用帧来定义数据，MAC地址来定位，解决相邻主机通信问题</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 网络层：解决跨网络的主机通信问题</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 传输层：TCP/UDP，解决进程间的通信</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 应用层：HTTP等</div>"
    },
    "rTi82kJre": {
      "blockId": "YxnegsTMH",
      "shelfId": "Ho01HabXF",
      "bookId": "rTi82kJre",
      "name": "产品案例",
      "content": "<div><div><font color=\"#ff0000\"><b>产品案例</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>为什么咖啡行业不景气，却遍地都是？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/268169923</div><div><br></div><font color=\"#ff0000\"><b>产品变现</b></font><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>* 有哪些流量巨大但始终无法变现的互联网产品？<font color=\"#ff0000\"><b><br></b></font><div>&nbsp; &nbsp;&nbsp;https://www.zhihu.com/question/26059765/answer/148846396</div></div><div>&nbsp; &nbsp;&nbsp;https://www.zhihu.com/question/26059765/answer/253412153</div><div>&nbsp; &nbsp; 如何看待游戏《贪玩蓝月》的公司创始人被捕？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/329184075/answer/714142046</div><div>&nbsp; &nbsp;&nbsp;茅台酒厂如何防止员工上班时偷喝茅台酒？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/303620398/answer/634047672</div></div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">利益分配</b></div><div><div>&nbsp; &nbsp; *&nbsp;为什么每次中国出现危机都喜欢启动大基建?</div><div>&nbsp; &nbsp; &nbsp; https://www.zhihu.com/question/376664591/answer/1077188422</div></div><div>&nbsp; &nbsp; * 真正的有钱人都买什么奢侈品？</div><div>&nbsp; &nbsp; &nbsp; https://www.zhihu.com/question/34587107/answer/985523285<br></div><div>&nbsp; &nbsp; * 美国家庭为什么容易破产？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/351165549/answer/868357982</div><div>&nbsp; &nbsp;&nbsp;为什么房地产商不能拿低价的土地把房价降下来?</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/318916762/answer/699167318</div><div>&nbsp; &nbsp;&nbsp;如何解决资本主义周期性危机？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/55120634/answer/722572792</div><div>&nbsp; &nbsp;&nbsp;如何看待包商银行被央行接管事件 ，中小城商行的发展前景在哪？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/325970300/answer/696727070</div><div>&nbsp; &nbsp;&nbsp;没有一个经济数据，一文看懂中国经济周期的真相</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/54076753</div><div>&nbsp; &nbsp;&nbsp;股票里真的有炒股票的庄家吗?谁是庄家?</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/20451849/answer/147923476</div><div>&nbsp; &nbsp;&nbsp;余额宝规模达到 1.43 万亿意味着什么？对银行的业务有哪些影响？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/61926374/answer/193032834</div><div>&nbsp; &nbsp;&nbsp;2019年全国房价会呈什么趋势？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/302685037/answer/583089503</div><div><br></div><div><div><font color=\"#ff0000\"><b>市场划分</b></font><br></div><div>&nbsp; &nbsp;&nbsp;中文互联网的产出在渐渐枯萎吗？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/49684783/answer/1088276178</div><div>&nbsp; &nbsp;&nbsp;为什么互联网行业工资高？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/32022042/answer/799455698</div><div>&nbsp; &nbsp;&nbsp;如何着手分析一个行业？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/20219092/answer/522122813</div><div>&nbsp; &nbsp;&nbsp;应届生 应该进企业做会计还是去代理记账公司？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/278572137/answer/636717479</div></div><div><br></div><div><font color=\"#ff0000\"><b>会计学</b></font></div><div><br></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>参考文章</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 请问各位财会前辈，本人小白，学会计实操，报十几种行业的好吗？</div><div>&nbsp; &nbsp; &nbsp; &nbsp; https://www.zhihu.com/collection/46005262?page=1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 所以学会计理论盯着企业会计准则一本书就够了，如果能真正掌握几个会计的基本准则，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 一通百通，无论什么行业，什么业务模式，都能处理。<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;为什么大部分财务人员工资那么低？</div><div>&nbsp; &nbsp; &nbsp; &nbsp; https://www.zhihu.com/question/34892325/answer/93962498</div></div>"
    },
    "AZ2G447Hy": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "AZ2G447Hy",
      "name": "文章",
      "content": "<div><font color=\"#ff0000\"><b>政治目标</b></font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>失去了人口红利的中国会怎样？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/354301326/answer/946847312</div><div>&nbsp; &nbsp;&nbsp;人们研究如甲骨文之类的古文字的意义是什么？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/24164877/answer/735299839</div><div>&nbsp; &nbsp; 美国为什么不侵略邻近且资源丰富的加拿大？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/21685448/answer/426741248</div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font></div><div><font color=\"#ff0000\"><b>各时间政策分析</b></font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>* 有哪些行为堪比「1949 年加入国民党」？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/265048690/answer/297995221</div><div>&nbsp; &nbsp; *&nbsp;知乎用户有哪些预言最终被证实了？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/265334984/answer/1098369373</div><div>&nbsp; &nbsp; *“实体经济越来越不行了”这种流行观点是否成立？为什么？</div><div>&nbsp; &nbsp; https://www.zhihu.com/collection/46005262</div><div>&nbsp; &nbsp;<br></div><div><font color=\"#ff0000\"><b>人物立场分析</b></font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div>&nbsp; &nbsp; *&nbsp;沙僧真的是因为打碎了玻璃盏才被赶到下界的吗？</div><div>&nbsp; &nbsp; &nbsp; https://www.zhihu.com/question/371515636/answer/1016244372</div><div>&nbsp; &nbsp; * 生活中有没有特别绿茶的女生？</div><div>&nbsp; &nbsp; &nbsp; https://www.zhihu.com/question/328524632/answer/995660728</div><div>&nbsp; &nbsp;&nbsp;怎样在机关事业单位不被老油条欺负？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/337531740/answer/886984703</div><div>&nbsp; &nbsp;&nbsp;最失败的一次外交活动</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/84372675</div><div>&nbsp; &nbsp;&nbsp;英国打过几乎所有国家，为什么没几个国家恨它？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/46770386/answer/797812681</div><div>&nbsp; &nbsp;&nbsp;曹操比刘邦到底差哪儿，为何不能一统天下？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/308017350/answer/626051963</div><div>&nbsp; &nbsp;&nbsp;为何史书少有令人有「跪感」的「烧脑」的权谋反转？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/54826697/answer/678424196</div><div>&nbsp; &nbsp;&nbsp;是不是外国人活得想得很简单？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/308268014/answer/620768338</div><div>&nbsp; &nbsp;&nbsp;</div><div><br></div>"
    },
    "EkK7jwTlc": {
      "blockId": "YxnegsTMH",
      "shelfId": "MMuN17Zro",
      "bookId": "EkK7jwTlc",
      "name": "摘抄",
      "content": "<div><font color=\"#4169e1\"><b>*&nbsp;知乎收藏是看不完的，不如单纯的收藏，有时间了再消化并计入笔记系统</b></font></div><div><br></div><div><font color=\"#ff0000\"><b>==================================================技术向</b></font></div><div><div>前言</div>&nbsp; &nbsp; * 一个33岁老程序员的感悟<div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/91167083</div><div>&nbsp; &nbsp;&nbsp;前端工程师的深度或者核心竞争力体现在哪里？</div><div>&nbsp; &nbsp; https://www.zhihu.com/question/263926959/answer/275947141</div></div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">==================================================生活向</b><br></div>*&nbsp;<span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">搞科研是需要天赋的。说难也不难，就是一种研究思路的问题，先找问题，再搜数据，利用一两个验证方法而已。</span><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">但是这个思路你现在要是没有，以后也很难有。有句话我觉得说的挺对，有些人为了逃避思考，愿意做任何事。</span><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><br></span></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">*&nbsp;</span>我一点都不讨厌我带的学生没有科研能力，我手底下上百个硕士生，</div><div>不可能个个优秀。再不行，我还有博士生可以用。</div><div>但是我很讨厌那种明知道自己没有科研能力，还不抓紧时间给自己找后路的学生。</div><div>你要是觉得自己不想读博，跟我说，我放你去实习。那些不发论文，还不去实习给自己找出路的学生，我是最讨厌。</div><div><br></div><div><p>* 我给你实操的建议。</p><p>&nbsp; &nbsp; 一是行测，从现在起，每天利用吃饭时间看新闻或听新闻，八卦多了会有印象。</p><p>&nbsp; &nbsp; 利用上厕所和通勤时间，顶多再用半小时休闲时间看真题卷和模拟卷，不是做题是<font color=\"#ff0000\"><b>看题！</b></font></p><p>&nbsp; &nbsp; 看解题思路和背答案！一天熟知20题答案或套路，</p><p>&nbsp; &nbsp; 到考试时，你脑子里大概就有近3000道题答案了。怎么着70多分也能蒙上。</p><p>&nbsp; &nbsp; 二是申论。每天用半小时到一小时看<font color=\"#ff0000\"><b>人民日报。</b></font></p><p>&nbsp; &nbsp; 重点不是看内容，而是练习把新闻和文章，<font color=\"#ff0000\"><b>按照是什么、为什么、怎么办三部分进行解构</b></font>，</p><p>&nbsp; &nbsp; 练习半年，你的申论乃至面试口头表述的逻辑性、条理性都会有大的进步，</p><p>&nbsp; &nbsp; 也能抓住题干准确答题。大概70分以上是保险的。</p><p>&nbsp; &nbsp; 根本不需要上任何培训班，浪费钱和时间，自己就能搞定。</p><p>&nbsp; &nbsp; 面试，就是你之前这些阅读量信息量的综合考验，只需要平心静气看清楚题目问什么，</p><p>&nbsp; &nbsp; 把自己平日里从新闻和人民日报学会的官方用语以有逻辑有条理的语言表述出来。妥了。</p><p>&nbsp; &nbsp; 一个考了三次第一次双第一体检拿下，第二次双第二落败，</p><p>&nbsp; &nbsp; 第三次快30岁才双一入围，目前是面试考官的老同志提供的建议。</p><p><br></p><p>* 如果你具备实事求是的态度，对一个你看不懂的东西，你不会自卑，不会崇拜，</p><p>你会去研究它，了解它，等你了解了这项工作究竟是什么，你最终才能评价它，在这之后，或许你才会崇拜，才会自卑。</p><div><br><div><p>* 首先，重中之重，最重要的是<b>考研！考研！考研！</b>目标双一流院校或重点财经政法类院校。</p><p>量力而行很重要：如果你是厦大/南大/浙大/南开/天大这种准一线水平的，除了考本校之外，一定要试试北大光华/清华经管/CCER/高金/安泰/之类的地方，一旦成功那就是新的一番天地；如果你是普通一本或者二本且自身能力有限，目标可以定在重点财经类院校的，比如西南财经/江西财经/东北财经之类的，大小也是个财经类研究生，可以当作入行的敲门砖了。</p><p>其次，需要考的证书只有两个：一个叫<b>CPA-中国注册会计师</b>，另一个叫<b>司法考试</b>，其他什么CFA/ACCA/FRM一律都是屁用没有的扯犊子证书，至少在你刚毕业求职的时候是这样的，那些证书日后你有需要在职业上进一步发展的时候再行考虑吧。</p><p>不需要在毕业都考完。如果你的本科院校过得去（双一流985+两财一贸），你大四开始准备CPA，争取过个三门，碰上对研究生学历没那么太大要求的一些券商，你就可以入职开始你的投行生涯了。如果读了研究生，那就在读研期间争取把CPA跟司考都拿下，同时找券商做实习，等你毕业的时候，中金/国开/四大行总行那种地方咱们不提，拿着CPA跟司考去个海通/国泰君安/中信建投/申银万国/华泰证券之类的地方还是有可能实现的。</p><p>肺腑之言，爱信不信。</p><p><br></p><p>* 会报税、会做账、会出报表、会各种表统计、会项目测算等等，你以为你自己是个会计啦！不不不，你还是小白，因为你还不会所得税汇算清缴、不会财务分析、不会做融资、不会做上市的东西等等，慢慢学吧</p><p><br></p><p>* A股的优势，是国内门槛最低的合法赌博市场。牛市的基础不是基本面，是市场上的流动性。</p><p><br></p><p>* 在中国，如果你满足不了别人，你的人生就是失败的，除非你自己内心非常强大。</p><p><br></p><p>* 抛开传统的价值观。在我眼里，担当等于机会。而机会，就是财富。</p><p><br></p><p>*&nbsp;这东西跟能力无关，这就是平台的差距。不要以为，这世界是不会变的。那些看起来很不了不起的成绩，都源于一点点的积累</p><p><br></p><p>*&nbsp;我提供一个参考思路，大家可以深入学习一下国家十三五规划，那里说的很详细；</p><p><br></p><p>* 所谓农业经济的思维方式，就是“播种－可以收获－播更多的种－可以收更多的获”，类似的还有“考上好大学－找到好工作－从此过上幸福生活”</p><p>&nbsp; &nbsp; 线性＋静态＋预设结果。线性就是只认一条路，静态就是蒙上眼，预设结果就是认定付出就有收获，就是一头俯首耕地的呆牛。</p><p><br></p><p>*&nbsp;“没时间做某事”，也就等于认同“某事不重要”。</p><p><br></p><p>*&nbsp;拿住优质资产，盈利是大概率事件，但拿住是很难的。</p><p><br></p><p>*&nbsp;以前网上有句话说「认真你就输了」，我想我输了很多时间，而他输了可以在面试的时候侃侃而谈（说的对还是错其实没那么重要）的机会。</p><p><br></p><p>*&nbsp;深山修炼情节</p></div></div></div></div>"
    },
    "OnyM97DNC": {
      "blockId": "YxnegsTMH",
      "shelfId": "MMuN17Zro",
      "bookId": "OnyM97DNC",
      "name": "待读书籍",
      "content": "<span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">资治通鉴直解&nbsp;</span><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">张居正</span><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">未来地图&nbsp;</span>这本书关注了很多新兴的互联网技术、业态、模式，以及背后的商业思维<br></span></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">浪潮之巅&nbsp;</span>吴军 互联网产业科普向</span></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">两次全球大危机的比较研究&nbsp;刘鹤</span><br></span></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">四书集注&nbsp;</span>朱子读书法<span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">&nbsp;</span>朱熹</div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><p>董筱丹、温铁军的《去依附》，图书管理员第一卷第一篇第三自然段。</p><p>纳西姆塔勒布《随机致富的傻瓜》《黑天鹅》《反脆弱》《非对称风险》。</p><p>庆祝新中国成立七十周年：马化腾</p><p><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">建议所有职场新人都看看《沧浪之水》或者改编的电视剧《岁月》</span><br></p><p>时代的见证者（陈润）重新发现改革&nbsp;界限下的中国（吴建新/钟庆）</p></span></div>"
    },
    "yD6sHdo7b": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "yD6sHdo7b",
      "name": "面试题",
      "content": "<div><br></div><div><br></div><font color=\"#ff0000\"><b>参考文章</b></font><br><div>&nbsp; &nbsp;&nbsp;前端面试分享: 两年经验社招-阿里巴巴（已经通过）</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/83801858</div><div>&nbsp; &nbsp;&nbsp;前端开发，在不要求学历的前提下，什么水平能进百度 阿里 华为 b站的大公司？</div><div>&nbsp; &nbsp; https://www.zhihu.com/collection/46005262</div><div>&nbsp; &nbsp;&nbsp;毕业一年左右的前端妹子面经总结</div><div>&nbsp; &nbsp;&nbsp;https://zhuanlan.zhihu.com/p/74229306</div>"
    },
    "nyF-QQmkl": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "nyF-QQmkl",
      "name": "公司账号",
      "content": "<div><font color=\"#ff0000\"><b>麦年</b></font></div>&nbsp; &nbsp; JIRA huangwenqiang a123456789<div>&nbsp; &nbsp; Gitlab<br><div>&nbsp; &nbsp;&nbsp;http://222.66.148.78:3030/<br><div>&nbsp; &nbsp; wqao123456 974879409</div><div><br></div><div><div>&nbsp; &nbsp; 项目设计稿原型：</div><div>&nbsp; &nbsp; 金邻APP：https://ku1nos.axshare.com</div><div>&nbsp; &nbsp; 岛主APP：https://ee6atz.axshare.com</div><div>&nbsp; &nbsp; 蓝湖设计稿：https://lanhuapp.com/url/Ys9wV-87ZWO</div></div><div><br></div><div><font color=\"#ff0000\"><b>驴妈妈</b></font></div><div>&nbsp; &nbsp; gitlab：http://10.200.5.103</div><div>&nbsp; &nbsp; name / email：huangwenqiang / huangwenqiang@lvmama.com</div><div>&nbsp; &nbsp; password：Qq974879409</div><div>&nbsp; &nbsp; wifi：Joyu@201812~</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; 需求实现 * 从master上新建本地<font color=\"#ff0000\"><b>需求分支</b></font>并推送<font color=\"#ff0000\"><b>该分支</b></font>至服务</div><div>&nbsp; &nbsp; 需求测试 * 切换至 dev-ark 分支，并将其与<font color=\"#ff0000\"><b>需求分支</b></font>合并，通知服务端人员重新部署服务</div><div>&nbsp; &nbsp; 需求上线 * 再议</div></div></div>"
    },
    "Y-zYr0P3f": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "Y-zYr0P3f",
      "name": "1.浏览器URL解析",
      "content": "<div><b><font color=\"#ff0000\">浏览器URL解析</font></b></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>1.字符串解析</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>2.</b></font><font color=\"#4169e1\" style=\"\"><b>HTTP Strict Transport Security</b></font><b>&nbsp;</b>强制客户端使用HTTPS请求资源&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ---------------------------------------------------------------</div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>进行 http 请求后（这里可能存在<font color=\"#4169e1\"><b>中间人劫持</b></font>）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 返回请求头&nbsp;<b>Strict-Transport-Security: max-age=xxx秒</b> 浏览器会进行HTTPS重定向</div><div><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b>同时浏览器会记录下这些信息，max-age时间内都会自动把HTTP替换为HTTPS</div>&nbsp; &nbsp; &nbsp; &nbsp; ---------------------------------------------------------------<div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>3.安全检查 / 限制访问（996.icu）</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>4.</b></font><font color=\"#4169e1\" style=\"\"><b>检查资源缓存</b></font></div>&nbsp; &nbsp; &nbsp; &nbsp; ---------------------------------------------------------------<div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">强制性缓存资源</b></div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b>历史响应头为以下字段时，不会重新请求资源</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Expires：</b>xxx 绝对时间内</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Cache-Control：</b>max-age=xxx 秒内</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * no-catch 会使得浏览器始终请求该资源</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>对比缓存</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 历史响应头设置&nbsp;</div><div><span style=\"white-space: initial;\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Last-Modified</b>：xxx 绝对时间&nbsp; &nbsp;&nbsp;</span></div><div><span style=\"white-space: initial;\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Etag</b>: hash</span></div><div><span style=\"white-space: initial;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 浏览器再次请求时自动标记请求头&nbsp;</span></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; If-Modified-Since</b>：xxx 绝对时间</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>Etag</b>: hash</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;如果服务器端的资源没有变化，则自动返回<font color=\"#ff0000\"><b> HTTP 304</b></font>（Not Changed.）状态码，内容为空</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 但是如果内容是动态生成的则该字段没有意义</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>刷新网页的几种方式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; JS刷新&nbsp;如果缓存没有失效，浏览器会直接使用缓存</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;手动F5 浏览器会认为缓存失效，重新带&nbsp;Cache-Control: max-age=0 请求</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 强制 ctrl+F5 浏览器会忽略缓存，重新带&nbsp;Cache-Control: no-cache 请求</div><div><div>&nbsp; &nbsp; &nbsp; &nbsp; ---------------------------------------------------------------<b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></div><div><b><font color=\"#ff0000\"><br></font></b></div><div><b><font color=\"#ff0000\">参考文章</font></b></div><div><div>&nbsp; &nbsp; 你所不知道的 HSTS：Strict Transport Security</div><div>&nbsp; &nbsp; https://www.barretlee.com/blog/2015/10/22/hsts-intro/<br></div></div><div>&nbsp; &nbsp; Web服务器、应用程序服务器、HTTP服务器区别</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/58917525</div><div>&nbsp; &nbsp; 在浏览器输入 URL 回车之后发生了什么（超详细版）</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/80551769</div><div>&nbsp; &nbsp;&nbsp;一个HTTP打趴80%面试者</div><div>&nbsp; &nbsp; https://zhuanlan.zhihu.com/p/70949908</div></div></div>"
    },
    "yTQ1Kqg2e": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "yTQ1Kqg2e",
      "name": "2.DNS查询",
      "content": "<div><font color=\"#ff0000\"><b>DNS查询</b></font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font>（Domain Name System）</div><div>&nbsp; &nbsp; * DNS服务器 主要用于域名与 IP 地址的相互转换</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>1.查询本地IP缓存</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 浏览器自查询</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 操作系统本地<b>Hosts文件</b>查询</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 路由器自查询</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ISP DNS地址缓存（本地自设置都首选DNS服务器）</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>2.向\"国内根域名服务器\"查询</b></font></div>"
    },
    "lqdJlItoJ": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "lqdJlItoJ",
      "name": "3.IP寻址建立连接",
      "content": "<div><font color=\"#ff0000\"><b>应用层</b></font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>根据DNS查询的IP地址，<b>构造HTTP报文</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>发送HTTP请求的几种方式</b></font></div>&nbsp; &nbsp; &nbsp; &nbsp; * 浏览器只能发送 GET/POST 请求<div>&nbsp; &nbsp; &nbsp; &nbsp; * 通过AJAX技术（允许客户端脚本发送HTTP请求）,过JS操纵 <font color=\"#ff0000\"><b>XMLHttpRequest对象</b></font> 发送HTTP请求</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;fetch 号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象，细节上需要进行封装</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------------------------------------------------------------------</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>安全问题</b></font></div><div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>同源策略是浏览器的安全限制，从一个源加载的文档或者脚本默认不能访问另一个源的资源</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通过<font color=\"#ff0000\"><b>CORS</b></font>(Cross-Origin Resources Sharing)，浏览器允许向其他源服务器发送资源请求。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;目前基本上主流的浏览器都支持CORS，即会在请求头中添加 <b>Origin 字段</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务端需要在响应头中设置 <b>Access-Control-Allow-Origin</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </b>* 浏览器判断响应头中的 ACAO 和 Origin 若不一致则抛出异常</div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;Access-Control-Allow-Credentials&nbsp;表示是否允许发送Cookie<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ** 可以通过代理服务器（如Nginx）转发请求/响应来规避跨域问题<br></div>&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------------------------------------------------------------------<div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>OPTIONS请求</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>浏览器发送<b>复杂请求（非GET等）</b>时，先发送的一条预检请求</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 发生了跨域请求时，先发送的一条预检请求</div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>身份认证</b></font><div>&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------------------------------------------------------------------<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务器可以设置浏览器保存&nbsp;<b>Cookie</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务器生产保存&nbsp;<b>Session</b>（内存开销，扩展迁移不易），浏览器临时使用&nbsp;<b>Session&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务端根据秘钥生成<b>Token</b>，浏览器保存token，服务端只需要通过秘钥<b>验证Token</b></div></div>&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------------------------------------------------------------------<div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\" style=\"\"><b>HTTPS：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;基于HTTP添加&nbsp;SSL协议（Secure Sockets Layer）用于数据加密</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务器需要付费申请SSL证书（公钥）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;三次握手后，浏览器请求证书信息（私钥），协商安全等级，建立秘钥会话</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 添加 HTTP Strict Transport Security 响应头强制客户端使用HTTPS协议</div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;</b>默认使用443端口进行通信<div>&nbsp; &nbsp; &nbsp; &nbsp; ------------------------------------------------------------------------------------------------<div><font color=\"#ff0000\"><b>传输层</b></font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font>准备连接服务器指定端口，建立TCP连接</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>预备：三次握手</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>* 客户端发送TCP包（添加SYN标志，指明目标端口等）</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;服务器发回确认包进行应答（添加ACK标志等）</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;客户端再次发送确认包（添加SYN标志等）</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; </b>所谓连接其实是客户端和服务器的内存里保存的一份关于对方的信息</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 并标记编号，方便服务器接受时能够准确地还原报文信息。</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">网络层</b><br></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b>根据&nbsp;<font color=\"#4169e1\"><b>IP协议&nbsp;</b></font>打包数据段，并加入源及目标的IP地址，并且负责寻找传输路线。</div><div><br></div><b style=\"color: rgb(255, 0, 0);\">链路层</b><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>根据 <font color=\"#4169e1\"><b>以太网协议&nbsp;</b></font>将数据分为以“帧”为单位的数据包</div><div><span style=\"color: rgb(255, 0, 0);\"><font color=\"#000000\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font></span>以太网规定了连入网络的所有设备都必须具备“网卡”接口</div><div><span style=\"color: rgb(255, 0, 0);\"><font color=\"#000000\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font></span>数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址</div><div><span style=\"color: rgb(255, 0, 0);\"><font color=\"#000000\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font></span>直接把数据通过 ARP 协议，向本网络的所有机器发送，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</div><div><br></div><div><div><div><div><font color=\"#ff0000\"><b>物理层</b></font></div></div></div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>参考文章</b></font></div></div></div></div><div>&nbsp; &nbsp;&nbsp;ajax和axios、fetch的区别</div><div>&nbsp; &nbsp;&nbsp;https://www.jianshu.com/p/8bc48f8fde75</div><div>&nbsp; &nbsp;&nbsp;跨域资源共享 CORS 详解</div><div>&nbsp; &nbsp;&nbsp;www.ruanyifeng.com/blog/2016/04/cors.html</div><div>&nbsp; &nbsp; HTTPS 部署简要指南</div><div>&nbsp; &nbsp;&nbsp;https://segmentfault.com/a/1190000000403888</div><div>&nbsp; &nbsp; HTTPS 百度百科</div><div>&nbsp; &nbsp; https://baike.baidu.com/item/https</div>"
    },
    "OFr8yAcoT": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "OFr8yAcoT",
      "name": "4.返值浏览器渲染页面",
      "content": "<div><b><font color=\"#ff0000\">浏览器端</font></b></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>处理HTTP响应</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font><b><font style=\"\">1.</font>根据响应头做不同的事情</b></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>1** 信息性状态码：如长链接正在处理 2** 成功状态码&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3** 重定向 4** 客户端错误 5** 服务端错误</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>2.解压缩gzip资源</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; 3.</b>资源缓存</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>4.根据MIME类型解析内容</b><br></div><div><b><br></b></div><div><b>&nbsp; &nbsp; </b><font color=\"#4169e1\" style=\"\"><b>解析HTML文件 = DOM树</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font><font style=\"\">1.</font>将传输的二进制数据进行解码</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.异步提前加载DOM资源，如img的src属性</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.构建DOM树</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 4.浏览器事件 DOMContentLoaded 触发</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>解析CSS语法</b></font><b style=\"color: rgb(65, 105, 225);\">&nbsp;= CSS规则树</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.CSS 解析器处理它遇到的任何CSS语句得到规则表</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;过度层叠且不使用 id 和 class 会导致CSS解析缓慢</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>合并两棵树</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.CSS数值 / 权重规则计算</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.阻塞渲染：CSS &gt; JavaScript &gt; DOM</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.得到渲染树</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>浏览器根据渲染树进行UI渲染</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font>1.确定DOM的位置/大小</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.遍历渲染树绘制并显示内容</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.页面展现</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>回流与重绘</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 布局改变会导致<font color=\"#4169e1\"><b>回流</b></font>(成本高)：如改变<font color=\"#ff0000\"><b>结点的位置，边距，大小及 display:none</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 外观风格值改变会导致<font color=\"#4169e1\" style=\"font-weight: bold;\">重绘：</font>推荐 visibility:hidden</div><div><font color=\"#4169e1\"><b><br></b></font></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>2.JavaScript引擎</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>1.词法解析</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 得出抽象语法树（AST）并转换成机器指令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>&nbsp;2.预编译：</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;抽象JS内存环境：全局环境/函数环境/Eval</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;抽象JS内存环境内容：执行上下文</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>* 创建执行上下文（所谓的变量提升）</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 创建变量内存（变量/函数）&gt;&nbsp;建立作用域链 &gt;&nbsp;确定this指向当前执行上下文</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>3.执行&nbsp;</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*&nbsp;</b></font><b style=\"color: rgb(65, 105, 225);\">由于动态类型特性，相同代码可能由于类型不同/值更改而被重新编译：a=1/a=\"1\"）</b></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;事件循环执行顺序</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;常规代码 - 同步队列（宏任务）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Promise.then / process.nextTick - ES6/Node（微任务）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;浏览器事件 / 定时器 / HTTP异步请求进程 - 异步队列（异步任务）</div>"
    },
    "CTBW-bQHo": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "bookId": "CTBW-bQHo",
      "name": "Webpack",
      "content": "<div><div><b style=\"color: rgb(255, 0, 0);\">目标</b><br></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font><font color=\"#4169e1\"><b>* 浏览器的限制&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 只支持 HTML/CSS/JavaScript 为基础的页面&nbsp; &nbsp;&nbsp;</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp; * 模块化需求</b><br></div><div><div><b>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; - Jquery库&nbsp;</b>将JS库都放到了 window.$ 下，容易导致命名冲突</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>- CommonJS规范&nbsp;</b>Node：modules.exports/require 浏览器环境需要通过工具转译（babel）</div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - AMD规范&nbsp;</b>采用异步的方式去加载依赖的模块（requireJS）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>- ES6&nbsp;&nbsp;</b>import/export&nbsp;<b>目前</b>无法直接运行在大部分 JavaScript 运行环境下（babel）</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>- 样式模块化&nbsp;</b>SCSS：用和 CSS 相似的编程语言写完后再编译成正常的 CSS 文件，无法直接执行</div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; * 新语法/框架需要转译</b></font><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; React JSX语法 / Vue 模板文件（html/js/css）/ TypeScript需要转译</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>共同点：</b></font><font color=\"#4169e1\"><b>源代码无法直接运行，必须通过转换后才可以正常运行。</b></font></div><div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; 我们需要</font><font color=\"#ff0000\"><b>构建工具</b></font><font color=\"#4169e1\" style=\"font-weight: bold;\">，在编写完代码后</font><font style=\"font-weight: bold; color: rgb(65, 105, 225);\">生成能在线上运行的代码</font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div><b style=\"color: rgb(255, 0, 0);\">webpack 构建工具</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; webpack诞生记：https://zhuanlan.zhihu.com/p/71640308</b></div><div><b>&nbsp; &nbsp;&nbsp;</b><font color=\"#ff0000\"><b>核心</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 代码转换：通过 Loader 转换文件，使得Vue/React/TypeScript/SCSS 编译成可运行得Js代码</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>优化</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 模块合并：在 Webpack 里一切文件皆模块，目标一次HTTP请求完所有需要的资源(bundle.js)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>提供开发工具</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。</div><div><br></div></div></div><div>---------------------------------------------------------------------------------------------------<br></div><div><div><font color=\"#ff0000\"><b>目录结构</b></font></div><div>&nbsp; &nbsp; #dist</div><div>&nbsp; &nbsp; &nbsp; &nbsp; index.html( &lt;= bundle script) # Step 3 后不需要</div><div>&nbsp; &nbsp; #src</div><div>&nbsp; &nbsp; &nbsp; &nbsp; index.js</div><div>&nbsp; &nbsp; #webpack-config.js</div><div>&nbsp; &nbsp; #package.json</div><div><span style=\"white-space: pre;\">\t</span>\"start\": \"webpack-dev-server --open\"</div><div><span style=\"white-space: pre;\">\t</span>\"build\": \"webpack\" 或 \"webpack --config webpack-config.js\"</div><div><br></div><div>---------------------------------------------------------------------------------------------------<br></div><div><font color=\"#ff0000\"><b>加载过程</b></font></div><div>&nbsp; &nbsp; Webpack 启动后</div><div>&nbsp; &nbsp; - 从 <font color=\"#4169e1\"><b>Entry </b></font>开始递归解析依赖的所有 <font color=\"#4169e1\"><b>Module </b></font>中配置的文件</div><div>&nbsp; &nbsp; - 每找到一个 Module， 就会根据配置的 <font color=\"#4169e1\"><b>Loader </b></font>去找出对应的转换规则，</div><div>&nbsp; &nbsp; - 继续解析出当前 Module 依赖的 Module。&nbsp;</div><div>&nbsp; &nbsp; - 这些 Module 和其所有依赖 Module&nbsp;会以 Entry 为单位进行分组，即一个 <font color=\"#4169e1\"><b>Chunk</b></font>。</div><div>&nbsp; &nbsp; - 最后 Webpack 会把所有 Chunk 转换成文件 <font color=\"#ff0000\" style=\"\">bundleJS </font>输出。&nbsp;</div></div><div>&nbsp; &nbsp; - 在整个流程中 Webpack 会在恰当的时机执行 Plugin 里定义的逻辑。</div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; </font><b>url-loader 与 动态图片地址</b><br></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp; &nbsp; &nbsp;</font>webpack 通常将图片转为模块依赖，而动态图片地址和实际构建目录地址不同（404）</div><div>---------------------------------------------------------------------------------------------------<br></div><div><div><font color=\"#ff0000\"><b>webpack.config.js</b></font></div><div><br></div><div>const path = require(\"path\");</div><div>const HtmlWebpackPlugin = require(\"html-webpack-plugin\"); # Step 3</div><div>const CleanWebpackPlugin = require(\"clean-webpack-plugin\"); # Step 4</div><div><br></div><div><font color=\"#4169e1\"><b>module.exports = {</b></font></div><div>&nbsp; &nbsp; // * 打包模式</div><div>&nbsp; &nbsp; mode: \"development\",&nbsp;</div><div><br></div><div>&nbsp; &nbsp; // * 控制台错误定位提示</div><div>&nbsp; &nbsp; devtool: \"inline-source-map\",&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>// 1.打包入口：递归解析所有依赖模块</b></font></div><div>&nbsp; &nbsp; entry: \"./src/index.js\",</div><div>&nbsp; &nbsp; output: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; filename: \"bundle.js\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; path: path.resolve(__dirname, \"dist\"), //&nbsp;输出文件存放在本地的目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp; publicPath: \"\" // * 某些用到相对路径的资源的URL前缀 默认空</div><div>&nbsp; &nbsp; },</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>// 2.打包内容</b></font></div><div>&nbsp; &nbsp; module: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; rules: [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 解析<font color=\"#ff0000\"><b>样式文件</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; test: /\\.css$/,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; use: [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { loader:&nbsp;\"style-loader\"},&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { loader:&nbsp;\"css-loader\"}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // 解析<font color=\"#ff0000\"><b>图片文件</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; test: /\\.(png|svg|jpg|gif)$/,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; use: [</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { loader: \"file-loader\" },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; { loader: \"url-loader\", options: { limit: 8192 } }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>// - url-loader 依赖于 file-loader 用于图片优化/base64</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // - base64 &lt;= options.limit(bit) &lt;=&nbsp; Img // 8192bit = 1024b = 1kb</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ]</div><div>&nbsp; &nbsp; },</div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>// 其他生产环境配置</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp;</font> build: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; index: path.resolve(__dirname, '../dist/index.html'),</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;assetsRoot: path.resolve(__dirname, '../dist'), // 静态资源根目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;assetsSubDirectory: 'static', // 静态资源子目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;assetsPublicPath: '/', //&nbsp;公共路径</div><div>&nbsp; &nbsp; }&nbsp; &nbsp;<font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp;</font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>// 5 服务器模式：能够重新进行build加载（刷新了页面）</b></font></div><div>&nbsp; &nbsp; devServer: {</div><div>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>contentBase: { \"./dist\" },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; port: 8080,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; hot: true, // * 局部刷新时需要开起</div><div>&nbsp; &nbsp; },</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b># 外部插件</b></font></div><div>&nbsp; &nbsp; plugins: [</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>// 3.自动生成 dist/Html 入口文件&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; new HtmlWebpackPlugin({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: \"MyLib\",</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; template: \"./src/packTemplate.html\" // 导出的模板</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // favicon: \"path/to/yourfile.ico\" // Link图标</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }),</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>// 4.打包前清空 dist 目录</b></font>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; new CleanWebpackPlugin()</div><div>&nbsp; &nbsp; ]</div><div><font color=\"#4169e1\"><b>};</b></font></div><div><br></div><div></div></div>"
    },
    "kVp0qE4KY": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "kVp0qE4KY",
      "name": "CSS 常用",
      "content": "<div><div><b><font color=\"#ff0000\">常用样式</font></b></div>&nbsp;<font color=\"#4169e1\"><b>&nbsp;&nbsp; &nbsp; &nbsp; ======================================================</b></font><div><span style=\"white-space: pre;\">\t</span><font color=\"#4169e1\" style=\"\"><b>行内块元素</b></font></div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; display:inline-block</div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; 水平对齐 vertical-align: top</div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; 间隙 font-size: 0</div>&nbsp;<font color=\"#4169e1\"><b>&nbsp;&nbsp; &nbsp; &nbsp; ======================================================</b></font><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>背景透明</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;opacity：0~1：所有&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; rgba(x,y,z,0~1)：单独<b style=\"color: rgb(65, 105, 225);\">&nbsp;</b></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; 背景图像</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1. 设置背景图: background-image: url(../img/a.jpg)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2. 控制xy重复: background-repeat: repeat-x/y / no repeat</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3. 铺满屏幕：background-size:cover/num%</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 4. 固定不动：background-attachment: fixed;</div><div>&nbsp;<font color=\"#4169e1\"><b> &nbsp; &nbsp; &nbsp; ======================================================</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>行内换行</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 换行符无效 / 多个空格会被合并为一个 / 句子自动换行 / 单词超出边界</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; word-wrap: break-word;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>行内裁剪</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; white-space: nowrap;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; text-overflow: ellipsis;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; overflow: hidden;<b style=\"color: rgb(65, 105, 225);\">&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>Overflow</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; visible<span style=\"white-space: pre;\">\t</span>默认值。内容不会被修剪，会呈现在元素框之外。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; hidden<span style=\"white-space: pre;\">\t</span>内容会被修剪，并且其余内容是不可见的。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scroll<span style=\"white-space: pre;\">\t</span>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; auto<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</div></div><div>&nbsp;<font color=\"#4169e1\"><b>&nbsp;&nbsp; &nbsp; &nbsp; ======================================================</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>Clip</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 只能用于裁剪 absolute 元素</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 矩形裁剪 rect(*, *, *, *) 左上 右上 右下 左下</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 可以用于扇形的制作</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 注意：vue scoped 不会对 v-html 生效</div><div><br></div><div><font color=\"#ff0000\"><b>动画</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; transform</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 平移：transform: translate(X,Y)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 旋转：transform-origin:x y：旋转基点</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; transform: rotate(30deg)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 放缩：transform: scale(X,Y);//倍数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3D旋转：transform: rotateX/Y(120deg)</div><div><br></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; transition</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.为指定属性(时长)添加过渡效果：transition: width 2s,height 1s...</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.指定属性绑定事件监听：div:hover {width...height...}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; # transition: all 1s + css组合</div><div><br></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; animation</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; - name 1s 时间函数 开始时间 次数();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - ease: 慢快慢 / linear:匀速</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - @keyframes name</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0% {background:red;}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 100% {background:green;}}</div><div><br></div><div><font color=\"#ff0000\"><b>选择器</b></font></div><div><span style=\"white-space: pre;\">\t</span>1.优先级: 行内&gt; #ID选择器 &gt; .类+伪类选择器/属性选择器 &gt; 元素选择器 &gt; *通用 &gt; 继承</div><div><span style=\"white-space: pre;\">\t</span>2.语法:&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 多选择器: A，B，C</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 前/后/后所有：a -+~ b</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 仅仅子：A &gt; a</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.伪类</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :link 未访问&nbsp;:visited 已访问&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :active&nbsp;点击&nbsp;:hover 鼠标放入 :focus 文本框输入时 :selection 文本鼠标选中时候</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ::before/after 文字前/后&amp;标签之间 { content:\"\" }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p:first-child p:nth-child(index):任意位置子元素&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p:first-of-type:第一个p</div><div><br></div><div><font color=\"#ff0000\"><b>预处理器</b></font></div><div>&nbsp; &nbsp; SASS/SCSS</div><div>&nbsp; &nbsp; LESS</div><div><br></div>"
    },
    "KsZgMDRvG": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "KsZgMDRvG",
      "name": "CSS 布局与适配",
      "content": "<div><font color=\"#ff0000\"><b>使用 Position 定位元素（默认 static 不定位）</b></font></div><div>&nbsp; &nbsp; *&nbsp;使用下方定位<font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp;</font>会提升层级</div><div>&nbsp; &nbsp; * 后来的定位元素 或 子元素 会<font color=\"#ff0000\"><b>始终</b></font>覆盖先前的定位元素</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">relative</b>：相对于原位置移动，不会脱离文档流</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">absolute</b>：相对relative移动</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 脱离文档流而产生的高度塌陷 &amp; 相邻|垂直|内外边距重叠</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 可以通过添加块元素解决,清除因浮动产生的移动影响</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .clearfix:before,.clearfix:after</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {content:\"\";display:table;clear:both;}</div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">fixed</b>：相对于可视界面移动,会提升层级<div>&nbsp; &nbsp; <b style=\"color: rgb(255, 0, 0);\">float</b>：会产生挤压</div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>常用的居中方式</b></font></div><div>&nbsp; &nbsp; 1 水平居中</div><div>&nbsp; &nbsp; &nbsp; &nbsp; margin:0 auto&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; (行内)text-align:center</div><div>&nbsp; &nbsp; &nbsp; &nbsp; (弹性盒)display: flex; justify-content: center;</div><div>&nbsp; &nbsp; 2 垂直居中</div><div>&nbsp; &nbsp; &nbsp; &nbsp; (单行内)line-height</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>(多行)display:table-cell; vertical-align: middle;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; (弹性盒)display: flex; align-items: center;</div><div>&nbsp; &nbsp; 3 同时对齐</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ab+re定位：trbl:0; margin:auto;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; top/left：50%; transform(-50%,-50%)/margin-l/r:-50%;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; (弹性盒)display: flex; justify-content: center; align-items: center;</div><div>&nbsp; &nbsp; &nbsp; &nbsp;<font color=\"#4169e1\"><b>&nbsp;(弹性盒)display: flex; margin:auto;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div><font color=\"#ff0000\"><b>弹性盒子</b></font></div><div><span style=\"white-space: pre;\">\t</span>1.容器设置</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flex | inline-flex</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.容器属性</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flex-direction：row | row-reverse | column | column-reverse</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flex-wrap：nowrap | wrap | wrap-reverse</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; flex-flow:&nbsp; &nbsp;row nowrap</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>横轴对齐&nbsp;justify-content:&nbsp;</b></font></div><div><span style=\"white-space: pre;\">\t\t</span>flex-start<font color=\"#4169e1\"><b>(默认)</b></font>&nbsp;/ flex-end / center / space-between /&nbsp;space-around</div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>纵轴对齐&nbsp;align-items:&nbsp;</b></font><div><span style=\"white-space: pre;\">\t\t</span>flex-start / flex-end / center / baseline(<font color=\"#4169e1\"><b>按文字对齐</b></font>) / stretch<font color=\"#4169e1\"><b>(默认：高度占满)</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 多横轴时，纵轴对齐&nbsp;align-content:&nbsp;</b></font></div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; flex-start / flex-end / center / space-between / space-around / stretch<b style=\"color: rgb(65, 105, 225);\">(默认：高度占满)</b></div><div><span style=\"white-space: pre;\">\t\t</span># 子元素 float/clear/vertical-align 会失效</div><div><span style=\"white-space: pre;\">\t</span><font color=\"#4169e1\"><b>3.容器内容设置</b></font></div><div><span style=\"white-space: pre;\">\t\t</span>1. order: 值越小越靠前/默认 0</div><div><span style=\"white-space: pre;\">\t\t</span>2. flex: (占比) none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]</div><div><span style=\"white-space: pre;\">\t\t</span>3. align-self: 单独设置 align-items 个性的对齐</div><div>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp; &nbsp; 4. margin-?:auto 会获取剩余所有空白</div><div><br></div><div><b><font color=\"#ff0000\">移动端适配方案</font></b></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; </font><font color=\"#4169e1\" style=\"\"><b>前提</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.主要通过媒体查询&nbsp;<font color=\"#4169e1\"><b>@media</b></font>&nbsp;为不同设备设计不同样式<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.通常需要用 &lt;head&gt;&lt;meta&gt; 标签 定义页面宽度为设备宽度</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>&lt;meta name='viewport' content= ''&gt;</b></font></div><div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width=device-width ：表示宽度是设备屏幕的宽度</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; initial-scale=1.0：表示初始的缩放比例</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; minimum-scale=1.0：表示最小的缩放比例</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; maximum-scale=1.0：表示最大的缩放比例</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; user-scalable=no：表示用户是否可以调整缩放比例</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.像素设备比 DPR（DevicePixelRatio）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 表示1个css像素对应（覆盖）的物理像素个数，DPR=2，1px=4像素</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>宽度单位设置</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font>1.百分比：宽高一般使用百分比，而字体另外设计</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.px（pixel）基于 DevicePixelRatio 即屏幕物理像素个数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.em 基于父元素字体大小，由于继承性可能会导致意外</div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font><font color=\"#ff0000\"><b>4.rem&nbsp;</b></font>基于HTML根元素字体大小：详见本项目 ui 文件夹</div><div><span style=\"white-space: pre;\">\t</span><font color=\"#ff0000\" style=\"font-weight: bold;\">5.vw/vh </font><font style=\"\">基于可</font>视窗口 1vw = 1%视窗宽度</div><div><br></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; </font><b>单位详解</b></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font><b>详解rem布局-利用rem布局实现移动端高清显示</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; https://blog.csdn.net/u014607184/article/details/79516528</div>"
    },
    "4IfeAFQw6": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "bookId": "4IfeAFQw6",
      "name": ".vscode",
      "content": "<div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*****************&nbsp;必备&nbsp;*****************</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;自动格式化</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"files.autoSave\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"onFocusChange\"</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"editor.formatOnSave\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;Tab缩进为4个空格</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.tabWidth\"</span>:&nbsp;<span style=\"color: #b5cea8;\">4</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;统一使用单引号</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.singleQuote\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*****************&nbsp;其他&nbsp;*****************</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;是否自动添加分号</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.semi\"</span>:&nbsp;<span style=\"color: #569cd6;\">false</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;{&nbsp;/&nbsp;}两侧必须有空格</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.bracketSpacing\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;单参数箭头函数&nbsp;总是带()</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.arrowParens\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"always\"</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;vue&nbsp;模板/样式的缩进</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.vueIndentScriptAndStyle\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;不明</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"workbench.startupEditor\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"newUntitledFile\"</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"code-runner.runInTerminal\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"prettier.printWidth\"</span>:&nbsp;<span style=\"color: #b5cea8;\">160</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"window.zoomLevel\"</span>:&nbsp;<span style=\"color: #b5cea8;\">0</span></div><div>}</div><br></div>"
    },
    "tDck3LDAT": {
      "blockId": "DCgJdlX5R",
      "shelfId": "8ehQoNmob",
      "bookId": "tDck3LDAT",
      "name": "@Vue",
      "content": "<div><div><font color=\"#ff0000\"><b>介绍</b></font></div><div>&nbsp; &nbsp; 是一个允许采用简洁的<font color=\"#4169e1\"><b>模板语法</b></font>来声明式地MVVM系统<br></div><div>&nbsp; &nbsp; - 引入Vue包&nbsp;</div><div>&nbsp; &nbsp; - 编写HTML+String模板</div><div>&nbsp; &nbsp; - 创建/挂载<font color=\"#ff0000\"><b>Vue实例</b></font>到对应的DOM</div><div>&nbsp; &nbsp; - 根实例执行 render(c) { return c(...) } 创建虚拟DOM</div><div>&nbsp; &nbsp; - 使用指令系统：v-bind / v-on / v-for / v-model (<font color=\"#4169e1\"><b>双向绑定</b></font>)</div><div><br></div><div><font color=\"#ff0000\"><b>实例的组件系统</b></font></div><div>&nbsp; &nbsp; - 本质也是一个Vue实例 Vue.component(name, template:\"HTML+String模板 \")</div><div><br></div><div><font color=\"#ff0000\"><b>实例的生命周期</b></font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font><font color=\"#4169e1\"><b>创建Vue实例</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>初始化事件/生命周期函数</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>beforeCreate</b></font></div><div>&nbsp; &nbsp; 数据注入Vue实例</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>created&nbsp;</b></font></div><div>&nbsp; &nbsp; 根据 el / template 选项编译对应模板</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>beforeMount</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font>将 DOM 和实例进行绑定/挂载：使得实例-DOM互相影响</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>mounted</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>beforeUpdate</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>虚拟DOM重新渲染</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>updated</b></div><div><b>&nbsp; &nbsp;&nbsp;</b>vm.$destory调用</div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>beforeDestroy</b></font><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font>解除绑定 - 销毁子组件/事件监听<br><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>destroyed</b></font></div></div><div><font color=\"#4169e1\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>Vue路由</b></font></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>原理</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>- 浏览器中的URL 及其&nbsp;<b># 符号</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 符号本身以及它后面的字符称之为hash，可通过window.location.hash属性读取</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;不会被包括在HTTP请求中，它是用来指导浏览器动作 / 可以被监听 / 会被历史记录</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 理想的单页应用</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 仅在进入应用时加载index.html，后续在的网络操作通过Ajax完成，不会根据URL重新请求页面</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>使用</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>- 创建Vue组件（实例+HTML模板）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 定义路由名称及对应组件｛ path:\"/\", component: Index ｝</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 创建路由实例 挂载到根Vue实例上</div></div><div><br></div><font color=\"#ff0000\"><b>Vue CLI</b></font>&nbsp;<div>&nbsp; &nbsp; * 是一个基于 Vue.js 进行快速开发的完整系统<div><br><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>@vue/cli</b></font>&nbsp;是一个全局安装的 npm 包</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 可用于创建一个新项目的脚手架</div><div><br></div></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>@vue/cli-serve</b></font>&nbsp;是@vue/cli的开发依赖</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 构建于 webpack 和 webpack-dev-server 之上，提供构建服务</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 会加载根目录的 vue-config.js 配置相关服务</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>@vue/cli-plugin-****&nbsp;</b></font>是@vue/cli的社区插件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 构建于 webpack 和 webpack-dev-server 之上，提供第三方服务</div><div><br></div><div><font color=\"#ff0000\"><b>vue-config.JS</b></font></div><div>&nbsp; &nbsp; * 使用 webpack 的开发服务器处理跨域，其只会拦截&nbsp;window.location.origin 下的请求</div><div>&nbsp; &nbsp; * 未带域名的HTTP请求会被添加 window.location.origin</div><div><div>&nbsp; &nbsp; devServer: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; proxy: {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; '/mine': {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; target: 'http://target',</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; changOrigin: true,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pathRewrite: { '^/mine': '', },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div></div></div>"
    },
    "uuKM1wRS_": {
      "blockId": "YxnegsTMH",
      "shelfId": "w9SAKBPW2",
      "bookId": "uuKM1wRS_",
      "name": "Fauci 0527",
      "content": "<font color=\"#ff0000\"><b>Anthony Fauci &amp;&amp; National Geographic</b></font><div><font color=\"#ff0000\"><b><br></b></font><div>&nbsp; &nbsp; <b>Anthony Fauci</b> has become the scientific face of <b>America's </b><font color=\"#ff0000\"><b>COVID-19</b></font><font color=\"#ff0000\" style=\"\"> </font><b>response(应对)</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; </b>and he says the best evidence shows the virus <b>behind the pandemic(大流行)</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; was not made in a lab in China.</div><div><br></div><div>&nbsp; &nbsp; Fauci, the director of the US National <b>Institute(研究所)</b>&nbsp;of <b>Allergy(过敏)</b>&nbsp;and <b>Infectious Diseases(传染病)</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; shot down </b>the discussion that has been <b>raging(愤怒)</b>&nbsp;among politicians and <b>pundits(权威专家)</b>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; calling it \"a circular argument\"&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; in a conversation Monday with National <b>Geographic</b>.</div><div><br></div><div>&nbsp; &nbsp; \"If you look at the evolution of the virus in bats and what's out there now,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; [the scientific evidence] is very, very strongly learning&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; toward <b>this could not have been artificially(人为) or deliberately(故意) manipulated(操纵)</b>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b><b style=\"color: rgb(255, 0, 0);\">****</b></div><div>&nbsp; &nbsp; Everything about <b>the stepwise(逐步) evolution</b> <b>over time(随时间推移)</b>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; strongly <b>indicates(表明)&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; that this virus <b>evolved(发展)</b>&nbsp;in nature and then jumped species.\", Fauci says.</div><div>&nbsp; &nbsp; Based on the scientific evidence , he dosen't <b>entertain(支持)</b>&nbsp;an <b>alternate(备用的)</b> theory</div><div>&nbsp; &nbsp; &nbsp; &nbsp; that someone found the <font color=\"#ff0000\"><b>coronavirus </b></font>in the wild,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; brought it to a lab, and then it accidentally escaped.</div><div><br></div><div>&nbsp; &nbsp; Fauci is most concerned that the United States will be put to the test this fall and winter</div><div>&nbsp; &nbsp; &nbsp; &nbsp; by a second wave of COVID-19&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if the country does not <b>blunt(钝挫) the infection rate</b> by the summer.</div><div><br></div><div>&nbsp; &nbsp; \"Shame on us if we do not have enough tests <b>by the time(及时)</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>this so-called return</b> might occur in the fall and winter,\" he says,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; advising that the US needs to make sure we&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; not only have an <b>adequate(充足) supply </b>of tests <b>available(可用的)</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </b>but also a system for getting those tests to the people who most need them.</div><div>&nbsp; &nbsp; \"I do not think <b>there is a chance </b>that this virus is just going to disappear,\" he says.<br></div><div>&nbsp; &nbsp; \"It is going to be around, and if given the opportunity, it will <b>resurge(复活)</b>.\"</div><div>&nbsp; &nbsp; As such, <b>Fauci </b>says ths US should&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; focus this summer on properly <b>reinforcing(强化) the nation's health care</b><b>(医护)</b>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ensuring the <b>availability </b>of hospital beds,&nbsp;<b>ventilators(呼吸机)&nbsp;</b>and&nbsp; personal protective equipment</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for <b>health care workers(医护人员)</b>.</div><div><br></div><div>&nbsp; &nbsp; He also stressed the importance of continuing to social distance everywhere&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; until the case counts start to fall in cities and states.</div><div>&nbsp; &nbsp; The US witnessed about 20,000 to 30,000 new cases everyday in the month of Apirl,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>suggesting(暗示)&nbsp;</b>the country is <b>stuck(粘/卡)</b> in its peak.</div><div><br></div><div>&nbsp; &nbsp; Still, he remains optimistic that the <b>vaccine(疫苗)&nbsp;</b>will be ready within <b>an historically short time frame</b>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>citing(引用)&nbsp;</b>one promising <b>candidate(候选人)&nbsp;</b>that he thinks may move into advanced&nbsp;<b>clinical(临床) trials(审讯/考验)&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; by the early summer.</div><div>&nbsp; &nbsp; Fauci has said that he thinks the final vaccine could be available for general use as early as January,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; which would break records for the speed at <b>which previous vaccines</b> were developed.</div><div><br></div><div>&nbsp; &nbsp; One reason for his confidence is the \"impressive\" results&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; being seen now in animals</div><div>&nbsp; &nbsp; &nbsp; &nbsp; tested with a vaccine cadidate made by <b>Cambridge(剑桥)</b>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;Massachusetts-based <b>Moderna Therapeutics</b>,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; which brought it into human trials in record 42 days.</div><div>&nbsp; &nbsp; The candidate is what is known as an mRNA vaccine&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; —— a drug that uses <b>snippets(片段)&nbsp;</b>of vrius's genetic <b>materrial</b>,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; —— rather than the dead or <b>weaken</b>ed vrius itself</div><div>&nbsp; &nbsp; &nbsp; &nbsp; —— to build the <b>porteins </b>that <b>trigger(触发)&nbsp;</b>the body's protective <b>immune(免疫)&nbsp;</b>response.</div><div><br></div><div>&nbsp; &nbsp; <b>To date</b>, no type of mRNA vaccine has been <b>licensed </b>for use in human,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; but Fauci believes there is great promise for this technology</div><div>&nbsp; &nbsp; &nbsp; &nbsp; targeting the coronavrius,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; based in his experience developing treatments for HIV/AIDS in 1980's and 90's.</div><div><br></div><div>&nbsp; &nbsp; \"For some reason that we are still <b>struggling(挣扎奋斗)&nbsp;</b>with,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; the body does not make an adequate immune response,\" he says.</div><div>&nbsp; &nbsp; To <b>fight off</b> that vrius, the vaccine has to work better than the body's own natural response.</div><div>&nbsp; &nbsp; By <b>contrast(对比)</b>, \"It's obvious that many people make a very adquate immune response\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; to the SARS-CoV-2 vrius,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; and the animal trials so far show that <b>modest(谦虚)&nbsp;</b>doses of the mRNA vaccine&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for coronavrius have also generated a strong immune response.</div><div>&nbsp; &nbsp;&nbsp;</div></div><div>&nbsp; &nbsp; He adds that National&nbsp;<b>Institute(研究所)</b>&nbsp;of&nbsp;<b>Allergy(过敏)</b>&nbsp;and&nbsp;<b>Infectious Diseases(传染病)</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; </b>is still developing and supporting vaccine efforts,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; in case those that go into trials soonest</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; do not <b>ultimately(最终) </b>prove save and effective.</div><div>&nbsp; &nbsp; \"<b>You want a lot of shots on goal</b>. We want four or five cadidates that we put out there</div><div>&nbsp; &nbsp; &nbsp; &nbsp; all within a reasonable time,\" he says.</div><div><br></div><div>&nbsp; &nbsp; Fauci told National Geographic he is concerned about states rushing to reopen</div><div>&nbsp; &nbsp; &nbsp; &nbsp; before their infection rates fall.</div><div>&nbsp; &nbsp; He also shared how he manages <b>the barrage(喷涌且阻塞) of new scientific information</b>&nbsp;being <b>released(发布)</b>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; about COVID-19,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; and how his family and faith keep him going</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>despite(尽管)&nbsp;</b>his increasingly <b>hectic(活动繁忙) schedule</b>.</div>"
    },
    "WQJvQNaVo": {
      "blockId": "YxnegsTMH",
      "shelfId": "MMuN17Zro",
      "bookId": "WQJvQNaVo",
      "name": "时间安排",
      "content": "<p><font color=\"#ff0000\"><b>CS课程参考</b></font></p><p>&nbsp; &nbsp; #1 高级程序设计 计算机专业导论 高等数学</p><div>&nbsp; &nbsp; #2&nbsp;<b style=\"color: rgb(255, 0, 0);\">数据结构&nbsp;</b><b style=\"color: rgb(255, 0, 0);\">计算机组成原理&nbsp;</b>算法设计与分析 离散数学 概率论与数理统计</div><div>&nbsp; &nbsp; #3 软件工程&nbsp;<b style=\"color: rgb(255, 0, 0);\">编译原理&nbsp;</b><b style=\"color: rgb(255, 0, 0);\">操作系统</b><b style=\"color: rgb(255, 0, 0);\">&nbsp;计算机网络&nbsp;</b><b style=\"color: rgb(255, 0, 0);\">数据库系统原理&nbsp;</b>线性代数 软件测试</div><div>&nbsp; &nbsp; #4 计算机系统结构 软件安全&nbsp;</div><p><br></p><p><font color=\"#ff0000\"><b>时间安排</b></font></p><p>&nbsp; &nbsp; 网上咨询：9月22日—26日（每天9：00-17：00）</p><p>&nbsp; &nbsp; 预报名：9月25日—9月28日（每天9：00-22：00）</p><p>&nbsp; &nbsp; 正式报名：10月10日—31日（每天9：00-22：00）</p><p>&nbsp; &nbsp; 现场确认：11月10日至11月14日</p><p>&nbsp; &nbsp; 考试时间：12月23日-24日</p><p>&nbsp; &nbsp; 考研分数（总分500分）</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 政治：100分 数学：150分 英语：100分 专业课：150分</p>"
    },
    "61_KQNS6w": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "61_KQNS6w",
      "name": "1.马克思主义基本原理概论",
      "content": "123阿斯达"
    },
    "NPyJWhGVT": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "NPyJWhGVT",
      "name": "2.毛泽东思想和中国特色社会主义理论体系概论",
      "content": ""
    },
    "VBA2ImZs_": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "VBA2ImZs_",
      "name": "3.中国近现代史纲要",
      "content": ""
    },
    "yWsIhGnKA": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "yWsIhGnKA",
      "name": "4.思想道德修养与法律基础",
      "content": ""
    },
    "gf6jf1nnx": {
      "blockId": "YxnegsTMH",
      "shelfId": "q6_9Db-FR",
      "bookId": "gf6jf1nnx",
      "name": "5.形势与政策以及当代世界经济与政治",
      "content": ""
    },
    "Z67MOJxx9": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "Z67MOJxx9",
      "name": "基础",
      "content": "<div><font color=\"#ff0000\"><b>概念</b></font></div><div>&nbsp; &nbsp; 数据结构是带有结构特性的数据元素的集合<div>&nbsp; &nbsp; 它研究的是数据的<font color=\"#4169e1\"><b>逻辑结构</b></font>和数据的<font color=\"#4169e1\"><b>物理存储结构</b></font>以及它们之间的相互关系</div><div>&nbsp; &nbsp; 并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。</div></div><div><br></div><div><font color=\"#ff0000\"><b>分类</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>逻辑结构</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 集合：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 线性结构：数据结构中的元素存在一对一的相互关系</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 树形结构：数据结构中的元素存在一对多的相互关系</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 图形结构：数据结构中的元素存在多对多的相互关系</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>物理存储结构</b></font>（是数据结构在计算机中的表示（又称映像））</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;具体实现的方法有顺序、链接、索引、散列等多种</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 一种数据结构可表示成一种或多种存储结构</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>举例</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 线性表 栈 队列 串 数组 广义表</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 二叉树 图</div>"
    },
    "EjKeEugPO": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "EjKeEugPO",
      "name": "基础概念",
      "content": "<div><font color=\"#ff0000\"><b>历史渊源</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>百度百科</b></font></div><div>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;微积分（Calculus），数学概念，是高等数学中研究函数的微分(Differentiation)、积分(Integration)以及有关概念和应用的数学分支。</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; ：它是数学的一个基础学科，内容主要包括极限、微分学、积分学及其应用。</div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ：微分学，包括求导数的运算，是一套<font color=\"#4169e1\"><b>关于变化率的理论</b></font>。它使得函数、速度、加速度和曲线的斜率等均可用一套通用的符号进行讨论。</div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; ：积分学，包括求积分的运算，为定义和<font color=\"#4169e1\"><b>计算面积、体积</b></font>等提供一套通用的方法。</div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>发展过程</b></font></div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 十七世纪以来，微积分的概念和技巧不断扩展并被广泛应用来解决天文学、物理学中的各种实际问题，取得了巨大的成就。</div><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大约有四种主要类型的问题：</div><div>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;第一类是<font color=\"#4169e1\"><b>研究运动</b></font>的时候直接出现的，也就是求即时速度的问题。如天文、航海问题</div><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; *&nbsp;第二类问题是求<font color=\"#4169e1\"><b>曲线的切线</b></font>的问题。</div><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; *&nbsp;第三类问题是求<font color=\"#4169e1\"><b>函数的最大值和最小值</b></font>问题。</div><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; *&nbsp;第四类问题是求曲线长、曲线围成的<font color=\"#4169e1\"><b>面积</b></font>、曲面围成的<font color=\"#4169e1\"><b>体积</b></font>、物体的<font color=\"#4169e1\"><b>重心</b></font>、一个体积相当大的物体作用于另一物体上的<font color=\"#4169e1\"><b>引力</b></font>。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 但直到十九世纪以前，在微积分的发展过程中，其数学分析的严密性问题一直没有得到解决。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;十八世纪中，包括<font color=\"#4169e1\"><b>牛顿和莱布尼兹</b></font>在内的许多大数学家都觉察到这一问题并对这个问题作了努力，但都没有成功地解决这个问题。</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;整个十八世纪，微积分的基础是混乱和不清楚的，许多英国数学家也许是由于仍然为古希腊的几何所束缚，因而怀疑微积分的全部工作。</div><div>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个问题一直到十九世纪下半叶才由法国数学家<font color=\"#4169e1\"><b>柯西</b></font>得到了完整的解决，柯西极限存在准则使得微积分注入了严密性，这就是极限理论的创立。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;极限理论的创立使得微积分从此建立在一个严密的分析基础之上，它也为20世纪数学的发展奠定了基础。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在中世纪（14—17世纪）欧洲数学大发展的时期，我国基本处于停滞状态（明、清时期）。所以，我国的数学家与微积分无缘。</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一门学科的创立并不是某一个人的业绩，而是经过多少人的努力后，在积累了大量成果的基础上，最后由某个人或几个人总结完成的，微积分也是这样。</div><div style=\"\"><font style=\"\"><br></font></div><font color=\"#ff0000\"><b>红宝书&nbsp;</b> &nbsp;</font>&nbsp;<div>&nbsp; &nbsp; 导数与极限 / 一元函数微分&nbsp;/ 一元函数积分<div>&nbsp; &nbsp; 向量代数与空间解析几何</div><div>&nbsp; &nbsp; 多元函数微分 / 多元函数积分</div><div>&nbsp; &nbsp; 无穷级数 / 微分方程</div><div><br></div></div><div><font color=\"#ff0000\"><b>普林斯顿微积分读本</b></font></div><div>&nbsp; &nbsp; 函数与图像&nbsp;/&nbsp;三角学</div><div>&nbsp; &nbsp; 极限导论&nbsp;/&nbsp;求解多项式的极限&nbsp;/&nbsp;&nbsp;连续和可导</div><div>&nbsp; &nbsp; 微分问题&nbsp;/&nbsp;三角函数的极限和导数&nbsp;/ 隐函数求导 / 指数函数/对数函数 / 反函数/三角函数</div><div>&nbsp; &nbsp; 导数和图像 / 绘制函数图像 / 最优化和线性化</div><div>&nbsp; &nbsp; 罗必塔法则 / 积分 / 定积分</div><div>&nbsp; &nbsp; 微积分基本定理 / 积分的方法1 / 积分的方法2</div><div>&nbsp; &nbsp; 反常积分概念 / 反常积分解题</div><div>&nbsp; &nbsp; 级数 / 泰勒多项式/级数、幂级数 / 估算问题</div><div>&nbsp; &nbsp; 泰勒级数和幂级数结题</div><div>&nbsp; &nbsp; 参数方程和极坐标</div><div>&nbsp; &nbsp; 复数 / 体积/弧长/表面积 / 微分方程</div>"
    },
    "4W4S9h18X": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "4W4S9h18X",
      "name": "基础概念",
      "content": "<font color=\"#ff0000\"><b>基础概念</b></font><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 百度百科</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;线性代数是数学的一个分支，它的研究对象是<font color=\"#ff0000\"><b>向量，向量空间</b></font>（或称线性空间），<font color=\"#ff0000\"><b>线性变换</b></font>和<font color=\"#ff0000\"><b>有限维的线性方程组</b></font>。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 主要处理线性关系问题。线性关系意即数学对象之间的关系是以一次形式来表达的。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;在解析几何里，平面上直线的方程是二元一次方程；</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;空间平面的方程是三元一次方程，而空间直线视为两个平面相交，由两个三元一次方程所组成的方程组来表示。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 含有<i>n</i>个未知量的一次方程称为<font color=\"#4169e1\"><b>线性方程</b></font>。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 关于变量是一次的函数称为<font color=\"#4169e1\"><b>线性函数</b></font>。线性关系问题简称线性问题。解线性方程组的问题是最简单的线性问题。</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 历史发展</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;线性代数作为一个独立的分支在20世纪才形成，然而它的历史九章算术却非常久远。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 鸡兔同笼”问题实际上就是一个简单的线性方程组求解的问题。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;由于费马和笛卡儿的工作，现代意义的线性代数基本上出现于十七世纪。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 直到十八世纪末，线性代数的领域还只限于平面与空间。十九世纪上半叶才完成了到n维线性空间的过渡。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;随着研究线性方程组和变量的线性变换问题的深入，<font color=\"#ff0000\"><b>行列式和矩阵</b></font>在18～19世纪期间先后产生，为处理线性问题提供了有力的工具</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;向量概念的引入，形成了<font color=\"#ff0000\"><b>向量空间</b></font>的概念。凡是线性问题都可以用向量空间的观点加以讨论。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;因此，向量空间及其线性变换，以及与此相联系的矩阵理论，构成了线性代数的中心内容。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;如果进入科研领域，你就会发现，<font color=\"#4169e1\"><b>只要不是线性的东西，我们基本都不会！</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;线性是人类少数可以研究得非常透彻的数学基础性框架。学好线性代数，你就掌握了绝大多数可解问题的钥匙。</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;而有时候我们研究的问题太复杂，需要输入很多个数，经过运算之后，产出很多个数。这时候，线性代数应运而生。</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 目标</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 解线性方程组</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 线性代数的一个主要思想，就是研究&nbsp;某一&nbsp;<b>固定向量几何 {v1, v2, ... vn}</b> 的线性组合能表示&nbsp;<b>哪些向量</b></div><div><br></div>"
    },
    "RQtqZE9En": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "RQtqZE9En",
      "name": "线性方程组",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">**************************************</b><b style=\"color: rgb(255, 0, 0);\">**************************************</b><font color=\"#ff0000\"><b><br></b></font></div><font color=\"#ff0000\"><b>线性方程</b></font><div>&nbsp; &nbsp; 概念：指包含单一未知数的方程 a1x1 + a2x2 ... + anxn = C</div><div>&nbsp; &nbsp; 注意：未知量只能为 xn，不包含 x1x2, x^(1/2) 等</div><div><br></div><div><font color=\"#ff0000\"><b>线性方程组</b></font></div><div>&nbsp; &nbsp; 概念：N个相同未知数的线性方程的组合</div><div>&nbsp; &nbsp; 特征：含有1个解，有唯一解，有无穷多解，有解即<font color=\"#4169e1\"><b>相容</b></font></div><div>&nbsp; &nbsp; * 一个线性方程组的主要信息可以用 <font color=\"#4169e1\"><b>系数矩阵 增广矩阵(含右侧解的系数)</b></font>&nbsp;来表示</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>*（行）初等变换算法</b></font></div><div>&nbsp; &nbsp; ：倍加变换，即把某一行换成它本身和另外一行的倍数的和</div><div>&nbsp; &nbsp; ：对换变换，把两行对换</div><div>&nbsp; &nbsp; ：倍乘变化，把某一行的所有元素乘以同一个非零数</div><div>&nbsp; &nbsp; * （行）初等变换是可逆的</div><div>&nbsp; &nbsp; * 若两个矩阵可以通过（行）初等变换为另外一个矩阵，则这两个矩阵是<font color=\"#4169e1\"><b>行等价</b></font>的，且<font color=\"#4169e1\"><b>拥有相同解集</b></font>&nbsp;</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * 阶梯型矩阵</b></font></div>&nbsp; &nbsp; ：每行的先导元素不同列<div>&nbsp; &nbsp; ：通过初等变换化简后的矩阵，先导元素所在列的下方元素都是零</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; *&nbsp;</b></font><b style=\"color: rgb(65, 105, 225);\">简</b><b style=\"color: rgb(65, 105, 225);\">化阶梯型矩阵 RREF</b></div><div>&nbsp; &nbsp; ：每行的先导元素是1</div><div>&nbsp; &nbsp; ：先导元素是所在列的唯一非零元素，但行内可能还有其他非零元素</div><div>&nbsp; &nbsp; * 单位矩阵</div><div>&nbsp; &nbsp; ：自左上到右下的元素为1，其余元素为0</div><div><br></div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>定理一</b></font>：每个矩阵的 REF 唯一<div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>定理二</b></font>：<font color=\"#ff0000\"><b>线性方程组的REF没有自由变量，则有唯一解；含有自由变量，则有无穷多解；&nbsp;</b></font><div>&nbsp; &nbsp; *&nbsp;由此，<font color=\"#ff0000\"><b>解线性方程组</b></font>&nbsp;=&nbsp;<b>化简增广矩阵</b>，的逻辑链条搭建完毕</div><div><br><div><font color=\"#ff0000\"><b>解线性方程组</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>主要步骤</b></font></div><div>&nbsp; &nbsp; ：写出方程组的增广矩阵</div><div>&nbsp; &nbsp; ：通过行化简算法，将矩阵变为阶梯型矩阵（此时若无解则可以停止）</div><div>&nbsp; &nbsp; ：继续使用行化简算法求得REF简化阶梯矩阵</div><div>&nbsp; &nbsp; ：写出REF对应的方程组</div><div>&nbsp; &nbsp; ：根据自由变量和基本变量的关系求方程组唯一解或者<font color=\"#4169e1\"><b>通解</b></font></div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>REF简化阶梯矩阵</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1 0 -5 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 0 1 1 4</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 0 0 0 0</div><div>&nbsp; &nbsp; 根据如上REF可得<font color=\"#4169e1\"><b>通解</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; x1 = 1 + x3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; x2 = 4 - x3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; x3 是自由变量<br></div><div>&nbsp; &nbsp; <font color=\"#ff0000\"><b>x3 是自由变量</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; x1 x2 称之为基本变量，x3 称之为自由变量</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 不同的 x3 确定了唯一对应的 x1 x2</div><div><b style=\"color: rgb(255, 0, 0);\">**************************************</b><b style=\"color: rgb(255, 0, 0);\">**************************************</b><br></div><div><font color=\"#ff0000\"><b>向量方程</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>基础概念</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 通常向量这个词出现在各种数学和物理教科书中，线性方程组的重要性质都可以用向量概念与符号来描述</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 仅含一列的矩阵称之为列向量，俗称向量，用文字表示为 (a, b)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 向量加法：(1, 2) + (1, 3) = (2, 5)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 向量乘法：5 *(1, 2) = (5, 10)&nbsp;&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>和线性方程组的关系</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>1 向量方程&nbsp;</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x1</b>(1, -2, -5) +&nbsp;<b>x2</b>(2, 5, 6) = (7, 4, -3)&nbsp;</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp; </b><b>2 向量方程组</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 有向量组 v1 v2 ... vn ，也称之为矩阵V</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 有向量的权&nbsp;<b>c1 c2 ... cn (R)</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 有向量的线性组合 y = c1v1 + c2v2 .... + cnvn ，也称之为 cn *V</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>3 和线性方程组结合</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp;<b>x1</b>&nbsp;+ 2<b>x2</b>&nbsp;= 7</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -2<b>x1</b>&nbsp;+ 5<b>x2</b>&nbsp;= 4</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -5<b>x1</b>&nbsp;+ 6<b>x2</b>&nbsp;= -3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 可以将线性方程组通过<font color=\"#ff0000\"><b>解线性方程组</b></font>的方式求解，得 x1=3, x2=2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 这个过程也表示 这两个向量 可以通过与 权 x1=3, x2=2 的线性组合得出目标向量&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">线性代数的一个主要思想，就是研究</b></div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>1.特定权</b><b>&nbsp;</b>通过&nbsp;<b>与</b><b>固定向量组</b>&nbsp;产生的&nbsp;<b>的线性组合</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 在<b>固定向量组</b>&nbsp;{v1, v2 ... vn} 中，某些权通过线性组合得到的所有向量为&nbsp;<font color=\"#ff0000\"><b>Span {v1, v2 ... vn}&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 要判断某 向量b 是否属于 Span {v1, v2 ... vn}&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 就是判断向量方程&nbsp;&nbsp;{v1, v2 ... vn}<b>&nbsp;*</b>&nbsp;<b>x</b>&nbsp;= 向量b ，其中是否存在&nbsp;<b>x&nbsp;</b>的解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 就是判断该&nbsp;<b>固定向量组&nbsp;</b>通过&nbsp;<font color=\"#ff0000\"><b>哪些特定权&nbsp;</b></font>形成产生线性变化，得到b</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 就是判断增广矩阵 [v1, v2, ... vn, b] 是否有解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 向量方程求解，等价于增广矩阵求解，即=线性方程组</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>2.把向量的线性组合，看做矩阵和向量的积</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 此时将固定向量组看做矩阵，<font color=\"#ff0000\"><b>特定权组看做另外一个向量</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>特定权组合的列数，要等于固定向量组矩阵的行数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 这样我们就得到了一个<font color=\"#ff0000\"><b>矩阵方程：Cn *{v1, v2 ... vn} = {c1,c2...cn } *A</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 矩阵方程求解，等价于向量方程求解，即=增广矩阵=线性方程组</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 矩阵方程满足&nbsp; <b>1.</b>A(u+v) = Au+Av&nbsp;<b> 2.</b>A(cu) = c *Au</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 线性方程组是否有解？</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>1.在解线性方程组中：</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.1 REF若没有自由变量，则方程组有唯一解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.2 REF若含有自由变量，则方程组含有无穷多解，没有唯一解</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;* 对于Ax=b，若最终的REF中关于b的代数式为0</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;则 Ab 含有自由变量， Span {Ax} 可能含有无穷多解，但是方程组没有唯一解</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp;<b>&nbsp;2.通过矩阵研究方程组的解</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>2.1 单一线性方程的解集</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b>10x1 -3x2 -2x3 = 0&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这个方程组的目标权组是 0，则这是一个<font color=\"#ff0000\"><b>齐次线性方程组</b></font><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 有矩阵 [10, -3, -2] *(x1, x2, x3) = (0, 0, 0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 得REF</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0.3x2+0.2x3 0&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x3&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这个REF有两个自由变量 x2 x3 方程组有无穷多解<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 拆分得 (0.3x2, x2, 0) + (0.2x3, 0, x3)&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 即有 (0.3, 1, 0)*x2 + (0.2, 0, 1)*x3 即两个向量在 x2 x3 的组合下含有无穷多解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可以表示为 Span {u, v} 即一个平面！</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>2.2</b>&nbsp;<b>再研究一个齐次</b><b>方程组</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3 5 -4 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -3 -2 4 0<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6 1 -8 0<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 得REF&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x1 0&nbsp; &nbsp;(-4/3)x3 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp;x2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 0<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 0&nbsp;<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这个REF有一个个自由变量 x3 方程组有无穷多解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 拆分得 (4/3x3, 0, 1x3)&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 即有 x3(4/3, 0, 1)&nbsp;&nbsp;即这个向量在 x3 的组合下含有无穷多解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可以表示为 Span {u} 即一条直线！</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>2.3&nbsp;研究</b><b>非齐次方程组的解集 Ax=b</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3&nbsp; &nbsp; 5 -4&nbsp; 7</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -3 -2&nbsp; 4 -1<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 6&nbsp; &nbsp; 1 -8 -4<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 得REFF&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x1 0&nbsp; &nbsp;(-4/3)x3 -1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp;x2&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 2<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp;0&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 0 0&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 这个REF有一个个自由变量 x3 方程组有无穷多解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 拆分得&nbsp;&nbsp;<font color=\"#4169e1\"><b>(-1, 2, 0)</b></font>&nbsp;+&nbsp;<font color=\"#ff0000\"><b>x3&nbsp;*(4/3, 0, 1)</b></font>&nbsp;即 x = p +tv，x为0时 p 是<font color=\"#ff0000\"><b>特解</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 即矩阵A在 x3 的组合下含有无穷多解</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 解集的几何意义可以表示为直线&nbsp;<b style=\"color: rgb(255, 0, 0);\">x3 *</b><b style=\"color: rgb(255, 0, 0);\">(4/3, 0, 1)</b>&nbsp;通过向&nbsp;<font color=\"#4169e1\"><b>(-1, 2, 0)</b></font>&nbsp;平移</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 依然是一条直线！</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 同时也证明了 Ax=b 的解集，可以通过 Ax=0 和某个向量 p 相加而得出<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b>定理三：若Ax=b和某个b相容，p是其中一个特解，则Ax=b是w=p+( Ax=0 )的解集</b></font>&nbsp;</div><div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>向量的几何表示</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;<b> 1.&nbsp;单个向量的表示</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 向量 (1, 2)表示在平面的直角坐标系上，由原点 (0, 0) 指向 (1, 2) 的有向带箭头线段</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 向量加法：想象向量代表了一个矩形，其加法表示在原向量上再次进行移动：平行四边形法则</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 向量乘法：同理向量加法</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 多个向量形成了矩阵</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 一般很难想象三维以上，如四维的几何空间</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>2.权组的表示&nbsp;Span {v1, v2 ... vn}&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Span{ v1 }：表示任意权 *v1 产生的线性组合，构成了直线&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Span{ v1, v2 }：表示 x*{v1 v2} 产生的线性组合，构成了一个平面</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Span{ v1, v2, v3 }：表示 x*{v1 v2 v3} 产生的线性组合，构成了一个立体空间</div><div>&nbsp; &nbsp; &nbsp; &nbsp;<b> 3.平移的表示</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p + xv 可以看作直线 xv 向 固定p 方向移动，构成了一条和 xv 相平行的几何体</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">**************************************&nbsp;</b><font color=\"#ff0000\"><b>例题 **************************************</b></font></div><div>&nbsp; &nbsp; <b>* 解线性方程组</b></div><div>&nbsp; &nbsp; 1 -2 1 0 A</div><div>&nbsp; &nbsp; 0 1 -4 4 B</div><div>&nbsp; &nbsp; 0 0&nbsp; 1 3 C</div><div>&nbsp; &nbsp; ：发现x3由C唯一确定，x2由x3唯一确定，x1同理</div><div><br></div><div><b>&nbsp; &nbsp; * 解线性方程组</b></div><div>&nbsp; &nbsp; 0 1 -4 8 A</div><div>&nbsp; &nbsp; 2 -3 2 1 B</div><div>&nbsp; &nbsp; 5 -8&nbsp;7 1 C</div><div>&nbsp; &nbsp; ：使得 C = C + B*(-5/2)&nbsp;</div><div>&nbsp; &nbsp; ：使得 C = C + A*(1/2)</div><div>&nbsp; &nbsp; ：终有 0 0 0 = 5/2 等式不成立，即方程组误无解</div></div></div><div><br></div><div><b>&nbsp; &nbsp; * 求向量</b></div><div>&nbsp; &nbsp; 1 2 -1</div><div>&nbsp; &nbsp; 0 -5 3 * { 4, 3, 7 }</div><div>&nbsp; &nbsp; ：有 4*(1, 0) + 3*(2, -5) + 7*(-1, 3)</div><div>&nbsp; &nbsp; ：最终 矩阵通过 { 4, 3, 7 } 向量变化为 (3, 6)</div><div>&nbsp; &nbsp; ：即 固定向量组合通过 权组合 {4, 3, 7} 变化为另外一个向量 (3, 6)</div>"
    },
    "ye1V4Kcg9": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "ye1V4Kcg9",
      "name": "矩阵",
      "content": ""
    },
    "rhm88UazE": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "rhm88UazE",
      "name": "向量",
      "content": ""
    },
    "ghsw2crdF": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "ghsw2crdF",
      "name": "线性方程组",
      "content": ""
    },
    "ZFSu6kih-": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "ZFSu6kih-",
      "name": "特征值/向量 相似矩阵",
      "content": ""
    },
    "szmvCL3Eb": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "bookId": "szmvCL3Eb",
      "name": "函数防抖 & 节流",
      "content": "<div><br></div><div><div><font color=\"#4169e1\"><b>函数防抖 debounce</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp;&nbsp;</b></font>* 高频触发函数只执行一次，<font color=\"#ff0000\"><b>限制了触发条件</b></font>，需要触发存在一定间隔才能再次执行</div><div>&nbsp; &nbsp;&nbsp;<b>短时间内连续触发事件，回调只执行最后一次，多次触发会导致重新计时</b></div><div>&nbsp; &nbsp; const debounce = (func, wait) =&gt; {</div><div><span style=\"white-space: pre;\">\t</span>let timer;</div><div><span style=\"white-space: pre;\">\t</span>return () =&gt; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; clearTimeout(timer);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; timer = setTimeout(func, wait);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; };</div><div>&nbsp; &nbsp; };</div><div><br></div><div><font color=\"#4169e1\"><b>函数节流&nbsp;throttle</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp;&nbsp;</b></font>&nbsp;* 高频触发函数，<font color=\"#ff0000\"><b>限制了执行次数</b></font>，函数只执行一定次数</div><div>&nbsp; &nbsp;&nbsp;<b>事件触发后,执行回调，一定时间后才能继续触发</b></div><div>&nbsp; &nbsp; const throttle = (func, wait) =&gt; {</div><div><span style=\"white-space: pre;\">\t</span>let timer;</div><div><span style=\"white-space: pre;\">\t</span>return () =&gt; {</div><div><span style=\"white-space: pre;\">\t\t</span>if (timer) {return;}//连续触发事件判断计时器是否执行</div><div><span style=\"white-space: pre;\">\t\t</span>timer = setTimeout(()=&gt;{</div><div><span style=\"white-space: pre;\">\t\t\t</span>func();</div><div><span style=\"white-space: pre;\">\t\t\t</span>timer = null;</div><div><span style=\"white-space: pre;\">\t\t</span>}, wait);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; };</div><div>&nbsp; &nbsp; };</div></div>"
    },
    "QL_q-AEGo": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "QL_q-AEGo",
      "name": "(Linear)表",
      "content": ""
    },
    "A_zezOuwR": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "A_zezOuwR",
      "name": "(Linear)栈",
      "content": ""
    },
    "mFRTM1fLt": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "mFRTM1fLt",
      "name": "(Linear)队列",
      "content": ""
    },
    "YiqaoFk3H": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "bookId": "YiqaoFk3H",
      "name": "排序",
      "content": "<font color=\"#ff0000\"><b>N^2</b></font><div>&nbsp; &nbsp; 选择</div><div>&nbsp; &nbsp; 插入</div><div>&nbsp; &nbsp; 冒泡</div><div><br></div><div><font color=\"#ff0000\"><b>LogN</b></font></div><div>&nbsp; &nbsp; 归并</div><div>&nbsp; &nbsp; 快速排序</div><div>&nbsp; &nbsp; 堆排序<br></div><div><br></div><div><font color=\"#ff0000\"><b>特殊排序</b></font></div><div>&nbsp; &nbsp; 桶排序<br></div><div>&nbsp; &nbsp; 基数排序<br></div><div>&nbsp; &nbsp; 外部排序</div>"
    },
    "EdxuJpiMz": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "bookId": "EdxuJpiMz",
      "name": "选择",
      "content": ""
    },
    "2LfSy6Qfj": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "2LfSy6Qfj",
      "name": "(tree)树",
      "content": ""
    },
    "1WpGDWZLm": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "1WpGDWZLm",
      "name": "(graph)图",
      "content": ""
    },
    "lR4EJ1GCv": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "lR4EJ1GCv",
      "name": "(set)集合",
      "content": ""
    },
    "Gc55YVami": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "Gc55YVami",
      "name": "(应用)符号表",
      "content": ""
    },
    "vPakASss5": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "vPakASss5",
      "name": "(应用)字典",
      "content": ""
    },
    "IxP3L69Wl": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "IxP3L69Wl",
      "name": "(应用)优先队列",
      "content": ""
    },
    "DuVBkrvW0": {
      "blockId": "U2EWIATls",
      "shelfId": "AvNgmhcbf",
      "bookId": "DuVBkrvW0",
      "name": "(应用)并查集",
      "content": ""
    },
    "foJ-QI6ri": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "foJ-QI6ri",
      "name": "1.函数与图像",
      "content": "<div><font color=\"#ff0000\"><b>函数</b></font><div>&nbsp; &nbsp; * 函数<font color=\"#ff0000\"><b>&nbsp;f&nbsp;</b></font>是将一个对象转化为另外一个对象的规则<font color=\"#ff0000\"><b>&nbsp;f</b></font></div>&nbsp; &nbsp; * 一个函数必须给每一个有效的输入指定唯一的输出<div>&nbsp; &nbsp; * 函数的组成</div>&nbsp; &nbsp; &nbsp; &nbsp; 0.通过&nbsp;<font color=\"#4169e1\"><b>垂直检验&nbsp;</b></font>来判断一个图像是不是函数图像（有些图像可能由两个函数组成：如圆 y2 + x2 = 1）<div>&nbsp; &nbsp; &nbsp; &nbsp; 1.起始对象<font color=\"#4169e1\"><b>&nbsp;x&nbsp;</b></font>称为输入，来自定义域集合</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 函数的定义中一般会包括定义域，但大部分情况下需要根据函数的变化公式<font color=\"#4169e1\"><b>自行推导</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.返回对象<font color=\"#4169e1\"><b>&nbsp;f(x)&nbsp;</b></font>称为输出，来自上域集合（所有可能的输出）上域的子集 值域 是实际输出的集合</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 可以使用图像推导函数的值域</div><div>&nbsp; &nbsp; * 用区间表示法表示集合<font color=\"#4169e1\"><b>&nbsp;{x：2&lt;= x &lt;= 5}</b></font>&nbsp;或<font color=\"#4169e1\"><b>&nbsp;[2, 5]</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div><div><font color=\"#ff0000\"><b>反函数</b></font></div><div>&nbsp; &nbsp; * 反函数<font color=\"#ff0000\"><b>&nbsp;f^-1&nbsp;</b></font>就像是<font color=\"#ff0000\"><b>&nbsp;f&nbsp;</b></font>的撤销按钮，通过其来撤销 f 变化</div><div>&nbsp; &nbsp; * 求反函数步骤</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 通过&nbsp;<font color=\"#4169e1\"><b>水平线检验&nbsp;</b></font>来判断一个函数图像，有没有反函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 通常通过公式变化求反函数公式是<font color=\"#ff0000\"><b>不可能的</b></font>，但很容易通过函数图像 + y=x 图像，来求得反函数图像</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 有可能存在只有部分定义存在反函数的情况，需要限制定义域（如只取一半的 y=x2）</div><div>&nbsp; &nbsp; * 典型的反函数例子：a^x &amp; loga(N)</div><div><br></div><div><font color=\"#ff0000\"><b>函数复合</b></font></div><div>&nbsp; &nbsp; * 另 g(x) = x2，则可以用 f(x) = g(x)2 表示 f(x) = x4</div><div><br></div><div><font color=\"#ff0000\"><b>奇偶函数</b></font></div><div>&nbsp; &nbsp; * 必须对定义域中的所有x都成立</div>&nbsp; &nbsp; * 对于 f(x) = f(-x) 成立时的变化规则成为偶函数<br>&nbsp; &nbsp; * 对于 -f(x) = f(-x) 成立时的变化规则成为偶函数</div><div>&nbsp; &nbsp; * 一般通过替换 -x 判断最终式子是否为 -f(x) 来判断函数是否为奇偶函数</div><div>&nbsp; &nbsp; * JO = J , OO = O , JJ = O</div><div><font color=\"#ff0000\"><b><br></b></font><div><font color=\"#ff0000\"><b>函数图像</b></font></div></div><div>&nbsp; &nbsp; * 多项式 p(x) = anxn + a(n-1)x(n-1) ... + a2x2 + a1x1 + a0x0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 其中 x^n 称为多项式的<font color=\"#4169e1\"><b>基本项&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 系数 an 成为其<font color=\"#4169e1\"><b>首项系数</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; ** 次数为2的多项式：需要掌握配方法求解 x 判别式求解 x 个数</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>** 一般多项式的图像是很难画的</b></font></div><div>&nbsp; &nbsp; * 但是实际上我们只需要判断 首项系数 的正负，基本项次数的奇偶性就能判断图像两端的走势</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 偶数+正数 v 偶数+负数 ^ 奇数+正数 / 奇数+负数 \\</div><div>&nbsp; &nbsp; * 函数分类</div><div>&nbsp; &nbsp; &nbsp; &nbsp; A <font color=\"#ff0000\"><b>有理(比例)函数</b></font> = p/q <font color=\"#ff0000\"><b>其中 p/q 均为多项式</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; B <font color=\"#ff0000\"><b>指数-对数函数</b></font>：ax / loga(x)：互为反函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; C <font color=\"#ff0000\"><b>三角函数</b></font>：sin/cos/tan</div><div>&nbsp; &nbsp; &nbsp; &nbsp; D 绝对值函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 最好使用分段函数来定义绝对值函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - |x-y| 表示数轴上两点之间的距离（如 |x-1|&lt;=3 表示为 [-2, 4]）</div></div>"
    },
    "JU6idvku7": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "JU6idvku7",
      "name": "2.三角学",
      "content": "<font color=\"#ff0000\"><b>角的弧度的概念</b></font><div>&nbsp; &nbsp; * 单位 π</div><div>&nbsp; &nbsp; * 坐标系按逆时针方向，自右上开始为第1-4象限，弧度 0~2π</div><div><br></div><div><font color=\"#ff0000\"><b>角的三角函数</b></font></div><div>&nbsp; &nbsp; * 正弦 <font color=\"#4169e1\"><b>cos0</b></font>&nbsp;正割 <font color=\"#4169e1\"><b>sec0</b></font> = 1/cos0</div><div>&nbsp; &nbsp; * 余弦 sin0 余割&nbsp;csc0 = 1/sin0&nbsp;</div><div>&nbsp; &nbsp; * 正切 tan0 余切 cot0 = 1/tan0</div><div>&nbsp; &nbsp; * 都具有周期性</div><div>&nbsp; &nbsp; * sin csc tan cot 都为奇函数</div><div><br></div><div><font color=\"#ff0000\"><b>三角恒等式</b></font></div><div>&nbsp; &nbsp; * 毕达哥拉斯定理</div><div>&nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;<font color=\"#4169e1\"><b> cos2 + sin2 = 1（勾股定理）</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 毕达哥拉斯 · 数学之父 · 古希腊</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 定理推演（/cos2） 1+tan2 = sec2 = 1/cos2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 定理推演（/sin2） cot2 +1 = csc2</div><div>&nbsp; &nbsp; * 常用公式</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** sin(A+B) = sinAcosB + sinBcosA</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** cos(A+B) = cosAcosB - sinAsinB</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** sin2X = 2sinXcosX</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** cos2X = 2(cosX)^2 - 1 = 1- 2(sinX)^2</div>"
    },
    "R1C9jOp9T": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "R1C9jOp9T",
      "name": "3.极限导论",
      "content": "<font color=\"#ff0000\"><b>概念</b></font><div>&nbsp; &nbsp; * 恰当地定义一个极限是相当棘手的事情，且极限本身就是一个奇怪的问题</div><div>&nbsp; &nbsp; * 在一段函数图像中，存在某个输入值，我们希望探讨无限逼近它时的极限输出值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 从左端逼近 <font color=\"#4169e1\"><b>左极限：x</b></font><b style=\"color: rgb(65, 105, 225);\">→</b><font color=\"#4169e1\"><b>n-，f(x)</b></font><b style=\"color: rgb(65, 105, 225);\">→?</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 从右端逼近 <font color=\"#4169e1\"><b>右极限</b></font><font color=\"#4169e1\"><b>：x</b></font><b style=\"color: rgb(65, 105, 225);\">→</b><font color=\"#4169e1\"><b>n+，f(x)</b></font><b style=\"color: rgb(65, 105, 225);\">→?</b>，也可能是其他值</div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font>**<font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp;</font>读作当 x 趋向于n，f(x) 的极限等于 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 当上述左右极限不相等时，<b>x→n，f(x) </b>不存在，即<font color=\"#4169e1\"><b>极限不存在</b></font></div><div>&nbsp; &nbsp; * 对于 ∞</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 极限可能存在(有极限值)，也可能不存在(左右极限不相等)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 极限值为无穷时，即 x→n，f(x)=∞，则称 f(x) 在n处有一条<font color=\"#4169e1\"><b>渐近线</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 函数有可能和它的某条渐近线相交，如 x→∞，sinx/x = 0</div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; * 夹逼定理&nbsp;</b></font>对于 <font color=\"#4169e1\"><b>g ≤ f ≤ h</b></font> ，<font color=\"#ff0000\"><b>如果 x→a，g = h = 1</b></font>，则 x→a，f=1（三个函数在 a 处有相同的极限）</div><div><br></div><div><div><b>推导 x→∞，f(x)=sin(1/x)</b></div><div>&nbsp; &nbsp; 1. x→∞时，函数 1/x 有定义且会非常接近于 0</div><div>&nbsp; &nbsp; 2.由于sin(0)=0，则 x→∞，f(x)=sin(1/x)&nbsp;= 0</div></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 直接代入</b></font></div><div><br></div><div><div><b>推导 x→∞，f(x)=sin(x)/x</b></div><div>&nbsp; &nbsp; 1.恒有 -1≤ sinx ≤ 1，则有 -1/x ≤ sinx/x ≤ 1/x</div><div>&nbsp; &nbsp; 2.对于 x→∞，-1/x 和 1/x = 0，则 sinx/x 的极限是 0</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 夹逼定理</b></font></div><div><br></div></div>"
    },
    "EqEY2uNPp": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "EqEY2uNPp",
      "name": "4.求解多项式的极限",
      "content": "<font color=\"#ff0000\"><b>研究特定函数的极限取法</b></font><div><div>&nbsp; &nbsp; **&nbsp;有理数&nbsp;<font color=\"#4169e1\"><b>Rational number</b></font>：其英文词根为ratio，就是<font color=\"#4169e1\"><b>比率</b></font></div><div>&nbsp; &nbsp; ** 有理数是整数和分数的统称，是整数和分数的集合</div><div>&nbsp; &nbsp; ** 无理数：不是有理数的实数称为无理数，即无理数的小数部分是无限不循环的数</div><div>&nbsp; &nbsp; ** <font color=\"#ff0000\"><b>多项式函数</b></font>：全体实数范围都连续</div><div>&nbsp; &nbsp; ** <font color=\"#ff0000\"><b>有理函数</b></font> 即通过多项式函数的加减乘除得到的函数&nbsp;<font color=\"#ff0000\"><b>话说</b></font><b style=\"color: rgb(255, 0, 0);\">为啥多项式总是有理函数？</b></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp; # a3 -b3 = (a-b) * (a2+ab+b2)</b></div><div><b style=\"color: rgb(255, 0, 0);\"><br></b></div><div><b style=\"color: rgb(255, 0, 0);\">有理函数的极限</b></div><font color=\"#4169e1\"><b>&nbsp; &nbsp; x→ a，有理函数</b></font></div><div>&nbsp; &nbsp; 解方法1：总是应该尝试用a的值替换x，之后函数的值就是极限值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b># 仅仅在有理函数，即多项式函数的商，中可以直接进行代入</b></font></div><div>&nbsp; &nbsp; 解方法2：尝试因式分解来简化极限函数，并再次代入a（因式分解后的函数 ≠ 原函数，原因是因为定义域可能不同）</div><div>&nbsp; &nbsp; 解方法3：有理函数的极限为渐进线&nbsp;</div><div>&nbsp; &nbsp; <b>求解</b>&nbsp;<b>x→1，2x^2-x-6 / x(x-1)^3</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 分母代入1的值有多种情况，函数代入1的值为 a/0 即无穷大，则该函数可能存在渐近线</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 尝试1+，和1-，发现函数的值可能为正/负无穷大，则函数在1处存在渐近线</div><div><br></div><font color=\"#4169e1\"><b>&nbsp; &nbsp; x→ a，涉及平方根的有理函数</b></font><div><div>&nbsp; &nbsp; 解方法4：使用<font color=\"#ff0000\"><b>共轭表达式</b></font>进行因式有理化</div><div>&nbsp; &nbsp; <b>求解 x→5，√(x2-9) - 4 / (x-5)</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 此时直接替换无效，因式分解无效，也不存在渐近线的情况</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 使得函数同时 *= √(x2-9) + 4，最终函数可以直接用a的值替换x！</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp;</b></div><div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; x→ ∞，有理函数</b></font></div><div><b>&nbsp; &nbsp; 计算&nbsp;x→∞，3x^3 - 1000x^2 + 5x -7 / 3x^3&nbsp;的极限</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：x→∞，(1 - 1000/3x + 5/3x^2 - 7/3x^3)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：x→∞，1 - 0 + 0 - 0，即最终结果是 1</div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;* 重要的多项式性质，即当x很大时，首项决定一切，似乎只有首项存在一样</b></font></div><div>&nbsp; &nbsp; <b>计算&nbsp;x→∞，x-8x^4 / 7x^4+5x^3+2000x^2-6&nbsp;的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：利用上述证明，有 (分子/-8x^4&nbsp;* -8x^4) / (分母 / 7x^4 * 7x^4)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：最终有 x→∞，-8x^4 / 7x^4，即最终结果是 -8/7</div><div>&nbsp; &nbsp; <b>计算&nbsp;x→∞，(x^4+3x-99)(2-x^5) / (18x^7+9x^6-3x^2-1)(x+1)&nbsp;的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：同理例题2，最终有 x→∞，(x^4)(-x^5) / (18x^7)(x)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：x→∞，-x/18，即最终结果是 -∞</div><div>&nbsp; &nbsp; <b>计算&nbsp;x→∞，2x+3 / x^2-7&nbsp;的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：同理例题2，最终有 2x / x^2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：x→∞，2x / x^2 即最终结果是 0</div><div><br></div><div><font color=\"#4169e1\" style=\"\"><b>&nbsp; &nbsp; 有理函数极限规律</b></font>，对于 多项式A / 多项式B 我们可以说</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.A的首项次 = B的首项次，则A/B存在非零极限</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.A的首项次 &gt; B的首项次，则A/B的极限为 +/-∞</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.A的首项次 &lt; B的首项次，则A/B存在零极限<br></div><div><br></div><div><font color=\"#ff0000\"><b>多项式型函数的极限</b></font></div><font color=\"#4169e1\"><b>&nbsp; &nbsp; x→ ∞，多项式型函数</b></font></div><div>&nbsp; &nbsp; <b>计算&nbsp;x→∞，(√(16x^2+8) +3x) / (2x^2+6x+1)&nbsp;的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：对于分子 √(16x^2+8) +3x 最大项为 √16x^2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :: 分子&nbsp;<b>/ 4x^2 * 4x^2</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :: [√(1+8/16x^4) + (3/4x)] * 4x^2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ::&nbsp;x→∞，分子 = 1 * 4x^2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：同理例题2，有 4x^2 / 2x^2 即最终结果是 0</div><div>&nbsp; &nbsp; <b>计算&nbsp;x→∞，(√(16x^2+8) +3x^3) / (2x^2+6x+1)&nbsp;的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：对于分子最大项为 3x^3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :: 分母&nbsp;/ 3x^3&nbsp;* 3x^3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :: (√(16x^4/9x^6 + 8/9x^6) + 1) * 3x^3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :: x→∞，(√(0+0+1)) * 3x^3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：同理例题2，最终有 3x^3&nbsp;/ 2x^2 即最终结果是 0</div><div>&nbsp; &nbsp; <b>特复杂计算：x→∞，[√(4x^6 -5x^5) - 2x^3] / 3√(27x^6 +8x)</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 首先需要使用共轭表达式进行分式有理化</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 再使用上述技巧进行计算</div><div><br></div><div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; x→ (-∞)，有理函数 &amp; 多项式函数</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp; </font>* 需要特别注意<font color=\"#ff0000\"><b>根号</b></font>的场景<font color=\"#4169e1\" style=\"font-weight: bold;\"> 如 x→∞，</font><b style=\"color: rgb(65, 105, 225);\">4√x^4 = -x</b></div><div><font color=\"#4169e1\"><b><br></b></font></div><font color=\"#ff0000\"><b>绝对值函数</b></font></div></div><div>&nbsp; &nbsp; <b>计算 x→-0，|x|/x 的极限</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 首先要注意其的定义域，即x≠0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 对绝对值项，要判断两种情况</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.x→-0，x&gt;0，|x|/x = 1</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>2.x→-0，x&lt;0，|x|/x = -1 即题答案为 -1，且函数极限不存在</div><div>&nbsp; &nbsp; <b>计算 x→(-2)-，|x+2| / (x+2) 的极限</b><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 首先要注意其定义域，即x≠-2</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 对于绝对值项，有两种情况</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.x→(-2)-，x&gt;-2，(x+2)&nbsp;/ (x+2) = 1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;2.x→(-2)-，x&lt;-2，-(x+2)&nbsp;/ (x+2) = -1 即题答案为 -1，且函数极限不存在</div>"
    },
    "FXaSyZgn5": {
      "blockId": "U2EWIATls",
      "shelfId": "Voh8g7nW6",
      "bookId": "FXaSyZgn5",
      "name": "硬件基础",
      "content": "<div><div><font color=\"#ff0000\"><b>计算机发展历史</b></font></div><div>&nbsp; &nbsp; * 穴居人发明数学不是为了在湿冷的天气里玩数独游戏</div><div>&nbsp; &nbsp; * Computer 过去指专门从事计算大数字的从业人员</div><div>&nbsp; &nbsp; * 让优秀的人浪费时间算数简直侮辱尊严&nbsp;人们需要更多自动化 更强的计算能力</div><div>&nbsp; &nbsp; * 机械计算机使用 0/1 单元（继电器 / 真空管 / 晶体管(半导体)）来存储信息，</div><div>&nbsp; &nbsp; * 希望能可编程地，自动完成一系列计算操作</div></div><div><br></div><div><font color=\"#ff0000\"><b>计算机硬件组成</b></font><font color=\"#ff0000\"><b>&nbsp;</b></font>&nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 通信设备 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━<font color=\"#ff0000\"><b>&nbsp;</b></font>&nbsp; &nbsp; &nbsp; &nbsp;</div><div>&nbsp; &nbsp; * 计算机访问互联网需要特殊的设备：<font color=\"#4169e1\" style=\"\"><b>调制解调器</b></font></div><div>&nbsp; &nbsp; * 早期计算机通信使用电话线来作为底层通信介质来访问互联网</div><div>&nbsp; &nbsp; * 使用电话线有相当大的干扰，但是通过 100Hz~200Hz 的正弦波信号作为载波信号</div><div>&nbsp; &nbsp; * 适当变更正弦波信号的振幅、频率等可以缓解干扰，称之为信号的调制</div><div>&nbsp; &nbsp; * 是时候需要比电话线更快的介质了（DSL：Digital Subscriber Line，ADSL）</div><div>&nbsp; &nbsp; * 电信公司员工需要在用户的家里安装 ADSL调制解调器 即数字信号处理机（猫？）</div><div>&nbsp; &nbsp; * 这个机器将模拟数字信号（各种波）还原为bit包，通过局域网（以太网技术）传递给用户</div><div><br></div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ I/O设备 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; * 计算机的各个部件通过总线连接在一起，用于 *传递地址/数据/控制信号</div><div>&nbsp; &nbsp; * 总线可以用于连接CPU与其他计算机部件(键盘鼠标)，也可以连接CPU的各个组成部分&nbsp;</div><div>&nbsp; &nbsp; ┏━━━━━━━━┓&nbsp;&nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; 键盘&nbsp; &nbsp; &nbsp; &nbsp;┃<font color=\"#ff0000\"><b>&nbsp; &nbsp;┃</b></font><b style=\"color: rgb(255, 0, 0);\">总线</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; 鼠标&nbsp; &nbsp; &nbsp; &nbsp;┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; 打印机&nbsp; &nbsp; ┃&nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp;┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp; ┗━━━━━━━━┛&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 外部存储器 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div><div>&nbsp; &nbsp; A 磁盘驱动器</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 源代码通过字节序列的结构存储在该级别存储器上</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 通常程序加载先将字节序列载入内存，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 再使用编译器驱动程序将源代码转换为 → 汇编语言 → 二进制的可执行文件</div><div>&nbsp; &nbsp; B DRAM：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 在处理器执行程序时，存放程序和数据</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 从逻辑上说存储器是一个线性的字节数组&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * SRAM：L1 ~ L2 ~L3 Cache</div></div><div>&nbsp; &nbsp; ┏━━━━━━━━┓&nbsp;&nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃<font color=\"#ff0000\"><b>&nbsp; &nbsp;┃</b></font><b style=\"color: rgb(255, 0, 0);\">总线</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp;┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp; ┗━━━━━━━━┛&nbsp;&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 内部存储器 ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp;&nbsp;<b><font color=\"#ff0000\"># 内存的单位</font></b></div><div>&nbsp; &nbsp; bit *8 =&gt; 1 byte&nbsp;</div><div>&nbsp; &nbsp; *1024 =&gt; 1kb</div><div>&nbsp; &nbsp; *1024 =&gt; 1Mb</div><div>&nbsp; &nbsp; *1024 =&gt; 1GB</div><div><b style=\"\"><font color=\"#4169e1\">&nbsp; &nbsp; </font><font color=\"#ff0000\"># 程序的生命周期</font></b></div><div>&nbsp; &nbsp; 初始：可执行的二进制文件存储在本地磁盘上</div><div>&nbsp; &nbsp; 加载：将磁盘上的二进制指令集存储进主存</div><div>&nbsp; &nbsp; 执行：指令按顺序从主存复制进寄存器，并交由算数逻辑单元计算，结果会被覆盖到新寄存器</div><div>&nbsp; &nbsp; 结果：将寄存器存储的结果再次保存到主存&nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;<font style=\"\">复制就是开销！数据经过总线太慢了！</font></div><div><font style=\"\">&nbsp; &nbsp; 应该</font>将常用数据保存到更小更快的N级高速缓存处理器 Cache 上&nbsp;</div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; # 关于现代64位CPU</b></font></div><div>&nbsp; &nbsp; * 64位指的是<font color=\"#4169e1\" style=\"\"><b>指令地址寄存器</b></font>的位数 / 地址总线的位宽为64位（Max=2^64）即一共有2^64个地址</div><div>&nbsp; &nbsp; * 约定俗成一个地址上至少需要含有 8bit = 1byte 的内存！！当前一个地址可以代表Nbyte的数据</div><div>&nbsp; &nbsp; * 如32位计算机支持512M个地址，共计4GB内存</div><div>&nbsp; &nbsp; * 定义C++中的 int 类型需要1个地址+4byte数据，long类型需要1个地址+8byte数据</div><div>&nbsp; &nbsp; * 使用C++中的 sizeof 语法计算指针（本质是地址值）大小，在32位OS上是4byte，在64位OS上是8byte&nbsp;&nbsp;</div><div>&nbsp; &nbsp; ┏━━━━━━━━┓&nbsp;&nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp;8bit&nbsp; &nbsp; &nbsp; &nbsp;┃<font color=\"#ff0000\"><b>&nbsp; &nbsp;┃</b></font><b style=\"color: rgb(255, 0, 0);\">总线</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp;8bit&nbsp; &nbsp; &nbsp; &nbsp;┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp;┃</b></div><div>&nbsp; &nbsp;&nbsp;┃&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp; ┗━━━━━━━━┛&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ Central processing unit（芯片） ━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; Central processing unit</div><div><div>&nbsp; &nbsp; * 控制单元&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 单个CPU时钟时间开始（Hz）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 从内存的第一个地址开始，将地址保存到程序计数器 / <font color=\"#ff0000\"><b>指令地址寄存器</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 根据地址寄存器从主存复制数据到<font color=\"#ff0000\"><b>指令寄存器</b></font>，解码指令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 使用<font color=\"#ff0000\"><b>算数逻辑单元</b></font>执行解码后的指令，得到且将结果存储到对应存储器</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 地址寄存器读取存储下一个地址，并循环上述操作</div><div><div>&nbsp; &nbsp; * 寄存器&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：通用寄存器：用于保存关键变量，和临时结果</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>：指令地址寄存器</b></font>：即程序计数器，任何时候都保存了下一条指令的内存地址，是最重要的寄存器</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>：指令寄存器</b></font>：根据指令地址从主存中获取指令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：栈堆指针：保存内存中当前栈的顶部&nbsp;</div><div>&nbsp; &nbsp; * 算数逻辑单元：ALU</div></div><div>&nbsp; &nbsp; * 更快的计算能力：*流水线模式下的指令并行执行 *多CPU结构 *多计算机结构</div><div>&nbsp; &nbsp; * 最快的计算速度是光速，电流在导线中/或光束在光纤中的速度不可能超过20cm/ns，且散热也是一个问题</div><div>&nbsp; &nbsp; ┏━━━━━━━━┓&nbsp; &nbsp;</div><div>&nbsp; &nbsp;&nbsp;┃ CPU&nbsp; &nbsp; &nbsp; &nbsp; ┃<font color=\"#ff0000\"><b>&nbsp; &nbsp;┃总线</b></font></div><div>&nbsp; &nbsp;&nbsp;┃ 控制器&nbsp; &nbsp;&nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp;&nbsp;┃ 寄存器&nbsp; &nbsp; &nbsp;┃&nbsp;&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp;┃</b></div><div>&nbsp; &nbsp;&nbsp;┃ ALU&nbsp; &nbsp; &nbsp; &nbsp; ┃&nbsp;<b style=\"color: rgb(255, 0, 0);\">&nbsp; ┃</b></div><div>&nbsp; &nbsp; ┗━━━━━━━━┛&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━&nbsp;</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div>"
    },
    "oRDGsN5gI": {
      "blockId": "U2EWIATls",
      "shelfId": "Voh8g7nW6",
      "bookId": "oRDGsN5gI",
      "name": "计算机内存",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">物理内存</b><br></div><div><div><font style=\"\">&nbsp; &nbsp; *&nbsp;</font>使用电路来完成（输入 - 计算 - 输出）</div><div>&nbsp; &nbsp; * 使用<font color=\"#4169e1\"><b>电路元件</b></font>来保存二进制数据，电路接通则代表TRUE，反之则是FALSE，<font color=\"#ff0000\"><b>输出(0 / 1)</b></font></div><div>&nbsp; &nbsp; * 通过组合电路元件形成<font color=\"#4169e1\"><b>逻辑门</b></font>，<b style=\"color: rgb(255, 0, 0);\">输出(0 、 1)</b></div><div>&nbsp; &nbsp; * 设计并组合特定逻辑门，形成逻辑单元</div><div>&nbsp; &nbsp; *&nbsp;Arithmetic logic unit：实现计算单元与逻辑单元的<font color=\"#4169e1\"><b>算术逻辑单元&nbsp;</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>1 x 1bit的存储器</b></font></div><div>&nbsp; &nbsp; 通过组合电路元件来完成<font color=\"#4169e1\"><b>锁存器 latch&nbsp;▣&nbsp;</b></font></div><div>&nbsp; &nbsp; * 在左端添加 \"是否允许修改\" 状态电流，控制 latch 是否允许修改</div><div>&nbsp; &nbsp; ：从左端输入一道电流，从右端获取电路状态是否通电 即&nbsp;<b style=\"color: rgb(65, 105, 225);\">▣&nbsp;</b>最多表示 1bit 数据</div><div><br></div><font color=\"#ff0000\"><b>256 x 1bit的存储器</b></font></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>* 在左端添加 \"是否允许修改\" 状态电流，控制所有的 latch 是否允许修改</div><div><div>&nbsp; &nbsp; ：通过<font color=\"#4169e1\"><b>并行</b></font>放置256个latch，或者通过<font color=\"#4169e1\"><b>串行</b></font>放置256个latch，将其排列为16x16矩阵</div><div>&nbsp; &nbsp; ：并行 / 串行我们都需要一个 0000 0000 八位地址，就可以定位 1bit 数据（但是<font color=\"#4169e1\"><b>串行</b></font>放置更省线！！）</div><div>&nbsp; &nbsp; ：这是一个数学推理 : ) √(2^N) = 2^(N/2)</div><div>&nbsp; &nbsp; ：这个有256个地址，每个地址1bit，总内存256bit的电路，我们称之为256位寄存器</div><div><br></div><b style=\"color: rgb(255, 0, 0);\">256 x 8bit的存储器</b></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>* 在左端添加 \"是否允许修改\" 状态电流，控制所有的寄存器是否允许修改<font color=\"#ff0000\"><b><br></b></font><div>&nbsp; &nbsp; ：<font color=\"#4169e1\"><b>并行</b></font>放置8个256bit寄存器，所有寄存器共用一个地址</div><div>&nbsp; &nbsp; ：这样我们只需要 0000 0000 八位地址，就可以定位 8bit 数据&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000（第一个256位寄存器）&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>0000000 ... 256... 00000000（第八个256位寄存器）&nbsp;</div><div>&nbsp; &nbsp; ：最终得到八位寻址能力，能存储<font color=\"#ff0000\"><b>256个地址，即最多 0000 0000 个地址，每个地址占用8bit内存，共计256byte大小</b></font>的内存&nbsp;</div><div><br></div><div><font color=\"#ff0000\"><b>关于现代64位CPU</b></font></div><div>&nbsp; &nbsp; * 64位指的是<font color=\"#4169e1\"><b>指令地址寄存器</b></font>的位数 / 地址总线的位宽为64位（Max=2^64）即一共有2^64个地址</div><div>&nbsp; &nbsp; * 约定俗成一个地址上至少需要含有 8bit = 1byte 的内存！！当前一个地址可以代表Nbyte的数据</div><div>&nbsp; &nbsp; * 如32位计算机支持512M个地址，共计4GB内存</div><div>&nbsp; &nbsp; * 定义C++中的 int 类型需要1个地址+4byte数据，long类型需要1个地址+8byte数据</div><div>&nbsp; &nbsp; * 使用C++中的 sizeof 语法计算指针（本质是地址值）大小，在32位OS上是4byte，在64位OS上是8byte</div></div><div><div><br></div></div><div>单位换算</div><div>&nbsp; &nbsp; * 1byte = 8bits&nbsp;<b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0</b><b style=\"color: rgb(255, 0, 0);\">0 1字节</b></div><div>&nbsp; &nbsp; * 1kb = 1024 * 1byte&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000（10位）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp; &nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; * 1Mb = 1024kb</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp; x1024</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; * 1GB = 1024MB</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp; x1024 x1024</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>0</b></font>000000000&nbsp;</div>"
    },
    "dcEopuhds": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "dcEopuhds",
      "name": "5.函数的连续性 / 可导性",
      "content": "<font color=\"#ff0000\"><b>**************************************************************函数的光滑特性：1.连续性</b></font><div>&nbsp; &nbsp; * 直觉告诉我们，某些函数图像可以一笔画成</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 函数在某个点a处连续</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 条件1：函数在 x=a 处有定义，即 f(a) 存在，且≠无穷</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 条件2：函数在这点存在极限（详见 3.极限导论）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 条件3：函数极限值 = 函数值，则函数在这一点连续</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 函数在某段区间 [a, b] 上连续</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 推论1：函数在区间中的每一个点都连续</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 推论2：函数在左右两个端点的极限分别等于其端点值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b># 多项式函数 / 有理函数，各类初等函数（</b></font><b style=\"color: rgb(255, 0, 0);\">三角函数 / 指数-对数函数</b><font color=\"#ff0000\"><b>） 都是连续的！</b></font><b style=\"color: rgb(255, 0, 0);\">&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：若有 f 在R上连续，则对于 f 进行了四则运算复合运算后依然连续</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * 知道一个函数是连续的会有很多好处&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b>* 介值定理</b></font>：若 f 在 [a, b] 上连续，且 f(a)f(b)&lt;0，则至少存在一点 f(c)=0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 变体：若 f 在 [a, b] 上连续，且 f(a)&lt;m, f(b)&gt;m，则至少存在一点 f(c)=m</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b>* 最大值最小值定理</b></font>，若 f 在 [a, b] 上连续，则 f 至少存在一个最大值和一个最小值</div><div><font color=\"#ff0000\"><b><br></b></font></div><div><b>&nbsp; &nbsp;&nbsp;计算 x→0，x * sin(1/x) 的极限</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b>：有 -1 &lt; sin(1/x) &lt; 1，通过夹逼定理有 -x &lt; x*sin(1/x) &lt; x</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：且 x→0，-x = x =0，即最终函数的极限为0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：所以虽然 x*sin(1/x) 在x处无定义，但是某种意义上其在 0 上连续d</div><div>&nbsp; &nbsp;&nbsp;<b>通过连续性计算 x→-1，(x2-3x+2) / (x-2) 的定义</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：这个函数在 x=2 处无定义</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：由于分子/分母都是多项式，则这个函数是连续函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：根据连续函数 x→a，F = f(a)，则其极限值是 f(-1) = -2</div><div>&nbsp; &nbsp; <b>证明 x=cos(x) 有解</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：即需要证明函数 f(x) = x-cos(x) 是否有等于0的点</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：根据介值定理只需要找到 f(a)f(b)&lt;0 即可完成证明</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：这里通过画图估值来不断推演出 a、b</div><div>&nbsp; &nbsp; <b>证明奇次项多项式至少有一个解</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：根据多项式的性质 x→+∞/-∞，f(x)/anx^n = 1，可以推断无论 x 的正负性， f(x) 与其极限同符号</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：对于奇次项 anx^n 有+x时&gt;0，-x时&lt;0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：则肯定存在极限 f(+A)f(-B)&lt;0，且连续函数极限=函数值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：则奇次项多项式至少有一个解</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">**************************************************************函数的光滑特性：2.可导性</b><br></div><div><font color=\"#ff0000\"><b>导数的定义</b></font></div><div>&nbsp; &nbsp; * 关于求瞬时速度 通常公式：v = (d2-d1) / (t2-t1)&nbsp;</div><div>&nbsp; &nbsp; * 但是我们要通过极限的概念来取得瞬时变化值：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#ff0000\"><b>曲线某点的极限变化公式</b></font>：△x→0，f = f(x+△x)-f(x) / △x&nbsp;=&nbsp;<font color=\"#ff0000\"><b>△y/△x</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 这个公式的<font color=\"#ff0000\"><b>极限值</b></font>我们称之为<font color=\"#4169e1\"><b>导数</b></font>，即这点的<font color=\"#4169e1\" style=\"font-weight: bold;\">切线斜率</font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>导函数的规律</b></font></div><div>&nbsp; &nbsp; * 极限变化公式 △x→0，△y/△x 即导函数（极限表达式）也可以表示为 <font color=\"#4169e1\"><b>f'(x) = dy/dx</b></font>，即<b style=\"color: rgb(65, 105, 225);\">一阶导</b></div><div>&nbsp; &nbsp; * 若导函数某点上左右值相等，则函数在这点上可导</div><div>&nbsp; &nbsp; * 有时候在某点上，左导数 ≠ 右导数，即函数在这点上<font color=\"#4169e1\"><b>不可导</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; # 时刻记住导数是&nbsp;</b></font><b style=\"color: rgb(255, 0, 0);\">△y/△x&nbsp;</b><font color=\"#4169e1\"><b>的极限值</b></font><b style=\"color: rgb(65, 105, 225);\">，一系列值组成了导函数</b></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp; </font><font color=\"#4169e1\" style=\"\"><b># 某种意义上，导函数就是函数的变化规律，不可导意味着函数在这点的变化规律不一致</b></font></div><div>&nbsp; &nbsp; <b style=\"color: rgb(255, 0, 0);\">重要结论</b>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 推论1：函数连续并不一定处处可导，如 f=|x|，在0处连续，但左导数 ≠ 右导数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 推论2：<b>证明函数处处可导 = 函数处处连续，</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>A 若希望函数连续</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 则必须 u→a，f(u) = f(a)，两侧存在</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 令dx = u-a，当&nbsp;u→a，有 dx→0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 最终希望证明 dx→0，f(a+dx) = f(a)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <b>B 若函数可导</b>，则 △x→0，f' = f(x+△x)-f(x) / △x 存在，即 △x→0，△y/△x</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 先讨论公式 △x→0，<b>g = (f(x+△x)-f(x) / △x)</b> <b>* △x</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 有 (△x→0，f') * (△x→0，△x) = f' *0 = 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 且 公式<b>g</b>实际等于&nbsp;△x→0，f(x+△x)-f(x) 则最终 △x→0，f(x+△x) = f(x)，<b>即函数连续</b></div>"
    },
    "naK6gokBA": {
      "blockId": "YxnegsTMH",
      "shelfId": "w9SAKBPW2",
      "bookId": "naK6gokBA",
      "name": "Timko 0604",
      "content": "<font color=\"#ff0000\"><b>Kim Timko &amp;&amp; Rent the Runway</b></font><div>&nbsp; &nbsp; Kim Timko used to <b>rely on</b> Rent the Runway&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for dresses for wedding and parties,&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; outfis for date nights,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; and professional clothes for her job as a lawyer in New York.</div><div>&nbsp; &nbsp; She said the <b>clothing-rental service</b> is \"a nice way to have expensive clothes without having to buy.\"</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; But weddings have been <b>postponed(推迟)</b>, parties canceled,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; and Timko is <b>working from home</b> during the coronovirus pandemic.</div><div>&nbsp; &nbsp; Like many others, she has put her Rent the Runway <b>subscribtion </b>on hold.</div><div>&nbsp; &nbsp; She may even cancel it.</div><div><br></div><div>&nbsp; &nbsp; She said renting expensive clothes just is not worth the money right now</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ——or the risk of getting the virus</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ——<b>as unlikely as that may be</b>.(就像可能的那样)</div><div>&nbsp; &nbsp; \"Any package I get, I <b>wipe them down</b>,\" Timko said.</div><div>&nbsp; &nbsp; \"You can not really do that with a dress.&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; A $600 dress or something —— you can not，like，<b>lysol(消毒剂喷雾)&nbsp;</b>it.\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; Rent the Runway CEO Jennifer Hyman said in a <b>statement</b>：\"While there is no evidence to suggest&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; that coronovirus is spread <b>via surfaces(表面) like fabric(原料布),</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; all our <b>garments</b>(正式服装), <b>accessories</b>(附件/装饰物), hangers, and reusable packaging&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; are <b>meticulously(细致)&nbsp;</b>cleaned and steamed each time they return to us,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; and then sealed in plastic to protect them from any elements</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ——including human touch that they may <b>encounter(遭遇/应对/n计数器)&nbsp;</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; in transit to the next customer\"</div><div>&nbsp; &nbsp; * women's <b>apparel</b>(指示牌上的服装) sports cloth(种类服装)</div><div><br></div><div>&nbsp; &nbsp; Still， the company has taken a big financial hit from the pandemic.</div><div>&nbsp; &nbsp; It has <b>laid(放置) off(下岗)</b>&nbsp;and <b>furloughed(休岗)&nbsp;</b>employees, and temporarily closed its retail stores.</div><div>&nbsp; &nbsp; Like <font color=\"#ff0000\"><b>Uber </b></font>and <font color=\"#ff0000\"><b>Airbnb</b></font>, Rent the Runway was founded in the wake of the Great <b>Recession(经济萧条)</b>.</div><div>&nbsp; &nbsp; <b>Fuled(汽油)&nbsp;</b>by <b>mountains(山脉)&nbsp;</b>of private capital, these companies <b>tapped(轻拍)&nbsp;</b>the power of</div><div>&nbsp; &nbsp; &nbsp; &nbsp; smartphone apps to make it easy for strangers to share their cars, homes and even clothing.</div><div>&nbsp; &nbsp; <b>Along the way</b>, they upended <b>traditional </b>taxi, hotel and retail industries.</div><div>&nbsp; &nbsp; * upset 情绪奔溃 upend 物理推翻/情绪冒犯</div><div><br></div><div>&nbsp; &nbsp; Now the pandemic may upend them.</div><div>&nbsp; &nbsp; These businesses's <b>survival </b>depends on <b>convincing </b>customer it is save to share</div><div>&nbsp; &nbsp; &nbsp; &nbsp; at a time when health authorities are warning everyone to keep their distance.</div><div><br></div><div>&nbsp; &nbsp; Rent the Runway is not the only company <b>emphasizing </b>its cleanliness and safety rules&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; to <b>reassure(放心)&nbsp;</b>customers.</div><div>&nbsp; &nbsp; Airbnb has created new cleaning protocols for hosts,</div><div>&nbsp; &nbsp; &nbsp; &nbsp; including training on how to <b>disinfect(消毒)&nbsp;</b>a home&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; in <b>partnership(合作)&nbsp;</b>with <b>former(前)&nbsp;</b>US <b>Sugeon(外科医生)&nbsp;</b>General Vivek Murthy.</div><div>&nbsp; &nbsp; Uber and <font color=\"#ff0000\"><b>Lyft(来福车业)&nbsp;</b></font>now require drivers and passengers to wear masks.</div><div>&nbsp; &nbsp; They are also giving/<b>suppling </b>cleaning supplies to drivers.</div><div>&nbsp; &nbsp; Uber is even using facial scanning techonology to ensure drivers are <b>complying </b>(promises).</div>"
    },
    "mIcJv85vQ": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "mIcJv85vQ",
      "name": "6.微分问题",
      "content": "<font color=\"#ff0000\"><b>求导的几种方式</b></font><div>&nbsp; &nbsp; 1.使用导数的定义求导，即 dx→0，(f(x+d)-f(x)) / d；</div><div>&nbsp; &nbsp; 2.公式 x^n = nx^(n-1) 公式</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 简单函数的<font color=\"#4169e1\"><b>加减</b></font>可以直接使用上述公式</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 简单函数的<font color=\"#4169e1\"><b>乘积</b></font>需要公式&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：h=fg，<font color=\"#ff0000\" style=\"font-weight: bold;\">h'=f'g+fg'</font>，记为 (df/dx)g+f(dg/dx)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：h=fgm，h'=f'gm+fg'm+fgm'，记为 ..不写了 如上</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 简单函数的<font color=\"#4169e1\"><b>商</b></font>需要公式</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：h=f/g，<font color=\"#ff0000\"><b>h'=(f'g-fg')/g^2</b></font>，记为 [(df/dx)g-f(dg/dx)]/g^2</div><div>&nbsp; &nbsp; 3.复合函数的<font color=\"#ff0000\"><b>链式法则</b></font>求导</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 对于复合函数 h=<b>f(</b>g(x)<b>)</b>，f是g的函数，g是x的函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 有&nbsp;h'=f'(g)*g'，<font color=\"#ff0000\" style=\"font-weight: bold;\">记为 (df/dg)*(dg/dx)</font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 有<font color=\"#ff0000\"><b> h'=(dy/du)(du/dv)(dv/dx)</b></font></div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">使用导数公式求解极限</b><b><br></b></div><div><b style=\"\">&nbsp; &nbsp; 求解极限 h→0，f=[5√(32+h)-2]/h 的极限</b></div><div>&nbsp; &nbsp; * 这里发现无法使用已知的方法进行求解，有五次方根....</div><div>&nbsp; &nbsp; ：根据 f 的样子 我们假设 y = 5√x</div><div>&nbsp; &nbsp; ：则有 y' =&nbsp;[5√(x+h) - 5√x]/h，当 x=32 时<font color=\"#4169e1\"><b>刚刚好 5√32 = 2 ！</b></font></div><div>&nbsp; &nbsp; ：则求解 f 的极限 相当于求解 y 的导函数在 x=32 上的值，</div><div>&nbsp; &nbsp; ：导函数为<b>&nbsp;(1/5)x^(-4/5)</b>令 x = 32 代入求得 f 极限 = 1/80</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b>求解极限 h→0，f={√[(4+h)^3 - 7(4+h)] - 6}/h 的极限</b></div><div>&nbsp; &nbsp; * 这里发现可以使用共轭表达式求解，但也可以使用导数公式求解</div><div>&nbsp; &nbsp; ：根据 f 的样子 我们假设 y = √(x^3 - 7x)</div><div>&nbsp; &nbsp; ：则有 y' = {√[(x+h)^3 - 7(x+h)] - √(x^3 - 7x)}/h，当 x=4 时<font color=\"#4169e1\"><b>刚刚好 y=√(4^3 - 7*4)=6 ！</b></font></div><div><div>&nbsp; &nbsp; ：则求解 f 的极限 相当于求解 y 的导函数在 x=4 上的值，</div><div>&nbsp; &nbsp; ：导函数为 <b>(-1/2) * √(x^3 - 7x) * (3x^2-7)&nbsp;</b>令 x=4 代入求得 f 极限 = 41/12</div></div><div><br></div><div>&nbsp; &nbsp; <b>求解分段函数 |x^2-4| (x≤1) , -2x+5 (x&gt;1) 的导数</b></div><div>&nbsp; &nbsp; * 函数不连续，一定不可导</div><div>&nbsp; &nbsp; ：对于&nbsp;<b>|x^2-4| (x≤1) </b>有 x2-4 !(-2, 2) , 4-x2 (-2, 2)</div><div>&nbsp; &nbsp; ：与原式合并有 x2-4 (x≤-2) , 4-x2 (-2, 1] , 5-2x (x&gt;1) 三段分段函数</div><div>&nbsp; &nbsp; ：对于连接点 -2 和 1，需要证明函数在这两点上连续，即极限存在 且等于函数值</div><div>&nbsp; &nbsp; ：证明完连续后，需要证明导数存在，即左导数=右导数，（导数是特定公式的极限）</div><div><br></div><div><font color=\"#4169e1\"><b>关于乘积法则求导的理解&nbsp;</b></font></div><div>&nbsp; &nbsp; 导数是关于曲线上某点的，d→0时，极限变化率的值</div><div>&nbsp; &nbsp; 两条曲线相乘相当于矩阵的面积公式 S=xy</div><div>&nbsp; &nbsp; 求 S 的导数就相当于求 (x+dx)(y+dy) 时 (S+dS)&nbsp;</div><div>&nbsp; &nbsp; 根据画图可得 S+dS = xy + xdy + ydx +dxdy</div><div>&nbsp; &nbsp; 即 d→0，dS ≈ xdy + ydx，表示面积的极限变化率的公式</div><div><br></div><div><font color=\"#4169e1\"><b>求导的用途</b></font></div><div>&nbsp; &nbsp; A 已知曲线f，可以求得f上某点的斜率，再代入对应f值即可以得到切线方程</div><div>&nbsp; &nbsp; B 物理上求物体的瞬时速度(瞬时<font color=\"#4169e1\"><b>距离</b></font>变化率) v=d<font color=\"#4169e1\"><b>s</b></font>/dt，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 及其加速度(瞬时<font color=\"#4169e1\"><b>速度</b></font>变化率)&nbsp;a=d<font color=\"#4169e1\"><b>v</b></font>/dt=(ds)^2/dt^2</div><div><br></div><div><b>使用定义求 1/x 的导数</b></div><div>&nbsp; &nbsp; 有 d→0，(f(x+d)-f(x)) / d</div><div>&nbsp; &nbsp; 即 d→0，(1/(x+d)-1/x) / d</div><div>&nbsp; &nbsp; 化简后有 d→0，-1/[x(x+h)] 最终答案为 -1/x^2</div><div>&nbsp; &nbsp; 记为 d(1/x)/dx = -1/x^2</div><div><br></div><div><b>使用定义求 √x 的导数</b></div><div>&nbsp; &nbsp; 有 d→0，(f(x+d)-f(x)) / d</div><div>&nbsp; &nbsp; 即 d→0，(√(x+d)-√x) / d</div><div>&nbsp; &nbsp; 共轭化后 d→0，1/[√(x+d)+√x] 最终答案为 1/2√x</div><div><br></div><div><b>使用定义求 x^n 的导数</b><br></div><div><b>&nbsp; &nbsp;&nbsp;</b>有 d→0，(f(x+d)-f(x)) / d</div><div>&nbsp; &nbsp; 即 d→0，((x+d)^n-x^n) / d</div><div>&nbsp; &nbsp; 经过一系列对多项式分解的推导... 最终答案维 nx^(n-1)</div><div>&nbsp; &nbsp; 记为 d(x^a)/dx = ax^(a-1)</div><div><br></div><div>******************************************************</div><div><div><b>链式法则求 (x^2+1)^99 的导数</b></div><div>&nbsp; &nbsp; 根据法则 h' = (dy/du) * (du/dx)</div></div><div>&nbsp; &nbsp; 设置 u=x^2+1</div><div>&nbsp; &nbsp; 则 h' = 99u^98 * 2x</div><div><br></div><div><b>链式法则求 ((x^3-10x)^9+22)^99 的导数</b></div><div>&nbsp; &nbsp; 根据法则&nbsp;h'=(dy/du) * (du/dv) * (dv/dx)</div><div>&nbsp; &nbsp; 设 <font color=\"#4169e1\"><b>y</b></font>=u^99 / <font color=\"#4169e1\"><b>u</b></font>=v^9+22 / <font color=\"#4169e1\"><b>v</b></font>=x^3-10x</div><div>&nbsp; &nbsp; 则 h' = 99u^98 * 9v^8 * 3x^2-10</div><div>&nbsp; &nbsp; 经过一些列代入消元最终可得导数表达式</div>"
    },
    "o1sgQdjMN": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "o1sgQdjMN",
      "name": "7.三角函数的求极限和求导",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">考虑当 x→0 时，某些三角函数的极限</b><br></div><div><b style=\"\"><font color=\"#ff0000\">&nbsp; &nbsp; </font>证明 x→0，sinx/x = 1</b><div>&nbsp; &nbsp; ：想象一个半径为1的圆，x 为其角度，</div><div>&nbsp; &nbsp; ：可得该圆的面积为 π*1^2，即为 π，且x角所占面积为 x/2π*π，即 x/2</div><div>&nbsp; &nbsp; ：由于半径=1，则存在|AC| = sinx，|DB| = tanx&nbsp;</div><div>&nbsp; &nbsp; ：对于|AC| = sinx 可求 △OAB = 1*sinx/2&nbsp;</div><div>&nbsp; &nbsp; ：对于|DB| = tanx&nbsp;可求 △ODB = 1*tanx/2</div><div>&nbsp; &nbsp; ：由图形易得 S△OAB &lt; S扇形OAB &lt; S△OBD</div><div>&nbsp; &nbsp; ：最终即 0&lt;x&lt;π/2 时，sinx/2 &lt; x/2 &lt;&nbsp;tanx/2，</div><div>&nbsp; &nbsp; ：取倒数再乘以sinx，有 1 &gt; sinx/x &gt; cosx</div><div>&nbsp; &nbsp; ：根据夹逼定理 x→0 时，cosx = 1，证明完毕<b style=\"color: rgb(255, 0, 0);\">(重要)&nbsp;</b></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 当 x→0，x的任意连续函数都为0，即 sin(f)/f = 1 与 tan(f)/f = 1</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; *&nbsp;</b></font><font color=\"#4169e1\" style=\"\"><b>时刻考虑在三角函数中 x 通常代表角度</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * 同时也证明了&nbsp;</b></font><b style=\"color: rgb(65, 105, 225);\">x→0</b><font color=\"#4169e1\"><b>，tanx/x = 1</b></font></div><div><br></div><div>&nbsp; &nbsp; <b>求解 x→0, sin(5x)/x 的极限</b></div><div>&nbsp; &nbsp; ：由于不是有理函数 / 无法确定是连续函数，所以不能直接代入求解</div><div>&nbsp; &nbsp; ：化简得 [sin(5x) <b>/5x*5x</b>] / x</div><div>&nbsp; &nbsp; ：即最终极限为 sin(5x)/5x * 5 = 1</div><div><br></div><div>&nbsp; &nbsp; <b>求解 x→0，A=[sin(2x)]^3，B=cos(5x^19)，C=x*tan(5x^2)，AB/C 的极限</b></div><div>&nbsp; &nbsp; ：对于A，有 [sin(2x)<b>/2x*2x</b>]^3 即 8x^3</div><div>&nbsp; &nbsp; ：对于B，可以确定是连续函数，且 5x^19→0，即 1</div><div>&nbsp; &nbsp; ：对于C，有 x*[tan(5x^2)<b>/5x^2 *5x^2</b>]，即 x*5x^2</div><div>&nbsp; &nbsp; ：最终有 8x^3 / 5x^3 = 8/5&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b>求解 x→∞，x*sin(5/x) 的极限</b></div><div>&nbsp; &nbsp; ：当 x→∞，5/x→0</div><div>&nbsp; &nbsp; ：有 x*sin(5/x) <b>/(5/x) *(5/x)</b>，即 x*(5/x) = 5&nbsp;&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b>求解 x→0，(1-cosx)/x^2 的极限</b></div><div>&nbsp; &nbsp; ：有 原式 *(1+cosx)/(1+cosx) 即 (1-(cosx)^2) / x^2*(1+cosx)</div><div>&nbsp; &nbsp; ：即 (sinx/x)^2 * 1/(1+cosx) = 1/2&nbsp;</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b>求解 x→0，(1-cosx)/x 的极限&nbsp;</b><b style=\"color: rgb(255, 0, 0);\">(重要)&nbsp;</b></div><div>&nbsp; &nbsp; ：有 原式 *(1+cosx)/(1+cosx) 即 (1-(cosx)^2) / x*(1+cosx)</div><div>&nbsp; &nbsp; ：即 (sinx)^2 / x * 1/(1+cosx) = (sinx/x) * sinx * 1/(1+cosx)</div><div>&nbsp; &nbsp; ：即 1*0*1/2 = 0</div><div><font color=\"#ff0000\"><b><br></b></font></div><div><b style=\"color: rgb(255, 0, 0);\">考虑</b><font color=\"#ff0000\"><b>当 x→∞&nbsp;时</b></font><b style=\"color: rgb(255, 0, 0);\">，某些三角函数的极限</b><br></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font><b>证明 x→∞，sinx/x = 1</b></div></div><div>&nbsp; &nbsp; ：对于 sinx 有 -1 ≤ sinx&nbsp;≤ 1，且&nbsp;-1/x≤ sinx/x&nbsp;≤ 1/x</div><div>&nbsp; &nbsp; ：根据夹逼定理有&nbsp;x→∞，sinx/x = 0</div><div><br></div><div>&nbsp; &nbsp; <b>求&nbsp;x→∞，[x*sin(11x^7) -1/2] / 2x^4</b></div><div>&nbsp; &nbsp; ：易得 -1 ≤ sin(11x^7) ≤ 1</div><div>&nbsp; &nbsp; ：即有 -x-1/2 ≤ x*sin(11x^7)-1/2 ≤ x-1/2</div><div>&nbsp; &nbsp; ：即最终 (-x-1/2)/2x^4 ≤ 原式 ≤ (x-1/2)/2x^4</div><div>&nbsp; &nbsp; ：通过有理函数的极限求法，可得左右函数极限相等且为0</div><div>&nbsp; &nbsp; ：通过夹逼定理可知原式的极限为0</div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>*&nbsp;</b></font><font color=\"#4169e1\" style=\"\"><b>x→∞时，</b></font><b style=\"color: rgb(65, 105, 225);\">根据 -1 ≤ sin(x) ≤ 1 以及 cos(x) 的类似不等式</b></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * sin(*) 或 cos(*) 可以看做比x的任何正次幂↓</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 例如求有理函数的极限时，sin(*) cos(*) 无足轻重！</b></font></div><div>&nbsp; &nbsp; * 如求有理函数 [ 3x^2 +2x +5 +sin(3000x^9) ] / [ 2x^2-1-cos(22x) ]</div><div>&nbsp; &nbsp; ：根据x→∞时有理函数的求法，对分子/3x^2，对分母/2x^2</div><div>&nbsp; &nbsp; ：易得 ( 1+0+0+0 / 1-0-0 ) * 3x^2/2x^2 = 3/2</div><div><br></div><div>其他情况</div><div>&nbsp; &nbsp; 求 x→2/π，cos(x) / (x-π/2)</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 这时候应该将 t = x-2/π，x = t+2/π，当x→2/π，t→0</b></font></div><div>&nbsp; &nbsp; ：有 t→0，原式=cos(t+π/2)/t =-sin(t)/t =-1</div><div><br></div><div><font color=\"#ff0000\"><b>求三角函数的导数</b></font></div><div><b>&nbsp; &nbsp; 求解 sinx 的导数</b></div><div>&nbsp; &nbsp; ：求导数，即求 d→0，[ sin(x+d) - sinx ] / d</div><div>&nbsp; &nbsp; ：有 sin(A+B) = sinAcosB + sinBcosA</div><div>&nbsp; &nbsp; ：简化后最终有 d→0，sinx*(cosd-1/d) + cosx*sind/d</div><div>&nbsp; &nbsp; ：最终结论 <font color=\"#ff0000\"><b>*1 dsinx/dx = cosx *2 dcosx/dx = cosx</b></font>（链式法则）</div><div>&nbsp; &nbsp; ：直接可求 *3 dtanx/dx = 1/(cosx)^2 （商法则）</div><div>&nbsp; &nbsp;<font color=\"#4169e1\"><b> * 我们需要对更多的函数求导，牢牢记住如何使用乘积法则，商法则，链式求导法</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * 三角函数求导可以应用于简谐运动相关的计算</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; * 对于 x^2 * sin(1/x) 其是连续函数，且处处可导，但是导函数不连续！</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div><b>&nbsp; &nbsp; 求 secx 的导数</b></div><div>&nbsp; &nbsp; ：有 secx = 1/cosx 即求 d(1/cosx)/dx 的导数</div><div>&nbsp; &nbsp; ：令 u = cosx，dy/dx = dy/du * du/dx</div><div>&nbsp; &nbsp; ：则有 dy/du = -1/u2，du/dx = -sinx</div><div>&nbsp; &nbsp; ：即最终 sinx/(cosx)2 = tanx*secx</div>"
    },
    "eTGpYoY8a": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "eTGpYoY8a",
      "name": "基础",
      "content": "<div><div><div><b style=\"color: rgb(255, 0, 0);\">启动计算机</b></div><div>&nbsp; &nbsp; * 存在一块“主板(MotherBoard)”搭载了一个BIOS系统，即Basic IO System</div><div>&nbsp; &nbsp; * BIOS中含有底层IO软件，包括读写键盘/鼠标/屏幕输出及其其他过程</div><div>&nbsp; &nbsp; A 计算机启动时，BIOS开始运行，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 首先检查所有RAM，键盘鼠标等硬件是否已经安装且正常响应<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 允许用户选择从软盘/硬盘启动系统</div><div>&nbsp; &nbsp; B 加载并运行内存中的操作系统软件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 询问BIOS所有硬件的配置信息，驱动程序，最终调入计算机内核</div></div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">操作系统发展史</b><br></div><div>&nbsp; &nbsp; * 封装CPU指令库 提供常用服务 +&nbsp;<font color=\"#4169e1\"><b>操作员</b></font>&nbsp;= 按批处理程序</div><div>&nbsp; &nbsp; * 限制程序的访问权限：内核模式 / 用户模式</div><div>&nbsp; &nbsp; * 需要处理多个程序的并发问题</div></div><div>&nbsp; &nbsp; # 很明显一般程序员不想涉及硬件的具体编码，程序员需要更简单/更有高度的抽象</div><div>&nbsp; &nbsp; <font color=\"#ff0000\" style=\"\"># 作为应用层程序员，为合适的应用挑选合适的操作系统是必备技能&nbsp;&nbsp;</font></div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>操作系统分类</b></font><br></div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">1.大型机OS：</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 某些公司的数据中心 / 高端Web服务 / 大型电子商务服务站点 / 事务性交易系统</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 主要提供批处理服务（生成销售报告，保险公司索赔处理，需要巨大的IO能力）&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 事务处理服务（航班预订，酒店订单处理，业务量小，但是每秒必须处理上百万业务）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 分时处理服务（允许多个远程用户同时在计算机上运行作业）</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">2.服务器OS：</b>通过网络同时为若干用户提供服务</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">3.多处理器OS：</b>具有大量联合数据计算能力</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">4.个人计算机OS：</b>不多说</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">5.掌上计算机OS：</b>如数码相机等（Symbian OS / Plam OS）</div><div>&nbsp; &nbsp; <b style=\"color: rgb(65, 105, 225);\">* 嵌入式OS / 传感器OS / 实时OS / 智能卡OS</b>）&nbsp;</div><div><br></div><div><font color=\"#ff0000\"><b>系统调用</b></font></div><div>&nbsp; &nbsp; # OS为用户提供抽象并管理计算机资源，通常<font color=\"#ff0000\"><b>用户程序</b></font>和OS之间的主要交互就是处理抽象</div><div>&nbsp; &nbsp; # 我们需要仔细地分析OS提供的接口，及接口提供的调用</div><div>&nbsp; &nbsp; 1.进程管理调用</div><div>&nbsp; &nbsp; 2.文件管理调用</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">操作系统目标&nbsp;</b><br></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp; # 操作系统是进行系统调用的代码！</b></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp;&nbsp;</b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>1.取得CPU，内存，磁盘等物理资源进行虚拟化</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 程序并没有直接访问硬件，而是依靠<font color=\"#ff0000\"><b>OS软件</b></font>充当中间人</div><div>&nbsp; &nbsp; &nbsp; &nbsp; OS的一些方法是由操作系统内核源码（kernel）管理的，常驻在主存中</div><div>&nbsp; &nbsp; &nbsp; &nbsp; OS提供<font color=\"#4169e1\"><b>两个基本功能：</b></font>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1. 防止硬件被失控的软件滥用&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 多数计算机有两种运行模式：内核态模式 / 用户态模式&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 运行在<font color=\"#ff0000\"><b>内核态</b></font>模式中的软件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 如操作系统软件，具有对硬件的完全控制权，可以执行机器指令，为其他软件提供基础的运行环境</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 如用户接口程序，如Shell或GUI，允许用户运行其他程序&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 运行在<font color=\"#ff0000\"><b>用户态</b></font>模式中的软件，完全禁止对硬件的操作</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2. 向应用程序提供简单的抽象机制来控制复杂的硬件设备</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 用户与之交互的程序，基于文本的我们称为Shell程序，基于图形则称为GUI程序<b style=\"color: rgb(255, 0, 0);\">&nbsp;</b></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp;&nbsp;</b>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>2.操作系统抽象机制</b></font><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 抽象是管理复杂性的一个关键</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">进程抽象</b>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 抽象一个正在运行的程序生命周期，容纳程序运行所有信息</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 进程的存在仿佛多个运行的程序都独占了计算机，但实际上CPU通过进程切换（上下文切换）来模拟<font color=\"#ff0000\"><b>并发</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 执行的程序，操作系统会保持跟踪进程所需要的所有状态信息，其称为<font color=\"#ff0000\"><b>上下文&nbsp;</b></font>（包括寄存器信息，主存信息等）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 进程由多个可执行单元即<font color=\"#ff0000\"><b>线程</b></font>构成，共享同样的代码和全局数据</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 更快的程序速度：并发</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 我们能够设计出多个进程中的程序同时执行，即<font color=\"#4169e1\"><b>进程并发</b></font>的系统 我们甚至能在一个进程中进行<font color=\"#4169e1\"><b>线程并发</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通常并发是处理器通过进程切换来模拟实现的，这种系统成为单处理器系统</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 而至今我们已经能将多个CPU(核)集成到一个集成电路芯片上</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 用并发来使得系统提升运行速度：并行&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">地址空间与</b><font color=\"#4169e1\"><b>虚拟内存抽象</b></font>：&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 一般情况下一个进程可拥有的最大内存空间小于主存大小</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 极端情况下OS可以把部分地址空间载入主存，部分留在磁盘上，通过交换数据实现虚拟内存概念</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 抽象各级别存储器</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 虚拟内存的存在仿佛每个进程都单独地占用了主存，看到的内存都是一致的</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 虚拟内存由大量准确定义的区构成</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>1.程序代码/数据</b>：直接按照可执行文件的内容构建</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>2.运行时的堆</b>：在运行时动态扩展</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>&nbsp;3.共享库</b>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>4.用户的栈</b>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>5.内核虚拟内存</b>：为操作系统的内核保留的区域，不允许程序读写调用</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\" style=\"\"><b>文件抽象</b></font>：&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 抽象I/O过程，使其结果就是字节序列在存储器上读写</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 所有的计算机都有用于获取输入输出的硬件设备，对这些设备的管理全部依靠操作系统</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * 某些特定的I/O设备需要专业的设备驱动程序才能使用</div><div>&nbsp; &nbsp; ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━<br></div>"
    },
    "E6f1U1MOM": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "E6f1U1MOM",
      "name": "CPU抽象：进程/线程",
      "content": "<font color=\"#ff0000\"><b>进程概念</b></font><div>&nbsp; &nbsp; * 进程本质是某类活动，它具有活动的输入、输出以及状态</div><div>&nbsp; &nbsp; * 伪并行：严格来说，在某一瞬间，CPU只能运行一个进程，但是在1s周期内，它可以运行许多进程（）</div><div>&nbsp; &nbsp; * 多处理器系统：多个CPU共享同一个物理内存</div><div>&nbsp; &nbsp; * 每个进程有一个地址空间，和一个控制线程</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>进程的创建</b></font></div><div>&nbsp; &nbsp; * 在启动阶段创建线程（微波炉中的控制器）</div><div>&nbsp; &nbsp; * 在任意时段通过OS调用创建进程（如创建守护进程协助主进程完成任务）</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>进程的退出</b></font></div><div>&nbsp; &nbsp; * 正常/出错后自愿退出，严重错误/被其他进程非自愿Kill</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>进程的状态</b></font></div><div>&nbsp; &nbsp; * 就绪(可运行，但可能因为CPU被占用而暂时停止)，</div><div>&nbsp; &nbsp; * 运行(占用CPU)，</div><div>&nbsp; &nbsp; * 阻塞(需要外部事件)</div><div>&nbsp; &nbsp; * 终止(内存释放)</div><div>&nbsp; &nbsp; * 可以通过多道程序设计模型，来<font color=\"#ff0000\"><b>权衡是否增加内存</b></font>用于提升CPU利用率</div><div><br></div><div><font color=\"#ff0000\"><b>线程的概念</b></font></div><div>&nbsp; &nbsp; * 在一个进程的地址空间中，并行运行多个线程，是在模拟计算机中多进程的模型</div><div>&nbsp; &nbsp; * 多个线程共享同一个地址空间及其内存资源，多个进程共享物理内存，磁盘，打印机等</div><div>&nbsp; &nbsp; * 每个线程拥有自己的栈堆内存</div><div>&nbsp; &nbsp; * 线程的创建和销毁快于进程，特别适合某些场景（如文本自动保存等）</div><div>&nbsp; &nbsp; * 简单的单线程的Web服务器：主循环等待请求，在读取下一个请求前完成工作（特别慢！）</div><div>&nbsp; &nbsp; * 简单的多线程Web服务器：通过线程并行（输入线程/处理线程/输出线程）实现了高性能，能同时处理大量请求</div><div><br></div><div><font color=\"#ff0000\"><b>进程间通信 IPC</b></font></div><div>&nbsp; &nbsp; *&nbsp;Inter-Process Communication</div><div>&nbsp; &nbsp; * 竞争条件：协作的进程共享公用内存，导致公共数据混乱</div><div>&nbsp; &nbsp; * 程序片段临界区：对公用内存访问的程序片段称作临界区（互斥方案）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：两个进程不能同时处于临界区</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：不对CPU的数量和速度进行任何假设</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：临界区外的进程不得阻塞其他进程</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ： 不得使得进程无限期处于阻塞状态</div><div>&nbsp; &nbsp; * 通过 1屏蔽中断 <font color=\"#ff0000\"><b>2锁变量</b></font> 3严格轮换法 4Peterson解法 5TSL指令 等各种算法实现临界区阻塞</div><div><br></div><div><font color=\"#ff0000\"><b>进/线程调度</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>进程行为</b></font></div><div>&nbsp; &nbsp; * 在只有一个CPU的情况下，选择某个竞争中的进程/线程使用该CPU，称之为调度程序&nbsp;</div><div>&nbsp; &nbsp; * 当大量进程/线程等待外部设备完成I/O操作而被阻塞，称之为密集I/O行为&nbsp;</div><div>&nbsp; &nbsp; * 当大量进程/线程等待CPU的计算结果而被阻塞，称之为密集计算行为</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>何时调度</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>调度算法分类</b></font></div><div>&nbsp; &nbsp; * 批处理：通常在商业领域和其他周期性事务，允许长时间等待的事务中使用</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：抢占式先到先得</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：最短作业优先</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：剩余时间最短优先</div><div>&nbsp; &nbsp; * 交互式：常见的服务器，需要服务突发用户事务，快速处理请求</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：轮转调度</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：优先级调度</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：多级队列</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：最短进程优先</div><div>&nbsp; &nbsp; * 实时：和交互式类似，但具有长时间不间断提供服务特性</div><div><br></div><div><br></div><div><br></div><div><br></div>"
    },
    "J7Kzviuld": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "J7Kzviuld",
      "name": "通讯服务",
      "content": "<font color=\"#ff0000\"><b>ToC</b></font><div>&nbsp; &nbsp; 社交：微信QQ、FaceBook</div><div>&nbsp; &nbsp; 社区：朋友圈、微博、豆瓣、贴吧、论坛</div><div>&nbsp; &nbsp;&nbsp;</div><div><font color=\"#ff0000\"><b>ToB</b></font></div><div>&nbsp; &nbsp; 内部通讯：钉钉、企业微信</div><div>&nbsp; &nbsp; 外部社区：暂无</div><div><br></div><div>运营重点：人与人之间的关系</div>"
    },
    "_HLpiSdAB": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "_HLpiSdAB",
      "name": "电商服务",
      "content": "<font color=\"#ff0000\"><b>线上购物平台</b></font><div>&nbsp; &nbsp; 淘宝、京东、亚马孙</div><div><br></div><div><font color=\"#ff0000\"><b>线下服务平台</b></font></div><div>&nbsp; &nbsp; 美团、滴滴、链家</div><div><br></div><div><font color=\"#ff0000\"><b>运营重点</b></font><br>&nbsp; &nbsp; 上游供应链</div><div>&nbsp; &nbsp; 下游支付渠道</div><div>&nbsp; &nbsp; ToC物流 ToB物流</div><div>&nbsp; &nbsp; ToC售后&nbsp;ToB售后</div><div>&nbsp; &nbsp; ToC地推 ToB推广</div>"
    },
    "A1novetEZ": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "A1novetEZ",
      "name": "内容服务",
      "content": "<font color=\"#ff0000\"><b>线上资讯平台</b></font><div>&nbsp; &nbsp; 新闻：四大门户（新浪、搜狐、腾讯、网易）、今日头条、36氪等</div><div>&nbsp; &nbsp; 阅读：豆瓣阅读、Kindle、掌阅、微信读书</div><div>&nbsp; &nbsp; 音乐：网易云音乐、酷狗、酷我、虾米、各种 FM</div><div>&nbsp; &nbsp; 视频：爱奇艺、优酷土豆、乐视、A、B 站</div><div>&nbsp; &nbsp; * 点播模式</div><div><br></div><div><font color=\"#ff0000\"><b>运营重点</b></font></div><div>&nbsp; &nbsp; 版权、IP</div>"
    },
    "drkGJOHto": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "drkGJOHto",
      "name": "工具服务",
      "content": "<font color=\"#ff0000\"><b>线上工具站</b></font><div>&nbsp; &nbsp; 360、二维码、PDF、ExcelOnline</div><div><br></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><font color=\"#ff0000\"><b>运营重点</b></font></span></div><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">&nbsp; &nbsp; 效率导向，解决用户的某个需求</span><br></div>"
    },
    "0_ROmIxY0": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "0_ROmIxY0",
      "name": "游戏服务",
      "content": ""
    },
    "oaTIBOFBs": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "oaTIBOFBs",
      "name": "互联网+",
      "content": "<span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\"><font color=\"#ff0000\"><b>互联网与传统行业的结合</b></font></span><div><span class=\"RichText ztext CopyrightRichText-richText\" itemprop=\"text\">&nbsp; &nbsp;&nbsp;</span>互联网金融：宜人贷、花呗白条</div><div><br></div><div>&nbsp; &nbsp; 互联网医疗：丁香园，春雨医生，叮当快药等</div><div><br></div><div>&nbsp; &nbsp; 互联网旅游：携程、去哪儿、穷游等</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 有效提升了旅游业的智能化，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 例如，游客仅仅通过微信就可以实现购票、景区导览、规划路线等功能;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;购票后，微信将根据市民的购票信息，进行智能线路推送</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;微信电子二维码门票自助扫码过闸机，无需人工检票入园</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;很多人会选择自助游，自己订机票、酒店，安排行程</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;散客数的激增，在过去，传统旅行社靠批零差价以及提供信息和服务来赚取利润的方式受到了挑战</div>"
    },
    "ha_chTO8d": {
      "blockId": "YxnegsTMH",
      "shelfId": "KF98qAsO3",
      "bookId": "ha_chTO8d",
      "name": "当前流行的软件模式",
      "content": "<font color=\"#ff0000\"><b>SaaS</b></font><div><div>&nbsp; &nbsp;&nbsp;SaaS是Software-as-a-Service（软件即服务）的简称，即按需租用别人提供的软件服务</div><div>&nbsp; &nbsp;&nbsp;在客户还没有到来之前，软件提供公司就自己提服务器、数据库等硬件，把软件安装发布好，</div><div>&nbsp; &nbsp; 这样作为软件使用方的你就变得轻松很多，一上来就可以直接进行体验，</div><div>&nbsp; &nbsp; 体验之后，你觉得哪些功能合适你的，就挑选出来，按月支付比较低廉的费用就可以正式使用了。</div><div>&nbsp; &nbsp; 后续的升级、维护也由软件公司负责。</div></div><div><br></div><div><font color=\"#ff0000\"><b>CRM</b></font><br></div><div>&nbsp; &nbsp;&nbsp;CRM是英文Customer Relationship Management （客户关系管理）的简称</div><div>&nbsp; &nbsp;&nbsp;由客户信息管理、销售过程自动化（SFA）、</div><div>&nbsp; &nbsp; 营销自动化（MA）、客户服务与支持（CSS）管理、客户分析（CA）系统这5大主要功能模块组成。</div><div>&nbsp; &nbsp;&nbsp;CRM系统特别是移动CRM系统能帮助你及你的同事很方便地记录客户信息、跟踪分析新老客户、挖掘潜在客户。</div><div><br></div><div><font color=\"#ff0000\"><b>OA</b></font><br></div><div>&nbsp; &nbsp;&nbsp;OA是Office Automation（办公自动化）的简称</div><div>&nbsp; &nbsp;&nbsp;现在大都数公司都把OA系统定义为企业内部的协作沟通系统，</div><div>&nbsp; &nbsp; 一般提供的功能有流程审批（请假报销等）、即时沟通、文档管理、</div><div>&nbsp; &nbsp; 内部论坛、任务管理、会议管理、通讯录、问卷调查等。</div><div><br></div><div><font color=\"#ff0000\"><b>ERP</b></font><br></div><div>&nbsp; &nbsp;&nbsp;ERP是Enterprise Resource Planning（企业资源计划）的简称</div><div>&nbsp; &nbsp;&nbsp;比如员工、生产、制造、财务、销售、采购、仓储、分销、质量等等，</div><div>&nbsp; &nbsp; 只要是用于企业管理的软件都属于ERP的范畴。</div><div>&nbsp; &nbsp;&nbsp;行业内人们为了做区分，一般把功能比较全面（往往包含从原料到生产到仓储到销售一系列）</div><div>&nbsp; &nbsp; 的偏生产制造的管理系统才定义为ERP系统，</div><div>&nbsp; &nbsp; 而其中某项细分功能的系统虽然原则上属于ERP，但一般不称为ERP。</div><div><br></div><div><font color=\"#ff0000\"><b>进销存</b></font></div><div>&nbsp; &nbsp; 进销存是指企业管理过程中采购（进货）→入库（库存）→销售（销货）的三个管理过程。</div><div>&nbsp; &nbsp; 这三个过程是一般企业特别是中小商户的核心经营过程，</div><div>&nbsp; &nbsp; 用来管理这三个过程的系统就是进销存系统，简称进销存。</div><div><br></div><div><font color=\"#ff0000\"><b>财务系统</b></font></div><div>&nbsp; &nbsp; 财务系统是指专门用于完成会计工作的管理系统。</div><div>&nbsp; &nbsp; 财务系统一般包含：总账管理、固定资产管理、资金管理、</div><div>&nbsp; &nbsp; 客户及应收应付管理、报表管理、财务分析、核算系统等。</div>"
    },
    "O4NfS3uv_": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "O4NfS3uv_",
      "name": "存储器抽象",
      "content": "<div><font color=\"#ff0000\"><b>概念</b></font></div><div>&nbsp; &nbsp; * 操作系统通过\"分层存储器体系\"抽象为一个有用的模型进行管理</div><div>&nbsp; &nbsp; * 有效地管理内存，记录空闲/占用状态的内存，为进程分配/释放内存</div><font color=\"#ff0000\"><b>无存储抽象</b></font><div>&nbsp; &nbsp; * 每个程序直接访问物理内存，每次只能运行一个程序，且容易造成内存错乱</div><div>&nbsp; &nbsp; * 如果用户可以寻址内存的每一个地址，它们可以容易地破坏操作系统<br><div><font color=\"#ff0000\"><b>地址空间抽象</b></font>&nbsp;</div><div>&nbsp; &nbsp; * 操作系统必须处理动态内存分配，来应对编程语言的动态内存扩展</div><div>&nbsp; &nbsp; * 如电话号码开头的区号，互联网域名系统等</div><div>&nbsp; &nbsp; * 通过磁盘与RAM交换策略，来处理内存超载</div><div><font color=\"#ff0000\"><b>虚拟内存</b></font></div><div>&nbsp; &nbsp; * 某些计算领域使用<font color=\"#4169e1\"><b>交换技术</b></font>来处理程序大小超出RAM内存大小的问题</div><div>&nbsp; &nbsp; * 虚拟内存的基本思想</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：每个程序拥有自己的地址空间，将其分为<font color=\"#4169e1\"><b>同等大小的多个页</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：使用<font color=\"#4169e1\"><b>分段思想</b></font>处理程序可能出现的动态增长的内存需求</div><div>&nbsp; &nbsp; * 并不是所有页都在内存中程序才能运行</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：虚拟地址到物理地址必须非常快速</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：虚拟地址空间很大，页表也会很大</div><div>&nbsp; &nbsp; * 当发生缺页中断时候，需要进行分页置换，将内存中的页面和物理内存中的最新页面交换</div></div>"
    },
    "9kN0JSMu6": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "9kN0JSMu6",
      "name": "文件系统抽象",
      "content": "<font color=\"#ff0000\"><b>概念</b></font><div>&nbsp; &nbsp; * 信息的长期存储必须满足三大条件</div><div>&nbsp; &nbsp; ：能够存储大量信息</div><div>&nbsp; &nbsp; ：使用信息的进程终止时，信息依旧存在</div><div>&nbsp; &nbsp; ：必须能使多个进程并发存取有关信息</div><div>&nbsp; &nbsp; * 文件的要素&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.文件名/拓展名&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.文件结构：传统字节序列/记录序列/记录树</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 3.文件类型：内容文件/可执行文件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 4.文件的存取：顺序/随机存储</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 5.文件的属性：只读未读/大小等</div><div>&nbsp; &nbsp; * 文件调用：CRUD</div><div><br></div><div><font color=\"#ff0000\"><b>目录</b></font></div><div>&nbsp; &nbsp; * 通常使用层次目录系统（树）来管理文件</div>"
    },
    "7H-CKprXM": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "7H-CKprXM",
      "name": "支持多媒体",
      "content": "<font color=\"#ff0000\"><b>视频编码：</b></font><div>&nbsp; &nbsp; * 人眼的视网膜将保持几毫秒的最后可见图像，因此每秒50帧以上的连续图像就像是运动着一样</div><div>&nbsp; &nbsp; * 视频压缩技术</div><div>&nbsp; &nbsp; ：逐帧 JPEG：Joint Photographic Experts Group 联合摄影专家组</div><div><br><div><font color=\"#ff0000\"><b>音频编码：</b></font></div></div><div>&nbsp; &nbsp; * 人耳根据鼓膜振动产生的神经脉冲定义为声音</div><div>&nbsp; &nbsp; * 音频将麦克风的振动保存为依据时间的电信号函数，最终转化为二进制</div><div>&nbsp; &nbsp; ：音频压缩：波形编码-傅立叶变换，感知编码-心理声学</div>"
    },
    "JtiW_Zpbp": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "JtiW_Zpbp",
      "name": "支持I/O",
      "content": ""
    },
    "6qnnVxjQJ": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "6qnnVxjQJ",
      "name": "多处理机模式",
      "content": ""
    },
    "2QX0LqAmm": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "2QX0LqAmm",
      "name": "Linux",
      "content": ""
    },
    "xfDhyEg_J": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "xfDhyEg_J",
      "name": "Windows",
      "content": ""
    },
    "UEj6d3gBE": {
      "blockId": "U2EWIATls",
      "shelfId": "rWmTUaczK",
      "bookId": "UEj6d3gBE",
      "name": "Symbian",
      "content": ""
    },
    "fNnOS_PF5": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "fNnOS_PF5",
      "name": "语言介绍",
      "content": "<div><div><b style=\"color: rgb(255, 0, 0);\">JavaScript发展</b></div><div>&nbsp; &nbsp; 1995</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * JavaScript（Ecma Script）诞生，使用<font color=\"#4169e1\"><b>解释器</b></font>逐行编译代码</div><div>&nbsp; &nbsp; 2008</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * Google开发V8添加<font color=\"#4169e1\"><b>及时编译器</b></font>（JITs：Just in Time），大幅提升浏览器性能</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * NodeJS，Electron&nbsp;运行环境成为可能</div><div>&nbsp; &nbsp; 2013</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 诞生强类型语言提升性能</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 二次转译为 JavaScript：TypeScript (MS)，Dart (Google)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ** 添加JavaScript语法拓展：Asm.js (Mozilla)</div><div>&nbsp; &nbsp; 2017</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 将所有强类型语言编译为&nbsp;WebAssembly（MS，Google，Mozilla，Apple）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 业务逻辑调试困难 / 无法操作DOM</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;适合数据密集型计算</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * \"Web领域的汇编语言\"</div></div><div>&nbsp; &nbsp;&nbsp;<b>核心</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; * 满足浏览器产品的各种需求，如早期的表单验证</b></div><div><b>&nbsp; &nbsp;&nbsp;</b><b>宿主环境</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; * 需要提供基础的ECMAScript语法标准</b></div><div><b>&nbsp; &nbsp; &nbsp; &nbsp; * 额外提供环境交互API，如DOM对象模型，BOM对象模型</b>&nbsp;</div><div><b style=\"color: rgb(255, 0, 0);\"><br></b></div><div><b style=\"color: rgb(255, 0, 0);\">ES6</b></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp; *&nbsp;</b></font>不同版本的引擎支持不同的高级语法</div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font><font color=\"#4169e1\"><b>声</b></font><font color=\"#4169e1\"><b>明变量</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * var 在全局范围内有效</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * let 只在 let 命令所在的代码块内有效 不存在预处理:会产生报错</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * const 声明一个只读的常量，一旦声明，常量的值就不能改变。</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>解构式赋值</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;快速根据 数组及对象&nbsp;中的值进行变量声明</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;let [] / {} = Array/Object</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;<b>剩余运算符 ...args</b></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>新增内建对象：</b></font>* Symbol / Set / Map</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>箭头函数：()=&gt;{}&nbsp;</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font>因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 模板字符串：`字符串+${变量}`</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 简洁声明对象/方法：{var} / name(){}</b></font></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>模块化：</b></font>export import&nbsp;模块化&nbsp;use '<span class=\"marked\">strict</span>' 严格模式</div><div><br></div><div><div><b><font color=\"#ff0000\">参考文章</font></b></div><div>&nbsp; &nbsp; 1.几张图让你看懂 WebAssembly</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;https://www.jianshu.com/p/bff8aa23fe4d</div></div><div>&nbsp; &nbsp; 2.如何评论浏览器最新的 WebAssembly 字节码技术？</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;https://www.zhihu.com/question/31415286</div>"
    },
    "IKEdhr-kM": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "IKEdhr-kM",
      "name": "基础数据类型",
      "content": "<div><font color=\"#ff0000\"><b>基础数据&nbsp;</b></font></div><div>&nbsp; &nbsp; 1.undefined：undefined（变量默认值）</div><div>&nbsp; &nbsp; 2.null：object</div><div>&nbsp; &nbsp; 3.数字 123 或 NaN：number</div><div>&nbsp; &nbsp; 4.字符串“”：string：包含特殊转义字符如\\n等</div><div>&nbsp; &nbsp; 5.true/false：boolean</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp;&nbsp;</b></font><b>* 本质是内存代表的值保存在栈中</b></div>"
    },
    "KRVTywxz0": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "KRVTywxz0",
      "name": "关键字 | 语法糖",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">判断类型</b><br></div><div><div>&nbsp; &nbsp; * typeof null：object</div>&nbsp; &nbsp; * ES标准中判断语句存在自动数据转换（'' = false）<div>&nbsp; &nbsp; * target instanceof suppose：返回a是否是B构造函数的实例</div><div><div>&nbsp; &nbsp; Any.toString()/String(*)：返回<font color=\"#4169e1\"><b>字符串</b></font><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div>&nbsp; &nbsp; Number()/parseInt/Float(): 先转换成字符串: 从头逐字符取出有效数字并返回<font color=\"#4169e1\"><b>数字</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>使用关键字声明变量</b></font></div><div><b>&nbsp; &nbsp;&nbsp;</b>全局变量 不需要关键字</div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp;&nbsp;</b>局部变量&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>var </b></font>没有代码块概念（如循环外能访问循环内变量）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 所有 var 变量存在变量提升，且占用同一个公共作用域</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>let</b></font>（ES6）创建了本次代码块作用域</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 不存在变量提升 不能重复声明</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>const</b></font>（ES6）一般用于设置常量，必须初始化且不允许更改</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;* const 本质：在特殊时间保存特定值的索引</div></div></div><div><br></div><div><font color=\"#ff0000\"><b>解构语法( ES6 )</b></font></div><div>&nbsp; &nbsp; 解构数组：let [a] = [1, 2, 3]; // a=1;</div>&nbsp; &nbsp; 解构剩余变量：let&nbsp;[a, ...b]&nbsp;= [1, 2, 3]; // b = [2, 3]<div>&nbsp; &nbsp; 解构哈希表：let { a, b } = {a:1, b:2 , c:3}; // a=1, b=2;</div><div><br></div><div><font color=\"#ff0000\"><b>模块化( ES6 )</b></font></div><div>&nbsp; &nbsp;&nbsp;CommonJS和AMD的环境里都有一个 module.exports 变量</div><div>&nbsp; &nbsp; ES6 中支持 import / export 语法替代 exports</div>"
    },
    "hmbilmQIN": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "hmbilmQIN",
      "name": "结构体",
      "content": "<div><div><div><div><font color=\"#ff0000\"><b>JavaScript代码执行</b></font></div><span class=\"hl-code\"></span><span class=\"hl-brackets\"></span><div>&nbsp; &nbsp; 函数的五种场景</div></div><div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;回调函数(&nbsp;如计时器 )被执行：this&nbsp;指向&nbsp;window，undefined（严格模式）</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 对象执行内部方法：this 指向对象本身</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 路人执行他人方法：this&nbsp;指向路人</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 立即调用：function.<font color=\"#ff0000\"><b>apply</b></font>(&nbsp;target,&nbsp;<font color=\"#4169e1\"><b>[arg1, arg2]</b></font>&nbsp;)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 立即调用：function.<font color=\"#ff0000\"><b>call</b></font>(&nbsp;target,&nbsp;<font color=\"#4169e1\"><b>arg1, arg2</b></font>&nbsp;) //&nbsp;apply&nbsp;的语法糖</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 返回新方法：function.<font color=\"#ff0000\"><b>bind</b></font>( target&nbsp;)：</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;创建对象实例执行构造方法：this&nbsp;指向实例</div><div>&nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;箭头函数执行：this&nbsp;等同于父作用域的&nbsp;this</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>*&nbsp;优先级依次上升</b></div><div><br></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>* 对象分类</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 宿主(运行环境)对象 DOM/BOM/OS</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 自定义对象：构造函数实例</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>内建对象</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 通常&nbsp;</b></font>* String Array Number Boolean Date Math RegExp</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>ES6新增&nbsp;</b></font>* Symbol Set Map Promise</div></div></div><div><b>&nbsp;</b></div><div><b style=\"color: rgb(255, 0, 0);\">使用关键字声明函数</b></div>&nbsp; &nbsp; * 不存在函数重载<div><b>&nbsp; &nbsp;&nbsp;</b>* 函数体内可以通过 arguments伪对象 来访问参数数组</div><div><br></div><div><font color=\"#ff0000\"><b>创建对象</b></font></div></div><div>&nbsp; &nbsp; * 对象分类：宿主对象 / 内建对象 / 自定义对象(构造函数)<br><div>&nbsp; &nbsp; * 使用关键字 new 创建对象：划分实例内存 /&nbsp;this指向实例内存 /&nbsp;执行构造函数 /&nbsp;返回新对象指针</div><div>&nbsp; &nbsp; *&nbsp;通常使用&nbsp;for in 遍历对象值键对</div><div>&nbsp; &nbsp; * ES6 class&nbsp;本质是语法糖</div><div>&nbsp; &nbsp; &nbsp; &nbsp; extends / static / constructor / 子类构造方法必须出现 super():&nbsp;</div>&nbsp; &nbsp; -----------------------------------------------------------------<div>&nbsp; &nbsp; # 不推荐 直接创建&nbsp;<b style=\"color: rgb(255, 0, 0);\">根Object&nbsp;</b>的实例 a = {} / new Object()</div><div>&nbsp; &nbsp; # 推荐 通过原型链特性创建对象实例：声明大写首字母构造函数，在原型区放置公共方法</div></div><div><br></div><div><div><div><font color=\"#ff0000\"><b>原型/构造链</b></font><br></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>1.原型链&nbsp;</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>* JS没有公共类的概念，为了实现对象的继承功能</div><div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b><font color=\"#4169e1\">实例&nbsp;</font></b>__proto__ =&nbsp;<font color=\"#4169e1\"><b>根Object实例</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">构造函数内存&nbsp;</b>prototype =&nbsp;<b style=\"color: rgb(65, 105, 225);\">根Object实例</b></div></div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">根Object实例&nbsp;</b>__proto__ =&nbsp;<font color=\"#ff0000\"><b>所有对象根Object构造函数</b></font></div></div><div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>2.构造链</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; 实例</b></font><font color=\"#4169e1\"><b>&nbsp;</b></font>constructor =<font color=\"#4169e1\"><b>&nbsp;构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font><font color=\"#4169e1\"><b>构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b><font color=\"#4169e1\"><b>&nbsp;</b></font>constructor =&nbsp;<b style=\"color: rgb(65, 105, 225);\">Function</b><font color=\"#4169e1\"><b>构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b></div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b><b style=\"color: rgb(65, 105, 225);\">Function</b><font color=\"#4169e1\"><b>构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b><b style=\"color: rgb(65, 105, 225);\">&nbsp;</b>constructor =&nbsp;<b style=\"color: rgb(65, 105, 225);\">Function</b><font color=\"#4169e1\"><b>构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b></div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b><b style=\"color: rgb(65, 105, 225);\">根Object实例&nbsp;</b>constructor =&nbsp;<font color=\"#4169e1\"><b>构造函数</b></font><b style=\"color: rgb(65, 105, 225);\">内存</b></div></div></div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><font color=\"#ff0000\"><b>闭包</b></font></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>闭包产生</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font><b># 某个函数与某个引用环境存在引用关系，闭包指这个引用环境中的(自由)变量集合</b></div><div><span style=\"white-space: pre;\">\t</span>1.存在嵌套的外部函数 - 内部函数</div><div><span style=\"white-space: pre;\">\t</span>2.内部函数调用了外部函数的变量</div><div><span style=\"white-space: pre;\">\t</span>3.内部函数被<b>外部变量</b>引用且执行，即内部函数执行(闭包产生)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 外部变量没被销毁=内部函数没被销毁=外部函数没被销毁</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 外部变量是在内部函数预加载时被引用的 =&nbsp;<b>闭包产生</b></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>闭包用途</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.匿名函数自调用,把相关数据暴露给window.模块名</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 2.可以根据模块名直接使用相关数据</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function foo() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>var x = 3;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; function a(){return x++;}</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>return a;</div><div><span style=\"white-space: pre;\">\t\t</span>}</div><div><span style=\"white-space: pre;\">\t\t</span>var m = foo();</div><div><span style=\"white-space: pre;\">\t\t</span># 全局引用foo(已经执行)/导致函数a不消失/导致变量x不消失</div></div></div>"
    },
    "NXmpuoiLq": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "NXmpuoiLq",
      "name": "内置Lib",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">Object</b><br></div><div><font color=\"#ff0000\"><b>&nbsp; &nbsp;&nbsp;</b></font>对象的key只能是 Symbol/String</div><div>&nbsp; &nbsp; 数组 Object.keys(obj)</div><div>&nbsp; &nbsp; 键数组 Object.keys(obj)</div><div>&nbsp; &nbsp; 值数组 Object.values(obj)</div><div>&nbsp; &nbsp; 值键对二维数组 Object.entries(obj)</div><div>&nbsp; &nbsp; 遍历：for in&nbsp;循环</div><div>&nbsp; &nbsp; # 判断对象为空 JSON.stringfy()==={} || Object.keys(obj).length===0</div><div><br></div><div><b style=\"color: rgb(255, 0, 0);\">String</b><br></div><div><div>&nbsp; &nbsp; 合并：concat()</div><div>&nbsp; &nbsp; 截取：slice(statr, end之前) / substring(statr, end之前)</div><div>&nbsp; &nbsp; 获取下标：indexOf()/lastIndexOf()</div><div>&nbsp; &nbsp; 查询：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; charAt(index)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; match()<span style=\"white-space: pre;\">\t</span>找到一个或多个正则表达式的匹配。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; replace()<span style=\"white-space: pre;\">\t</span>替换与正则表达式匹配的子串。</div><div>&nbsp; &nbsp; &nbsp; &nbsp; search()<span style=\"white-space: pre;\">\t</span>检索与正则表达式相匹配的值。</div><div>&nbsp; &nbsp; 转换为数组：split(分隔符)</div><div>&nbsp; &nbsp; 新字符串：String(ins): String / Object.toString(): 返回新字符串, undefined/null 报错</div></div><div><br></div><div><font color=\"#4169e1\"><b>ES6 Symbol（不是对象，而是基础值）</b></font></div><div><div><span style=\"white-space: pre;\">\t</span>* 标识唯一的值 - 解决：字符串不具有唯一性</div><div><span style=\"white-space: pre;\">\t</span>1.单例模式 const NAME = Symbol('name')</div><div><span style=\"white-space: pre;\">\t</span>2.键声明</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Symbol.for('tar'):全局搜索/若无则新建</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Symbol.keyFor('tar'):全局键搜索</div></div><div><br></div><b style=\"color: rgb(255, 0, 0);\">Array</b><div><div>&nbsp; &nbsp; push()<span style=\"white-space: pre;\">\t</span>向数组的末尾添加一个或更多元素，并返回新的长度</div><div>&nbsp; &nbsp; pop()<span style=\"white-space: pre;\">\t</span>删除并返回数组的最后一个元素<br></div><div>&nbsp; &nbsp; unshift() 向数组头插入元素</div>&nbsp; &nbsp; shift()<span style=\"white-space: pre;\">\t</span>删除并返回数组的第一个元素<div><span style=\"white-space: pre;\">\t</span>--------------------------</div><div>&nbsp; &nbsp; 合并：A.concat(B)</div><div>&nbsp; &nbsp; 截取 slice(start, end之前)</div><div>&nbsp; &nbsp; 替换 splice(start, 删除num个数, '新元素')</div><div>&nbsp; &nbsp; 带分隔符的字符串：join(分隔符)</div><div><span style=\"white-space: pre;\">\t</span>--------------------------</div><div>&nbsp; &nbsp; 排序：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; reverse()<span style=\"white-space: pre;\">\t</span>颠倒数组中元素的顺序</div><div>&nbsp; &nbsp; &nbsp; &nbsp; sort(compare) 默认排序顺序是根据字符串UniCode码</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 需要传参 function compare(start,end){ return start-end // 升序 }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 对象排序</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function compare(e){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return function(start,end){ return start[e]-end[e] }}</div><div><span style=\"white-space: pre;\">\t</span>--------------------------</div><div>&nbsp; &nbsp; 遍历</div><div>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>arr.forEach(function(item,index,thisArr){ console.log(item) })</div><div><br></div><div><font color=\"#ff0000\"><b>Date</b></font></div><div>&nbsp; &nbsp; now()：mills</div><div>&nbsp; &nbsp; parse( string ): mills</div><div><br></div><div><font color=\"#4169e1\"><b>ES6 Set</b></font></div><div><div><span style=\"white-space: pre;\">\t</span>新建 new Set( Array/String )：转换为&nbsp;key:number&nbsp;的 Object</div><div><span style=\"white-space: pre;\">\t</span>增加 set.add(value)</div><div><span style=\"white-space: pre;\">\t</span>长度 size</div><div><span style=\"white-space: pre;\">\t</span>--------------------------</div><div><span style=\"white-space: pre;\">\t</span>数组 let arr = [...mySet] //&nbsp;返回新数组</div><div><span style=\"white-space: pre;\">\t</span>--------------------------</div><div><span style=\"white-space: pre;\">\t</span>并集 new Set([...a, ...b])</div><div><span style=\"white-space: pre;\">\t</span>交集 new Set([...a].filter(x =&gt; b.has(x)))</div><div><span style=\"white-space: pre;\">\t</span>差集 new Set([...a].filter(x =&gt; !b.has(x)))</div></div><div><br></div><div><font color=\"#4169e1\"><b>ES6 Map</b></font></div><div><span style=\"white-space: pre;\">\t</span>克隆/合并 new Map(oldMap)<div><span style=\"white-space: pre;\">\t</span>新建 new Map(二维数组)</div><div><span style=\"white-space: pre;\">\t</span>增加 map.set(key,value)</div><div><span style=\"white-space: pre;\">\t</span>删除 map.delete(key)</div><div><span style=\"white-space: pre;\">\t</span>长度 size</div><div>&nbsp; &nbsp; 遍历</div><div>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span># 按插入顺序输出</div><div>&nbsp; &nbsp;&nbsp;<span style=\"white-space: pre;\">\t</span>for of&nbsp;循环 / forEach( (value,key)=&gt;{}, map )</div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><b style=\"color: rgb(65, 105, 225);\">ES6 Promise</b></div></div></div>"
    },
    "71dceCdI6": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "71dceCdI6",
      "name": "前端生态圈",
      "content": "<div><font color=\"#4169e1\"><b>1.传统网站开发</b></font></div><div><br></div><div>&nbsp; &nbsp; 通常是一套代码进行样式适配，再部署到 PC / Mobile 不同平台，最后通过浏览器软件进行访问&nbsp; &nbsp;</div><div><br></div><div><font color=\"#4169e1\"><b>2.移动端开发</b></font></div><div><br></div><div>&nbsp; &nbsp; Native APP (原生APP)</div><div>&nbsp; &nbsp; - Android：Java / IOS：Object-C/Swift 等</div><div><br></div><div>&nbsp; &nbsp; Hybrid APP (混合开发)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 是一种用Native技术来搭建本地Web环境，内容主要通过Web技术来提供的移动应用</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 主要开发技术</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - Uni-App：自研Wxs技术降低视图层与语言引擎通信耗损</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - React-Native：JavaScript引擎，不同平台需要不同UI</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - Flutter：Dart引擎，是纯粹的渲染引擎，简单、高性能，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 但由于Dart语法使得维护性/代码可读性很差，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 不支持动态热更新，不同平台需要不同UI</div><div><br></div><div><font color=\"#4169e1\"><b>3.客户端开发</b></font></div><div>&nbsp; &nbsp; Electron（@github）原来叫 Atom Shell</div><div><br></div><div><font color=\"#ff0000\"><b>参考文章</b></font></div><div>&nbsp; &nbsp; Flutter、React-Native、Uni-App比较：https://ask.dcloud.net.cn/article/36083</div>"
    },
    "a-ubrGTWv": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "a-ubrGTWv",
      "name": "（JS应用）DOM",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">HTML / H5</b><br></div><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp;&nbsp;</b></div><div><b style=\"color: rgb(255, 0, 0);\">DOM</b><br></div><div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>基本常识</b></font></div><div><span style=\"white-space: pre;\">\t</span>页面以结点Node为基本组成单位</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 结点类型&nbsp;nodeType</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 文档结点(document)：9&nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 元素结点(标签)：1</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - Attribute属性结点：2&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -TextNode文字结点：3</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.element可以直接调用结点的基本属性</div><div>&nbsp; &nbsp; &nbsp; &nbsp; document.element.nodeName/nodeType/nodeValue:元素基本值</div><div>&nbsp; &nbsp; &nbsp; &nbsp; # innerHTML返回串中含标签/innerText不含标签</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>获取结点</b></font></div><div><span style=\"white-space: pre;\">\t</span>getElementById()</div><div><span style=\"white-space: pre;\">\t</span>getElementsByName/ClassName/TagName()：集合</div><div><span style=\"white-space: pre;\">\t</span># 必须在document下进行查找(TagName除外)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; querySelector(“css字符串”)：只会返回第一个符合结点</div><div>&nbsp; &nbsp; &nbsp; &nbsp; querySelectorAll(“css字符串”)：返回数组</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 父节点：parentNode</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 子结点：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first/last/parentElementChild</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; previous/nextElementSibling</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; children：集合</div><div>&nbsp; &nbsp; &nbsp; &nbsp; hasChildNodes()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; # 以下查询有可能返回字符结点(如空白字符)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; first/last/parentChild</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; previous/nextSibling</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; childNodes</div><div>&nbsp; &nbsp;<font color=\"#4169e1\"><b>&nbsp;编辑结点</b></font></div><div><span style=\"white-space: pre;\">\t</span>修改：createElement(\"\") / appendChild / insertBefore(新，旧)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 删除：e.parentNode.removeChild(e)：需要找出父元素</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 样式修改：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Window.getComputedStyle(node,null) : obj : 只读</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e.currentStyle.样式//仅仅IE支持</div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; .style.cssText = {display:bolck;...}</div><div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 结点事件属性</b></font></div><div><font color=\"#4169e1\" style=\"font-weight: bold;\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font><font color=\"#ff0000\"><b>绑定事件</b></font></div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp;- onclick / onscroll / onmouseover / onmousewheel(wheelDelta:滚动方向 )</div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; &nbsp;- 可以为DOM事件设置监听函数</div><div><span style=\"white-space: pre;\">\t</span>&nbsp;<span style=\"white-space: pre;\">\t</span>1. e.onclick = function(event){}</div><div><span style=\"white-space: pre;\">\t</span>&nbsp;<span style=\"white-space: pre;\">\t</span>2. target.addEventListener(\"onclick\",fun,是否在捕获阶段触发//0)</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>事件</b></font><b style=\"color: rgb(255, 0, 0);\">捕获/</b><b style=\"color: rgb(255, 0, 0);\">冒泡</b></div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; *&nbsp;捕获：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;需要手动开启</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 从文档的根结点 -&gt;&nbsp;目标结点：沿途触发所有存在的相同事件，建立传播途径</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; *&nbsp;冒泡：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 从目标结点 -&gt;&nbsp;文档根结点：沿途触发所有存在的相同事件</div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 阻止事件传播：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * event.stopPropagation()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * e.preventDefault()</div><span style=\"font-family: 宋体;\"></span><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * event.cancelBubble = true（IE）<div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#ff0000\"><b>事件委派</b></font>：</div><div><span style=\"white-space: pre;\">\t</span>&nbsp; &nbsp; # 利用事件冒泡,只绑定一次监听函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.在共同父元素上设置响应函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - 由于子元素和父元素有共同的响应事件，所以不用循环为子元素绑定监听函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.if(event.target.class==\"目标\"){监听函数}</div></div></div></div>"
    },
    "sISqVvhu7": {
      "blockId": "DCgJdlX5R",
      "shelfId": "D-CDKmCae",
      "bookId": "sISqVvhu7",
      "name": "（JS应用）BOM",
      "content": "<div><div><div>&nbsp;<b style=\"color: rgb(255, 0, 0);\">BOM</b></div></div></div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>window</b></font>：窗口/网页全局对象</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;<font color=\"#4169e1\"><b>Location：文档URL</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 定时器方法</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * setTimeout/setInterval(expression,time)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * clearTimeout/Interval(timer)</div></div>"
    },
    "y0ktycfYb": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "y0ktycfYb",
      "name": "(总结) Promise实现",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">目标：异步函数链式调用</b><br></div><div><b style=\"color: rgb(255, 0, 0);\"><br></b></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">* Promise( async )：</font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font>- 声明</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp; A：data</b></font></div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>B：</b></font><font color=\"#4169e1\"><b>then微任务队列</b></font>，<div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>C：</b></font><b style=\"color: rgb(65, 105, 225);\">微</b><b style=\"color: rgb(65, 105, 225);\">任务队列执行方法</b></div><div>&nbsp; &nbsp; - 执行传入的<span style=\"color: rgb(255, 0, 0); font-weight: 700;\">async</span>，通过<font color=\"#4169e1\"><b>&nbsp;C&nbsp;</b></font>执行所有微任务</div><div><br></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">*&nbsp;then(&nbsp;</font><font color=\"#4169e1\"><b>queueHandle</b></font><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp;)</font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font>-&nbsp;返回新Promise(&nbsp;<font color=\"#4169e1\"><b>queueHandle</b></font><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp;</font>)</div><div><br></div><div>*&nbsp;执行步骤</div><div><br></div><div>&nbsp; &nbsp; 1.构建Promise( async )</div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;async 同步代码执行<div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;async&nbsp;异步代码进入 V8异步队列<font color=\"#4169e1\"><b>（1）</b></font></div><div><font color=\"#4169e1\"><b><br></b></font></div><div>&nbsp; &nbsp; 2.执行 then(&nbsp;getThenRes )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;构建Promise2( getThenRes&nbsp;)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;构建微任务：调用 getThenRes</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;then&nbsp;中同步代码执行，this=<font color=\"#ff0000\"><b>上一个Promise</b></font>&nbsp;<font color=\"#4169e1\"><b>微任务+1</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;返回 Promise2</div><div><font color=\"#4169e1\"><b><br></b></font></div><div>&nbsp; &nbsp; 3.执行 then( getThenRes&nbsp;)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;构建Promise3( getThenRes&nbsp;)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;then&nbsp;中同步代码执行，this=<font color=\"#ff0000\"><b>上一个Promise2</b></font>&nbsp;<font color=\"#4169e1\"><b>微任务</b></font><b style=\"color: rgb(65, 105, 225);\">+1</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;返回 Promise3</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>(1)</b></font><b style=\"color: rgb(65, 105, 225);\">&nbsp;</b>async&nbsp;异步代码得到结果&nbsp;<font color=\"#ff0000\"><b>Res</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;通过Promise的<b><font color=\"#4169e1\">&nbsp;C(</font><font color=\"#ff0000\">Res</font></b><b style=\"color: rgb(65, 105, 225);\">)，</b>执行Promise2 的微任务：执行 getThenRes&nbsp;取得返回值</div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;通过<font color=\"#ff0000\"><b>Promise2</b></font>的<b><font color=\"#4169e1\">&nbsp;C(</font><font color=\"#ff0000\">Res</font></b><b style=\"color: rgb(65, 105, 225);\">)，</b>执行Promise3 的微任务：执行 getThenRes&nbsp;取得返回值<div>&nbsp; &nbsp; &nbsp; &nbsp; -&nbsp;通过<font color=\"#ff0000\"><b>Promise3</b></font>的<b><font color=\"#4169e1\">&nbsp;C(</font><font color=\"#ff0000\">Res</font></b><b style=\"color: rgb(65, 105, 225);\">)，没有微任务</b><br></div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><b style=\"color: rgb(65, 105, 225);\">*&nbsp;代码实现</b></div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; -----------------------------------------------------------------</b></div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp;</b>&nbsp;function Promise( (userTask)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.data = null</div><div>&nbsp; &nbsp; &nbsp; &nbsp; this.queue = []</div><div>&nbsp; &nbsp; &nbsp; &nbsp; function&nbsp;<font color=\"#ff0000\"><b>resolve</b></font>(value) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.data = value</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.queue.forEach(<font color=\"#4169e1\"><b>thenTask&nbsp;</b></font>=&gt;&nbsp;<font color=\"#4169e1\"><b>thenTask</b></font>())</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; userTask(<font color=\"#ff0000\"><b>resolve</b></font>.bind(this))</div><div>&nbsp; &nbsp; } )</div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; -----------------------------------------------------------------</b><div><div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp;</b>&nbsp;Promise.prototype.then = (getThenRes)=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; let&nbsp;<b>buildTask&nbsp;</b>=&nbsp;<font color=\"#ff0000\"><b>resolveParam&nbsp;</b></font>=&gt; {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let&nbsp;<font color=\"#4169e1\"><b>thenTask&nbsp;</b></font>= ()=&gt;{</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let res = getThenRes(this.data)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; res instanceof Promise ? res.then(<font color=\"#ff0000\"><b>resolve</b></font>) :&nbsp;<font color=\"#ff0000\"><b>resolve</b></font>(res)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //&nbsp;这里的&nbsp;<font color=\"#ff0000\"><b>r</b></font><b style=\"color: rgb(255, 0, 0);\">esolveParam</b><font color=\"#ff0000\"><b>&nbsp;</b></font>指then方法调用者的&nbsp;<font color=\"#ff0000\"><b>resolve</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<b>this</b>.queue.push(<font color=\"#4169e1\"><b>thenTask</b></font>)&nbsp;<b>//&nbsp;这里的this指向then方法调用者</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; return new Promise(<b>buildTask</b>)</div><div>&nbsp; &nbsp; }</div></div><b style=\"color: rgb(65, 105, 225);\">&nbsp; &nbsp; -----------------------------------------------------------------</b><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; Async / Await&nbsp;</b></font>是内置了执行器的 generator 函数。</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp;&nbsp;</b></font></div><div><font color=\"#4169e1\"><b><br></b></font><div><font color=\"#ff0000\"><b>参考文章</b></font></div><div>&nbsp; &nbsp; 20行实现一个简单的Promise</div><div>&nbsp; &nbsp; https://my.oschina.net/jamesview/blog/3216558</div></div><div>&nbsp; &nbsp; async/await&nbsp;的本质</div><div>&nbsp; &nbsp;&nbsp;https://zhuanlan.zhihu.com/p/112800700</div>"
    },
    "BoZoKonFK": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "BoZoKonFK",
      "name": "(总结) 前端性能优化",
      "content": "<div><font color=\"#ff0000\"><b>目标</b></font></div><div><font color=\"#ff0000\" style=\"font-weight: bold;\">&nbsp; &nbsp;&nbsp;</font><b>首屏加载时间 N = 首屏资源 / 平均网速(300Kb/s)</b></div><font color=\"#ff0000\"><b><div><font color=\"#ff0000\"><br></font></div>加载优化</b></font><div><b style=\"color: rgb(255, 0, 0);\">&nbsp; &nbsp;&nbsp;</b>合并CSS JavaScript代码</div><div>&nbsp; &nbsp; 使用雪碧图</div><div>&nbsp; &nbsp; 缓存资源</div>"
    },
    "mhnIrgssx": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "mhnIrgssx",
      "name": "(总结) 虚拟DOM与性能优化",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">痛点：高频的DOM操作及其大量Dom状态管理</b><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>正常：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 监听DOM状态数据 =&gt;&nbsp;手动更新DOM</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>MVVM</b></font>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 监听DOM状态数据 =&gt;&nbsp;通过双向绑定自动重新渲染整颗DOM树</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 双向绑定原理</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;通过Object.defineProperty()来<font color=\"#ff0000\"><b>产生 set/get监听函数&nbsp;</b></font>实现<font color=\"#ff0000\"><b>数据劫持</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 监听者：监听所有属性</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 订阅者管理器：根据输入的监听属性更新DOM订阅者</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DOM订阅者：根据对应的监听属性更新视图</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>Virtual DOM</b></font>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 本质上就是在 JS 和 DOM 之间做了一个缓存，通过对比局部渲染DOM树</div><div>&nbsp; &nbsp;&nbsp;</div><div>参考文章</div><div>&nbsp; &nbsp;&nbsp;前端为什么操作 DOM 是最耗性能的呢？</div>&nbsp; &nbsp; https://www.zhihu.com/question/324992717<div>&nbsp; &nbsp;&nbsp;前端性能优化常用总结<br><div>&nbsp; &nbsp;&nbsp;https://www.jianshu.com/p/fe32ef31deed</div></div>"
    },
    "dAkUz_KVc": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "dAkUz_KVc",
      "name": "(总结) 服务端渲染",
      "content": "<font color=\"#ff0000\"><b>SSR：server side render</b></font><div>&nbsp; &nbsp; *&nbsp;仅仅适用于Vue/React相关虚拟DOM框架&nbsp;</div><div>&nbsp; &nbsp; *&nbsp;返回单纯HTML结构的页面，并局部标记，之后再根据标记重新渲染</div><div>&nbsp; &nbsp; *&nbsp;更有利于SEO（爬虫只获取请求结果，不执行其中的JS脚本）</div><div>&nbsp; &nbsp; *&nbsp;首屏渲染不容易有长时间的白屏</div><div><br></div><div>客户端渲染</div><div>&nbsp; &nbsp; 请求HTML文件</div><div>&nbsp; &nbsp; JS文件加载执行：JS代码动态生成DOM（空白屏）</div><div>&nbsp; &nbsp; CSS加载执行</div><div><br></div><div>服务端渲染</div><div>&nbsp; &nbsp; 请求核心不带样式的HTML字符串</div>&nbsp; &nbsp; CSS加载执行"
    },
    "AUZGdIm9U": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "AUZGdIm9U",
      "name": "语言介绍",
      "content": "<div>&nbsp;<b style=\"color: rgb(255, 0, 0);\">基础介绍</b></div><div><div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; C语言源文件</b></font></div><div>&nbsp; &nbsp; 1. C语言源文件的后缀非常统一，在不同的编译器下都是.C<code><br></code></div><div>&nbsp; &nbsp; &nbsp; &nbsp; C语言是为了开发 UnixOS 而诞生的，但缺少很多现代编程特性<b style=\"color: rgb(255, 0, 0);\">&nbsp;</b></div><div>&nbsp; &nbsp; 2. C++ 源文件的后缀则有些混乱，不同的<font color=\"#4169e1\"><b>编译器</b></font>支持不同的后缀(&nbsp;<font color=\"#4169e1\"><b>GCC</b></font>且大部分编译器支持cpp)</div><div><br></div><font color=\"#4169e1\"><b>&nbsp; &nbsp; GCC编译器</b></font></div><div><div>&nbsp; &nbsp; * 编程指编写计算机能够理解和执行的指令(<b>源代码)</b></div><div>&nbsp; &nbsp; * 编程的最终结果就生成一个<b>可执行文件</b>，即计算机能够运行的文件</div><div>&nbsp; &nbsp; * 为了生成可执行文件，需要一个将程序源代码转为可执行文件的<font color=\"#ff0000\"><b>编译器</b></font></div></div><div><br></div><div><div>&nbsp; &nbsp; * GCC 是由 GUN&nbsp;组织开发的，最初只支持C语言，是一个单纯的C语言编译器</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 后来 GNU&nbsp;组织倾注了更多的精力，使得 GCC 越发强大，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 增加了对各种语言的支持，此时的 GCC 就成了一个编译器套件（套装），是所有编译器的总称<br></div><div>&nbsp; &nbsp; * 让用户指定参数是一种不明智的行为，不但增加了学习成本，还使得操作更加复杂</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 所以后来 GCC 又针对不同的语言推出了不同的命令</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 例如 g++命令 用来编译 C++，gcj命令 用来编译 Java，gccgo命令 用来编译Go语言。</div></div></div>&nbsp; &nbsp; * GCC 生成可执行 exe 文件<div>&nbsp; &nbsp; ：<font color=\"#4169e1\"><b>g++</b></font>&nbsp;target.cpp 编译指定文件 默认在当前目录生成 a.exe</div><div>&nbsp; &nbsp; ：<font color=\"#4169e1\"><b>-o</b></font>&nbsp;name 指定编译后的文件名</div><div><br></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; C++语法组成</b></font></div><div>&nbsp; &nbsp; * 继承自C语言的低级语言</div><div>&nbsp; &nbsp; * 现代高级语言特性，允许我们定义自己的类型以及组织大规模程序</div><div>&nbsp; &nbsp; * 标准库，它利用高级特性来提供有用的数据结构和算法<br><div><br></div></div><div><font color=\"#ff0000\"><b>C++Primer</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* C++基础&nbsp;</b></font>：变量/基础类型 字符串/向量/数组 表达式 语句 函数 类</div><div>&nbsp; <font color=\"#4169e1\"><b>&nbsp; * C++ 标准库&nbsp;</b></font>：I/O库 顺序容器 泛型算法 关联容器&nbsp;</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 类设计者的工具&nbsp;</b></font>：拷贝控制 重载运算/类型转换 面向对象程序设计 模板/泛型编程</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>* 高级主题</b></font>&nbsp; ：标准库特殊设施 / 大型程序工具 / 特殊工具与技术</div>"
    },
    "qG-RZnWTC": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "qG-RZnWTC",
      "name": "基础数据类型",
      "content": "<div><font color=\"#ff0000\"><b>变量 &amp; 指针</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>变量</b></font>就是某些内存的键（想象一个程序中含有一个哈希表）具有自身的地址（解变量符号<font color=\"#ff0000\"><b> &amp;</b></font>）</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>变量值</b></font>占据了内存空间（猜测是寄存器最大位数大小的内存）能够直接保存<font color=\"#4169e1\"><b>基础数据类型</b></font>，或者其他<font color=\"#4169e1\"><b>内存的地址</b></font>&nbsp;&nbsp;</div><div>&nbsp; &nbsp; * 编写 C++代码 只需要关心<font color=\"#ff0000\"><b>地址 (&amp;变量 / 指针) 和内存 (变量值 / 结构体 / 基础数据类型)</b></font></div><div>&nbsp; &nbsp; * 全局变量：是否使用过需要阅读所有的代码！</div><div>&nbsp; &nbsp; *&nbsp;内存的地址，既包括通常内存的地址，也包括变量的地址</div><div><br></div><div><div><font color=\"#ff0000\"><b>基础数据类型</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 声明基础数据类型：type name;</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;整型</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;字符&nbsp;<font color=\"#4169e1\"><b>char&nbsp;</b></font>单引号 1byte</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;短/长整型&nbsp;<font color=\"#4169e1\"><b>short&nbsp;</b></font>2byte&nbsp;<font color=\"#4169e1\"><b>int&nbsp;</b></font>4byte&nbsp;&nbsp;<font color=\"#4169e1\"><b>long&nbsp;</b></font>4byte&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;* 默认带符号 signed int 最大值 [-2^31, 2^31-1] // 21亿</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;* 当设置不带符号时&nbsp;<font color=\"#4169e1\"><b>unsigned&nbsp;</b></font>int 最大值 [0, 2^32-1] // 42亿</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;* 减一是因为整数包含 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;布尔类型&nbsp;<font color=\"#4169e1\"><b>bool&nbsp;</b></font>1byte&nbsp; // 仅有两个特殊关键字 true false</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;小数 浮点数&nbsp;<font color=\"#4169e1\"><b>float&nbsp;&nbsp;</b></font>4byte 双精度&nbsp;<font color=\"#4169e1\"><b>double&nbsp;</b></font>8byte</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; -&nbsp;其他 #include &lt;string&gt; 字符串&nbsp;<font color=\"#4169e1\"><b>string&nbsp;</b></font>双引号 32byte&nbsp; &nbsp;</div><div><br></div><div><font color=\"#ff0000\"><b>指针/内存的地址</b></font>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; - 保存内存的<font color=\"#4169e1\"><b>地址</b></font>的变量（想象一下超链接）我们称之为<font color=\"#4169e1\"><b>指针</b></font></div></div><div><div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 声明一个整型变量 int myInteger = 3141526;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 声明 裸指针 type *name = &amp;myInteger; 保存这个整型变量的地址</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 取得 裸指针中的地址值 name; 即这个整型变量的地址</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 取得 裸指针中的地址对应的内存 *name; 即取得这个整型变量占据的内存</div><div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;*&nbsp;若不进行赋值其可能指向任何位置！养成随时将无用的指针赋值&nbsp;<font color=\"#4169e1\"><b>NULL&nbsp;</b></font>的好习惯；&nbsp;</div></div><div><br></div><div><font color=\"#ff0000\"><b>动态内存分配</b></font></div><div><b><font color=\"#4169e1\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</font></b>使用<font color=\"#ff0000\"><b>&nbsp;new</b></font>&nbsp;来取得某种类型的空白内存，再使用<font color=\"#ff0000\"><b>&nbsp;delete p&nbsp;</b></font>来释放内存；</div><div><div><div><b><font color=\"#4169e1\">&nbsp; &nbsp; &nbsp; &nbsp; 例子：创建一个动态数组</font></b></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</b></font>：int *p = new int[8]; // 使用指针来创建一块数组内存<br></div></div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：<font color=\"#ff0000\"><b>delete p</b></font>; // 释放这块内存</div><div>&nbsp; &nbsp; &nbsp; &nbsp; ：<font color=\"#ff0000\"><b>p = NULL</b></font>; // 使得指针指向NULL</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>*&nbsp;</b></font>无限制分配内存可能使得内存不足，这时候将会抛出一个异常，现代操作系统下这种情况极其罕见</div></div></div><div><br></div></div><div><font color=\"#ff0000\"><b>枚举类型</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; </b></font>声明：<font color=\"#4169e1\"><b>enum </b></font>RainbowColor { A=1, B=3, C=5 };</div><div>&nbsp; &nbsp; 创建：RainbowColor mine = B; // mine = 3</div><div>&nbsp; &nbsp; * 枚举类是一系列固定值组合而成的新的变量类型</div><div>&nbsp; &nbsp; * 相当于声明且创建了3个变量 A B C，其值默认从 0 递增</div><div>&nbsp; &nbsp; * 通常是为了隐藏不必要的业务类型定义（如足球=0，排球=1...），和 switch/case 能很好搭配</div>"
    },
    "77xPQX7Io": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "77xPQX7Io",
      "name": "关键字 | 语法糖",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">运算符</b><br></div><div>&nbsp; &nbsp; 非 ！</div><div>&nbsp; &nbsp; 判断 == / != / &gt; / &gt;=</div><div>&nbsp; &nbsp; 布尔 &amp;&amp; / ||</div><div>&nbsp; &nbsp; 自增减 ++/--</div><div>&nbsp; &nbsp; 取余数 %</div><div><font color=\"#ff0000\"><b><br></b></font></div><div><font color=\"#ff0000\"><b>控制语句</b></font>&nbsp;&nbsp;</div><div><div>&nbsp; &nbsp;&nbsp;<b>逻辑语句</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if() {} / if() {} else if() {} / else {}</div><div>&nbsp; &nbsp; &nbsp; &nbsp; switch() {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; case VALUE: statements;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; while(){} / do {} while()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for(){} / break &amp; continue</div></div><div><br></div><div>&nbsp; &nbsp;&nbsp;<b>返回一个对象或类型所占的内存字节数，即求数据类型的内存大小&nbsp;</b>sizeof (object / type_name)</div>"
    },
    "uAJZDmnhx": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "uAJZDmnhx",
      "name": "结构体",
      "content": "<div><b style=\"color: rgb(255, 0, 0);\">函数</b><br></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 声明&nbsp;</b></font>即编写函数原型：返回值类型 函数名称 用括号包裹的形参列表</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 定义</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; C++入口函数：int main() 大括号包裹的函数体，默认返回一个整数0通知OS程序运行正常</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 函数重载：多个不同参数列表的函数公用一个名称</div><div>&nbsp; &nbsp; * 变量/函数的声明，一定要在调用之前（C++没有Js的变量提升）&nbsp;</div><div><br></div><div><font color=\"#ff0000\"><b>结构体</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 声明&nbsp;</b></font>struct Name {}; // 构造函数和JavaScript一致</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 创建&nbsp;</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 方法1：Name mine;&nbsp; // 是的 - - 这样就创建了一个Name结构体</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 方法2：Name mine( params ); // 通过构造函数创建</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 调用&nbsp;</b></font>cout &lt;&lt; mine.value &lt;&lt; endl;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; getName() { Name mine; mine.value = 'Sanji'; return&nbsp;<font color=\"#4169e1\"><b>mine</b></font>; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 通常使得结构体为Model层，自定义Control层，通过C层取得希望的结构体&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 结构体中的变量称为<font color=\"#ff0000\"><b>域</b></font>，某种意义上声明了结构体相当于得到了一个表单</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 通过指针使用结构体</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 开辟内存：Name *p = new Name;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 解指针并调用内存中的变量：(*p).value;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 建议使用箭头符号代替“.”来访问结构体的域</div><div>&nbsp; &nbsp;&nbsp;</div>"
    },
    "tBSwLo2NX": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "tBSwLo2NX",
      "name": "STD",
      "content": "<div><font color=\"#ff0000\"><b>STD</b></font></div><div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>概念：</b></font>每个C++编译器都必须支持的类型和函数的集合</div><div><b>&nbsp; &nbsp; 通过 #include 可以导入STD中的IO库，然后直接使用头文件中的所有内容</b></div><div>&nbsp; &nbsp;&nbsp;<b>导入自定义的头文件&nbsp;</b>#include \"./myHeader.h\"</div><div>&nbsp; &nbsp;&nbsp;<b>STD使用的命名空间&nbsp;</b>using namespace std;</div></div><div><br></div><div><div>&nbsp; &nbsp;&nbsp;<b style=\"color: rgb(65, 105, 225);\">&lt;iostream&gt;</b></div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;cout/cerr/clog 对象 &lt;&lt; Value，用于输出文本/标准错误/一般信息</div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; cin &gt;&gt; Value：使得用户输入的值作为参数(一般)赋值给变量</div><div>&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; 插入&lt;&lt;、反向插入&gt;&gt;运算符 指明某个值作为参数(一般)传递给函数进行调用</div><div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>&lt;ctime&gt;</b></font></div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; time(NULL)：返回1970/1/1至今的秒数</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>&lt;cstdlib&gt;</b></font></div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; rand() 不需要参数，它会返回一个从0到最大随机数的任意整数，最大随机数的大小通常是固定的一个大整数</div><div>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; srand(Number) 为rand提供种子，不使用时rand默认种子是1</div><div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; * 种子固定则产生的随机数固定</div><div>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; * 可以使用取余控制随机数：随机数%4 = 0到3&nbsp;</div></div><div><br></div><div><div><font color=\"#ff0000\"><b>数组</b></font></div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 声明&nbsp;</b></font></div>&nbsp; &nbsp; &nbsp; &nbsp; 方法1：int name[length];<br>&nbsp; &nbsp; &nbsp; &nbsp; 方法2：int name[] = {...};<div>&nbsp; &nbsp; &nbsp; &nbsp; * 编译器根据长度开辟内存空间</div>&nbsp; &nbsp; &nbsp; &nbsp; * 这里的 name 变量值保存了数组的地址; // 非常像指针</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 语法 name[ index ] 进行内存调用 // 非常想解指针</div><div><font color=\"#4169e1\"><b>&nbsp; &nbsp; 赋值</b></font><br></div>&nbsp; &nbsp; &nbsp; &nbsp; * 通常使用循环语句进行赋值，或者直接使用<font color=\"#ff0000\"><b>大括号</b></font>赋值 {1，2，3，4，5}&nbsp;&nbsp;&nbsp;<br><div>&nbsp; &nbsp; &nbsp; &nbsp; * 需要时刻警惕数组越界！C++中数组越界是不会报错的！</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>通过指针来访问数组：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 方式1：int name[] = {1, 2, 3}; int *p = a;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; 方式2：int *p = new int[3];</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * p 即这块数组内存的地址</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * p[0] == a[0]; // 仅仅数组中，可以不进行解指针使用数组的内存</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 对其他内存操作（如调用）的时候需要解指针 (*p) 取得内存</div>"
    },
    "sPaAQDIlb": {
      "blockId": "U2EWIATls",
      "shelfId": "9Exg2gPYK",
      "bookId": "sPaAQDIlb",
      "name": "素数相关",
      "content": "<font color=\"#ff0000\"><b>如何判断一个数 Num，是否是素数 isPrime</b></font><div>&nbsp; &nbsp; * 简单的算法：对 Num 循环取余 % 2~Num，若始终为0则这个数字是素数</div><div>&nbsp; &nbsp; * 最容易想到的算法不意味着是最优的算法</div><div><br></div><div><font color=\"#ff0000\"><b>应用场景</b></font></div><div>&nbsp; &nbsp; * 银行/电子商务网站进行敏感数据保护的RSA算法，需要产生最大素数进行创建加密秘钥</div><div>&nbsp; &nbsp; * 我们需要一个快速的大素数生成器</div>"
    },
    "7OquOiTGq": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "7OquOiTGq",
      "name": "8.隐函数求导",
      "content": "<font color=\"#ff0000\"><b>概念</b></font><div>&nbsp; &nbsp; 定义：如果方程 F(x, y)=C 能确定 y 是 x 的函数，那么称 F 是隐函数</div><div>&nbsp; &nbsp; 应用：某些复杂函数无法推演成初等函数表达式</div><div><br></div><div><font color=\"#ff0000\"><b>习题</b></font></div><div>&nbsp; &nbsp; <b>对 x^2 + y^2 = 4 进行求导</b></div><div>&nbsp; &nbsp; ：使用隐函数求导法，而不是反推出 y=±√(4-x^2) 再进行求导！</div><div>&nbsp; &nbsp; ：对左右两边同时求导可得 d(x2+y2)/dx = d(4)/d(x)</div><div>&nbsp; &nbsp; ：得 d(x2)/dx + d(y2)/dx = 0</div><div>&nbsp; &nbsp; ：令 u = y2，根据链式法则有 du/dx = du/dy * dy/dx</div><div>&nbsp; &nbsp; ：最终得 2x + 2y*(dy/dx) = 0</div><div>&nbsp; &nbsp; ：即得 dy/dx = -x/y</div><div><br></div><div>&nbsp; &nbsp; <b>对 5sinx + 3secy = y - x2 +3 求导</b></div><div>&nbsp; &nbsp; ：这根本没法反推 y = ?x，只能使用隐函数求导法</div><div>&nbsp; &nbsp; ：对左右两边同时求导可得 d(5sinx)/dx + d(3secy)/dx = dy/dx -d(x2)/dx + d3/dx</div><div>&nbsp; &nbsp; ：且令 u=3secy，则有 du/dx = du/dy * dy/dx</div><div>&nbsp; &nbsp; ：得 5cosx +&nbsp; 3secy*tany *dy/dx = dy/dx - 2x</div><div>&nbsp; &nbsp; ：简化后得 dy/dx = (2x + 5cosx) / (1 - 3secy*tany)</div><div>&nbsp; &nbsp; Tip：此时题目可能是想求在某点的导数，在隐函数求导后，化简前就代入这个点会方便很多！</div><div>&nbsp; &nbsp; ：原式代入(0, 0)有 5cos0 + 3sec0tan0 *dy/dx = dy/dx -2*0</div><div>&nbsp; &nbsp; ：即方程在(0, 0)上的导数是 5</div><div><br></div><div><b>&nbsp; &nbsp; 对 y *cotx = 3cscy + x7 求导</b></div><div>&nbsp; &nbsp; ：这根本没法反推 y = ?x，只能使用隐函数求导法</div><div>&nbsp; &nbsp; ：对左右同时求导可得 d(y*cotx)/dx = d(3cscy)/dx + d(x7)/dx</div><div>&nbsp; &nbsp; ：令 s=y*cotx，v=cotx，则 d(y*cotx)/dx = ds/dx = d(yv)/dx</div><div>&nbsp; &nbsp; ：最终有 ds/dx = dy/dx*v + y * dv/dx = cotx *dy/dx + y*(-scsx)2</div><div>&nbsp; &nbsp; ：令 u=3scsy，则 d(3cscy)/dx = du/dx = du/dy *dy/dx = -3cscy*coty *dy/dx</div><div>&nbsp; &nbsp; ：最终对原始方程两侧同时求导并化简得解</div><div><br></div><div>&nbsp; &nbsp; <b>对 x - ycos(y/x4) = π+1 求导（笑）</b></div><div>&nbsp; &nbsp; ：这根本没法反推 y = ?x，只能使用隐函数求导法</div><div><br></div><div><font color=\"#ff0000\"><b>实际应用</b></font></div><div>&nbsp; &nbsp; 想用打气筒给一个球形气球充气</div><div>&nbsp; &nbsp; 已知空气以每秒12π立方英寸进入气球，当气球半径为2英寸时，气球半径的变化率是多少</div><div>&nbsp; &nbsp; 当气球体积达到 36π立方英寸时，气球半径的变化率又是多少</div><div>&nbsp; &nbsp; ：已知球体体积关于半径的公式 <b>V=4/3π *r3</b></div><div>&nbsp; &nbsp; ：则球体体积关于<font color=\"#ff0000\"><b>时间</b></font>的变化率为 dV/dt = d(4/3 *πr3)/dt</div><div>&nbsp; &nbsp; ：令 s = r3，则 ds/dt = ds/dr * dr/dt = 4/3π * (3r2 * dr/dt) = <b>4πr2 *dr/dt</b></div><div>&nbsp; &nbsp; ：此时我们就知道了球体半径关于时间的变化函数 <b>dr/dt = 3/r2</b></div><div>&nbsp; &nbsp; ：此时还想知道体积关于时间的变化函数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; :：将36π代入代入体积公式得半径r</div><div>&nbsp; &nbsp; &nbsp; &nbsp; :：代入变化率公式的半径瞬时变化率 3/r2</div>"
    },
    "2Mj7rl7J_": {
      "blockId": "uuzRN_3cX",
      "shelfId": "OxHRbBgQ1",
      "bookId": "2Mj7rl7J_",
      "name": "基础",
      "content": "<div><font color=\"#ff0000\"><b>基础排名</b></font></div>&nbsp; &nbsp; Oracle<div>&nbsp; &nbsp; MySQL</div><div>&nbsp; &nbsp; Microsoft SQL Server</div><div>&nbsp; &nbsp; PostgreSQL</div><div>&nbsp; &nbsp; MongoDB</div><div>&nbsp; &nbsp; Redis</div><div>&nbsp; &nbsp; SQLite</div><div>&nbsp; &nbsp; 来源：https://hellogithub.com/report/db-engines/?url=/periodical/volume/52/</div><div><br></div><div><font color=\"#ff0000\"><b>分类</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>关系型数据库：</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 遵循ACID规则，基于事务transaction完成功能</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong>1、A (Atomicity) 原子性</strong></div><p>&nbsp; &nbsp; &nbsp; &nbsp; 原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。</p><p>    </p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp; 2、C (Consistency) 一致性</strong><br><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br>  </p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p><div style=\"width: 100%; height: auto; clear: none; text-align: center;\" class=\"google-auto-placed ap_container\"><ins style=\"display: block; margin: auto; background-color: transparent; height: 0px;\" data-ad-format=\"auto\" class=\"adsbygoogle adsbygoogle-noablate\" data-ad-client=\"ca-pub-6117966252207595\" data-adsbygoogle-status=\"done\"><ins id=\"aswift_5_expand\" style=\"display: inline-table; border: medium none; height: 0px; position: relative; visibility: visible; width: 838px; background-color: transparent;\"><ins id=\"aswift_5_anchor\" style=\"display: block; border: medium none; height: 0px; position: relative; visibility: visible; width: 838px; background-color: transparent; overflow: hidden; opacity: 0;\"><iframe id=\"aswift_5\" name=\"aswift_5\" style=\"left: 0px; position: absolute; top: 0px; border-width: 0px; border-style: initial; width: 838px; height: 280px;\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" src=\"https://googleads.g.doubleclick.net/pagead/ads?client=ca-pub-6117966252207595&amp;output=html&amp;h=280&amp;adk=2284114316&amp;adf=1583815873&amp;w=838&amp;fwrn=4&amp;fwrnh=100&amp;lmt=1596706879&amp;num_ads=1&amp;rafmt=1&amp;armr=3&amp;sem=mc&amp;pwprc=5099955627&amp;psa=1&amp;guci=2.2.0.0.2.2.0.0&amp;ad_type=text_image&amp;format=838x280&amp;url=https%3A%2F%2Fwww.mongodb.org.cn%2Ftutorial%2F2.html&amp;flash=0&amp;fwr=0&amp;pra=3&amp;rh=200&amp;rw=837&amp;rpe=1&amp;resp_fmts=3&amp;wgl=1&amp;fa=27&amp;adsid=NT&amp;dt=1596706879029&amp;bpp=2&amp;bdt=802&amp;idt=-M&amp;shv=r20200803&amp;cbv=r20190131&amp;ptt=9&amp;saldr=aa&amp;abxe=1&amp;cookie=ID%3D28556b0e7f01a4f4%3AT%3D1596706755%3AS%3DALNI_Ma9piyebxoLcvljSUgj4TQvzEdOxg&amp;prev_fmts=300x600%2C838x90_0ads_al%2C728x90%2C0x0&amp;nras=2&amp;correlator=3967887945089&amp;frm=20&amp;pv=1&amp;ga_vid=1823167332.1596706756&amp;ga_sid=1596706879&amp;ga_hid=755115898&amp;ga_fc=0&amp;icsg=36594950332&amp;dssz=24&amp;mdo=0&amp;mso=8&amp;u_tz=480&amp;u_his=5&amp;u_java=0&amp;u_h=1080&amp;u_w=1920&amp;u_ah=1050&amp;u_aw=1920&amp;u_cd=24&amp;u_nplug=0&amp;u_nmime=0&amp;adx=699&amp;ady=1002&amp;biw=1903&amp;bih=948&amp;scr_x=0&amp;scr_y=0&amp;eid=42530557%2C42530559&amp;oid=3&amp;psts=AGkb-H_r1VnTIorz7p8U1DWoFByLZlbblUR5lWrQqhSC7HaszCi4j3hgjWbI8Lifm4gG7Q&amp;pvsid=4115275386220175&amp;pem=955&amp;ref=https%3A%2F%2Fwww.mongodb.org.cn%2Ftutorial%2F&amp;rx=0&amp;eae=0&amp;fc=384&amp;brdim=-8%2C-8%2C-8%2C-8%2C1920%2C0%2C1936%2C1066%2C1920%2C948&amp;vis=1&amp;rsz=%7C%7Cs%7C&amp;abl=NS&amp;fu=8328&amp;bc=31&amp;ifi=5&amp;uci=a!5&amp;btvi=1&amp;fsb=1&amp;xpc=Bm6n7dIbX9&amp;p=https%3A//www.mongodb.org.cn&amp;dtd=17\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allowfullscreen=\"true\" data-google-container-id=\"a!5\" data-load-complete=\"true\" data-google-query-id=\"CM21pdKkhusCFQOFwgodU0EJag\" width=\"838\" height=\"280\" frameborder=\"0\"></iframe></ins></ins></ins></div>    <p><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong><strong>3、I (Isolation) 独立性</strong><br><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p><p><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>比如现有有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p>      <p><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong><strong>4、D (Durability) 持久性</strong><br><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><p><br></p><p>&nbsp; &nbsp;<font color=\"#4169e1\"><b>&nbsp;非关系型的数据库：</b></font></p><p>&nbsp; &nbsp; &nbsp; &nbsp; NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p>  <p>&nbsp; &nbsp; &nbsp; &nbsp; NoSQL用于超大规模数据的存储。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 例如谷歌或Facebook每天为他们的用户收集万亿比特的数据</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p>"
    },
    "Ggq2np4eK": {
      "blockId": "YxnegsTMH",
      "shelfId": "N7V_Hcwg1",
      "bookId": "Ggq2np4eK",
      "name": "9.指数/对数函数",
      "content": "<font color=\"#ff0000\"><b>基础回顾</b></font><div>&nbsp; &nbsp; 指数：底数a^指数x</div><div>&nbsp; &nbsp; 指数运算：b1=b；(bx)(by) = b^(x+y)；(bx)/(by) = b^(x-y)；(bx)y = b^xy；</div><div>&nbsp; &nbsp; 对数：求输出 a^x 得 N，<font color=\"#4169e1\"><b>根据输出求输入 loga( N ) 得 x</b></font>，N恒大于零</div><div><br></div><div><font color=\"#ff0000\"><b>常见公式</b></font></div><div>&nbsp; &nbsp; * a^(-2) = 1/（a^2）&nbsp;</div><div>&nbsp; &nbsp; * loga( 1 )=0 / loga( a )=1</div><div>&nbsp; &nbsp; * loga( xy )=loga( x ) + loga( y ) / loga( x/y )=loga( x ) - loga( y )</div><div>&nbsp; &nbsp; * loga( x^y )= y*loga( x )</div><div>&nbsp; &nbsp; * 对数<font color=\"#ff0000\"><b>换底法则</b></font>：loga( N ) = logc( N ) / logc( a )&nbsp;</div><div>&nbsp; &nbsp; * 对数换底法则推导：loga( N ) = <font color=\"#4169e1\"><b>1/ logc( a )</b></font> * logc( N )&nbsp;= <font color=\"#4169e1\"><b>K&nbsp;</b></font>* logb( N )</div><div><br></div><div><font color=\"#ff0000\"><b>例题</b></font></div><div><b>&nbsp; &nbsp; 求解 3^(x^2 -1) = 19</b></div><div>&nbsp; &nbsp; ：很难通过通常的运算法则来求解，此时可以对左右同时取对数</div><div>&nbsp; &nbsp; ：log3( 左边 ) = log3( 19 )</div><div>&nbsp; &nbsp; ：x^2 -1 = log3( 19 ) 此时得解&nbsp;±(&nbsp;&nbsp;log3( 19 )+1 )^(1/2)&nbsp;</div><div><br></div><div>&nbsp; &nbsp; <b>证明 loga( xy )=loga( x ) + loga( y ) / loga( x/y )=loga( x ) - loga( y )</b></div><div>&nbsp; &nbsp; ：有 a^loga( N ) = N，分别代入 x / y / xy 可得</div><div>&nbsp; &nbsp; ：A=a^loga(x)=x, B=a^loga(y)=y, C=a^loga(xy)=xy</div><div>&nbsp; &nbsp; ：当 AB 可得 a^ ( loga(x)+loga(y) ) = xy = a^loga(xy)</div><div>&nbsp; &nbsp; ：即证明了&nbsp;<b>loga( xy )=loga( x ) + loga( y )</b></div><div><b>&nbsp; &nbsp; </b>：同理当 A/B 可得 a^ ( loga(x)-loga(y) ) = x/y = a^loga(x/y)&nbsp;</div><div><br></div><div><b>&nbsp; &nbsp;&nbsp;证明&nbsp;loga( x^y )= y*loga( x )</b></div><div>&nbsp; &nbsp; ：有 a^loga( N ) = N，代入 x, x^y 可得&nbsp;</div><div>&nbsp; &nbsp; ：A a^loga( x ) = x, B a^loga( x^y ) = x^y</div><div>&nbsp; &nbsp; ：对 A^y 有 ( a^loga( x ) )^y = x^y = a^loga( x^y )</div><div>&nbsp; &nbsp; ：即证明了 y*loga( x ) = loga( x^y )</div><div><br></div><div><b>&nbsp; &nbsp; 证明</b><font color=\"#ff0000\"><b>换底法则</b></font><b> loga( N ) = logc( N ) / logc( a )&nbsp;</b></div><div>&nbsp; &nbsp; ：假设有 loga( N ) *logc( a )&nbsp; = logc( N ) 且 C^左边 = C^右边</div><div>&nbsp; &nbsp; ：可得 C^( loga( N ) <font color=\"#4169e1\"><b>*logc( a )</b></font> ) = C^( logc( N ) )</div><div>&nbsp; &nbsp; ：即 a^loga( N ) = N 左右相等，假设成立</div>"
    },
    "cUeVVqO1t": {
      "blockId": "YxnegsTMH",
      "shelfId": "wxtju1CwP",
      "bookId": "cUeVVqO1t",
      "name": "二次型",
      "content": ""
    },
    "u77wGWQju": {
      "blockId": "DCgJdlX5R",
      "shelfId": "VZjDLYjto",
      "bookId": "u77wGWQju",
      "name": "基础",
      "content": "​<font color=\"#ff0000\"><b>基础概念</b></font><div>&nbsp; &nbsp; 小程序并非凭空冒出来的一个概念。当微信中的 WebView 逐渐成为移动 Web 的一个重要入口时，微信就有相关的 JS API 了。</div><div>&nbsp; &nbsp; 2015年初，微信发布了一整套网页开发工具包，称之为<font color=\"#ff0000\"><b> \nJS-SDK，</b></font></div><div>&nbsp; &nbsp; 开放了拍摄、录音、语音识别、二维码、地图、支付、分享、卡券等几十个API。</div><div>&nbsp; &nbsp; 给所有的 Web \n开发者打开了一扇全新的窗户，让所有开发者都可以使用到微信的原生能力，去完成一些之前做不到或者难以做到的事情。<br></div><div>&nbsp; &nbsp;&nbsp;JS-SDK 解决了移动网页能力不足的问题，通过暴露微信的接口使得 Web 开发者能够拥有更多的能力，</div><div>&nbsp; &nbsp; 然而在更多的能力之外，JS-SDK 的模式并没有解决使用移动网页遇到的体验不良的问题。</div><div>&nbsp; &nbsp;&nbsp;我们团队把很多技术精力放置在如何帮助平台上的Web开发者解决这个问题。</div><div>&nbsp; &nbsp; 因此我们设计了一个 JS-SDK 的增强版本，其中有一个重要的功能，称之为“微信 Web 资源离线存储”。</div><div>&nbsp; &nbsp;&nbsp;微信面临的问题是如何设计一个比较好的系统，使得所有开发者在微信中都能获得比较好的体验。</div><div><br></div><div><font color=\"#ff0000\"><b>小程序与普通网页</b></font></div><div>&nbsp; &nbsp;&nbsp;小程序的主要开发语言是 JavaScript ，小程序的开发同普通的网页开发相比有很大的相似性。</div><div>&nbsp; &nbsp; 对于前端开发者而言，从网页开发迁移到小程序的开发成本并不高，但是二者还是有些许区别的。</div><div>&nbsp; &nbsp;&nbsp;网页开发渲染线程和脚本线程是互斥的，这也是为什么长时间的脚本运行可能会导致页面失去响应，</div><div>&nbsp; &nbsp; 而在小程序中，二者是分开的，分别运行在不同的线程中。</div><div>&nbsp; &nbsp;&nbsp;网页开发者可以使用到各种浏览器暴露出来的 DOM API，进行 DOM 选中和操作。</div><div>&nbsp; &nbsp;&nbsp;而如上文所述，小程序的逻辑层和渲染层是分开的，逻辑层运行在 JSCore 中，并没有一个完整浏览器对象，因而缺少相关的DOM API和BOM API。</div><div>&nbsp; &nbsp;&nbsp;网页开发者需要面对的环境是各式各样的浏览器，</div><div>&nbsp; &nbsp; PC 端需要面对 IE、Chrome、QQ浏览器等，</div><div>&nbsp; &nbsp; 在移动端需要面对Safari、Chrome以及 iOS、Android 系统中的各式 WebView 。</div><div>&nbsp; &nbsp;&nbsp;而小程序开发过程中需要面对的是两大操作系统 iOS 和 Android 的微信客户端，以及用于辅助开发的小程序开发者工具，</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * IOS&nbsp;JavaScriptCore =&gt; WKWebView</div>&nbsp; &nbsp; &nbsp; &nbsp; * 安卓 V8 =&gt; chromium定制内核<div>&nbsp; &nbsp; &nbsp; &nbsp; * 小程序开发者工具&nbsp;NWJS =&gt; Chrome WebView<br></div><div>&nbsp; &nbsp;&nbsp;</div><div><font color=\"#ff0000\"><b>开发流程</b></font></div><div>&nbsp; &nbsp; * 申请账号( AppID ) *安装开发者工具并新建小程序项目 *通过开发者工具编译及预览&nbsp;</div>"
    },
    "c41rFAv9g": {
      "blockId": "DCgJdlX5R",
      "shelfId": "YKdKtabb9",
      "bookId": "c41rFAv9g",
      "name": "(总结) CSS字体",
      "content": "<div><br></div><div><div><font color=\"#4169e1\"><b>======================================================</b></font><br></div><div><b style=\"color: rgb(65, 105, 225);\">字体图标原理</b><font color=\"#4169e1\"><b><br></b></font></div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><b style=\"color: rgb(65, 105, 225);\">======================================================</b><b style=\"color: rgb(65, 105, 225);\"><br></b></div><div><font color=\"#4169e1\"><b>字体行高和基准线相关</b></font></div><div>&nbsp; &nbsp; 特性1：font-size 相同，font-family 不同，得到的 span 元素的高度也不同</div><div><br></div><div><font color=\"#ff0000\"><b>参考文章：</b></font></div><div><b>&nbsp; &nbsp; </b>深入理解 CSS：字体度量、line-height 和 vertical-align</div><div>&nbsp; &nbsp;&nbsp;* https://zhuanlan.zhihu.com/p/25808995&nbsp;</div></div>"
    },
    "FcRPFM-Mh": {
      "blockId": "U2EWIATls",
      "shelfId": "TGwZP0vAU",
      "bookId": "FcRPFM-Mh",
      "name": "STD: STL",
      "content": ""
    },
    "Sinzrcx_q": {
      "blockId": "U2EWIATls",
      "shelfId": "ofOykdH6L",
      "bookId": "Sinzrcx_q",
      "name": "（拓展）TypeScript",
      "content": "<div><font color=\"#ff0000\"><b>基础概念</b></font></div>&nbsp; &nbsp; * TypeScript 是 JavaScript 的一种强类型超集<div>&nbsp; &nbsp; * 非常像一个编译器，将制定 .ts 文件编译为 .js 文件</div><div>&nbsp; &nbsp;&nbsp;</div><div><font color=\"#ff0000\"><b>使用手册</b></font></div><div>&nbsp; &nbsp; 全局安装 TS 编译器 $ npm install typescript -g</div>&nbsp; &nbsp; 查看当前 TS 编译器版本 $ tsc -v<div>&nbsp; &nbsp; 编译指定 .ts 文件 $ tsc main.ts<br></div><div><br></div><div><font color=\"#ff0000\"><b>TS语法</b></font></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>类型注解：</b></font></div><div>&nbsp; &nbsp; ：变量: 类型 =&gt; name: string：这将使得非该类型变量在编译时报错&nbsp;</div><div>&nbsp; &nbsp; ：函数返回值: 类型 =&gt;&nbsp;function getName(): void：定义函数的返回值类型</div><div><br></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>基础类型注解</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 布尔值: boolean&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 字符串: string&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 数字: number&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 数组1: type[]&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 数组2: Array&lt;type&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 不限定: any</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 无返回值：void</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>TS额外类型注解</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 默认情况下 null 和 undefined 是所有类型的子类型</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 这意味着任何基础类型都接收 null 和 undefined</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 联合类型: string | number | boolean</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 哈希表类型: object</div><div>&nbsp; &nbsp;<font color=\"#4169e1\"><b> 配合泛型捕获</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * function getValue&lt;T&gt;(input: any): T { return input }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 单纯使用 any 会使得输入输出变为不相同的数据类型</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 使用&lt;T&gt;关键字能使得函数输出和 any 相同类型的值</div><div><br></div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>声明接口：</b></font>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; interface Person { key: string }</div>&nbsp; &nbsp; &nbsp; &nbsp; interface Person { key: string, age?: string } // 这里的age是Person的可选属性<div><br><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>使用接口对变量进行类型约定</b></font>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; name: Person：非对应类型会在编译时报错</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp;&nbsp;<font color=\"#4169e1\"><b>构造函数</b></font>：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; class Student {&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name: string</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; constructor(<font color=\"#ff0000\"><b>public&nbsp;</b></font>newName) { this.name = newName }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; getName() { return <font color=\"#ff0000\"><b>this.</b></font>name }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 所有成员变量默认都是 public 的</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * public 关键字会创建相同成员变量</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * private 关键字使得实例无法访问对应变量</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * Student 的实例满足TS接口 { name: string, newName: string }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * 最终得到 { name, newName }: Object，原型上含有方法 getName</div><div><br></div></div><div><font color=\"#ff0000\"><b>配置文件</b></font></div><div>&nbsp; &nbsp;&nbsp;如果一个目录下存在一个tsconfig.json文件，那么它意味着这个目录是TypeScript项目的根目录。&nbsp;</div><div>&nbsp; &nbsp;&nbsp;不带任何输入文件的情况下调用tsc，编译器会从当前目录开始去查找tsconfig.json文件，逐级向上搜索父目录。</div><div>&nbsp; &nbsp;&nbsp;不带任何输入文件的情况下调用tsc，且使用命令行参数--project（或-p）指定一个包含tsconfig.json文件的目录。</div><div><br></div><div><div style=\"color: rgb(212, 212, 212); background-color: rgb(30, 30, 30); font-family: Consolas, &quot;Courier New&quot;, monospace; font-size: 14px; line-height: 19px; white-space: pre;\"><div style=\"line-height: 19px;\"><div>{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*&nbsp;这个&nbsp;JSON文件&nbsp;用于&nbsp;TypeScript编译器&nbsp;的配置</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"compilerOptions\"</span>:&nbsp;{</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;1&nbsp;在表达式和声明上有隐含的&nbsp;any类型时报错。</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"noImplicitAny\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;2&nbsp;删除所有注释，除了以&nbsp;/!*开头的版权信息。</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"removeComments\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;3&nbsp;保留&nbsp;const和&nbsp;enum声明。</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"preserveConstEnums\"</span>:&nbsp;<span style=\"color: #569cd6;\">true</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;4&nbsp;编译后的JS目录</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"outDir\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"./tsOutput\"</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;5&nbsp;源文件语法</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"target\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"ESNext\"</span>,</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;6&nbsp;TS需要引用的库，如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入\"ES2019.Array\"</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"lib\"</span>:&nbsp;[<span style=\"color: #ce9178;\">\"ES2015\"</span>,&nbsp;<span style=\"color: #ce9178;\">\"ES2016\"</span>,&nbsp;<span style=\"color: #ce9178;\">\"ES2017\"</span>,&nbsp;<span style=\"color: #ce9178;\">\"ES2018\"</span>,&nbsp;<span style=\"color: #ce9178;\">\"DOM\"</span>],</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*&nbsp;生成代码的模块标准：&nbsp;\"None\"，&nbsp;\"CommonJS\"，&nbsp;\"AMD\"，&nbsp;\"System\"，&nbsp;\"UMD\"，&nbsp;\"ES6\"或&nbsp;\"ES2015\"。</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #9cdcfe;\">\"module\"</span>:&nbsp;<span style=\"color: #ce9178;\">\"CommonJS\"</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div><br><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*&nbsp;如果不通过&nbsp;files&nbsp;include&nbsp;exclude设置编译目标</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*&nbsp;编译器默认包含当前目录和子目录下所有的TypeScript文件（.ts,&nbsp;.d.ts&nbsp;和&nbsp;.tsx）</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;\"files\":&nbsp;[],&nbsp;//&nbsp;指定一个包含相对或绝对文件路径的列表</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;\"include\":&nbsp;[],&nbsp;//&nbsp;指定一个文件glob匹配模式列表&nbsp;支持&nbsp;*&nbsp;匹配0或多个字符&nbsp;?&nbsp;匹配一个任意字符&nbsp;**/&nbsp;递归匹配任意子目录</span></div><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;\"exclude\":&nbsp;[]&nbsp;//&nbsp;指定一个文件glob匹配模式列表&nbsp;支持&nbsp;*&nbsp;匹配0或多个字符&nbsp;?&nbsp;匹配一个任意字符&nbsp;**/&nbsp;递归匹配任意子目录</span></div><br><div>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color: #6a9955;\">//&nbsp;*&nbsp;添加需要的解析的语法</span></div><div>}</div></div></div></div>"
    },
    "Xk-bZLE7S": {
      "blockId": "uuzRN_3cX",
      "shelfId": "At1V2rMjl",
      "bookId": "Xk-bZLE7S",
      "name": "Express (NodeJS)",
      "content": "<div><font color=\"#ff0000\"><b>基础概念</b></font></div><div>&nbsp; &nbsp; Node（正式名称 Node.js）是一个开源的、跨平台的运行时环境，</div><div>&nbsp; &nbsp; 有了它，开发人员可以使用 JavaScript 创建各种服务器端工具和应用程序。</div><div>&nbsp; &nbsp; 此运行时主要用于浏览器上下文之外（即可以直接运行于计算机或服务器操作系统上）。</div><div>&nbsp; &nbsp; 据此，该环境省略了一些浏览器专用的 JavaScript API，</div><div>&nbsp; &nbsp; 同时添加了对更传统的 OS API（比如 HTTP 库和文件系统库）的支持。<br></div><div><br></div><div>&nbsp; &nbsp;&nbsp;可以用 Node.js 的 HTTP 包来创建一个简单的 web 服务器。</div><div><br></div><div><font color=\"#ff0000\"><b>常用辅助包</b></font></div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>身份验证</b></font>&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; * npm install jsonwebtoken 用于生成请求 token</div><div>&nbsp; &nbsp; <font color=\"#4169e1\"><b>Md5单向加密</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; * npm install js-md5 用于生成唯一的Md5值，不可解密</div>"
    },
    "Serv_rhKD": {
      "blockId": "uuzRN_3cX",
      "shelfId": "OxHRbBgQ1",
      "bookId": "Serv_rhKD",
      "name": "MongoDB",
      "content": "<font color=\"#ff0000\"><b>简介</b></font><div>&nbsp; &nbsp; MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</div><div>&nbsp; &nbsp;&nbsp;在高负载的情况下，添加更多的节点，可以保证服务器性能。</div><div>&nbsp; &nbsp;&nbsp;MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</div><div>&nbsp; &nbsp;&nbsp;MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。</div><div>&nbsp; &nbsp; MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</div><div><table class=\"table table-striped table-bordered\"><tbody><tr><th>&nbsp; &nbsp; SQL术语/概念</th>  <th>MongoDB术语/概念</th>  <th>解释/说明</th>  </tr>  <tr>  <td>&nbsp; &nbsp; database</td>  <td>database</td>  <td>数据库</td>  </tr>  <tr>  <td>&nbsp; &nbsp; table</td>  <td>collection</td>  <td>数据库表/集合</td>  </tr>  <tr>  <td>&nbsp; &nbsp; row</td>  <td>document</td>  <td>数据记录行/文档</td>  </tr>  <tr>  <td>&nbsp; &nbsp; column</td>  <td>field</td>  <td>数据字段/域</td>  </tr>  <tr>  <td>&nbsp; &nbsp; index</td>  <td>index</td>  <td>索引</td>  </tr>  <tr>  <td>&nbsp; &nbsp; table joins</td>  <td>&nbsp;</td>  <td>表连接,MongoDB不支持</td>  </tr>  <tr>  <td>&nbsp; &nbsp; primary key</td>  <td>primary key</td>  <td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table></div><div><br></div><div><font color=\"#ff0000\"><b>使用步骤</b></font></div><div>&nbsp; &nbsp;<b> 1.从官网安卓MongoDB软件</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; https://www.mongodb.com/try/download/community</div><div>&nbsp; &nbsp; <b>2.安装成功后的主要目录为</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>bin</b></font>：文件夹下是mongodb的各种工具组件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>data</b></font>：手动创建具体数据目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * conf/<span class=\"pln\">mongod</span><span class=\"pun\">.</span><span class=\"pln\">conf：</span>配置文件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * db：数据库目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; * log/<span class=\"pln\">mongodb</span><span class=\"pun\">.</span><span class=\"pln\">log：</span>日志文件</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>windows脚本</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mkdir data&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; cd data &amp;&amp; mkdir conf &amp;&amp; cd conf &amp;&amp; type nul&gt;mongd.conf &amp;&amp; cd..&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; mkdir db&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &amp;&amp; mkdir log &amp;&amp; cd log &amp;&amp; type nul&gt;mongodb.log</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;mkdir data &amp;&amp; cd data &amp;&amp; mkdir conf &amp;&amp; cd conf &amp;&amp; type nul&gt;mongd.conf &amp;&amp; cd.. &amp;&amp; mkdir db &amp;&amp; mkdir log &amp;&amp; cd log &amp;&amp; type nul&gt;mongodb.log</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;</div><div>&nbsp; &nbsp;<b> 3.启动Mongodb数据库服务</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 在bin目录下：</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mongod&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; --dbpath \"E:\\MongoDB\\data\\db\" //&nbsp;指定数据库路径</div><div>&nbsp; &nbsp; &nbsp; &nbsp; --logpath \"E:\\MongoDB\\data\\log\\mongodb.log\" //&nbsp;定MongoDB日志文件，注意是指定文件不是目录</div><div>&nbsp; &nbsp; &nbsp; &nbsp; --port 7000 //&nbsp;指定服务端口号，默认端口27017</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;--serviceName // 指定服务名称</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <font color=\"#4169e1\"><b>windows脚本</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; mongod --dbpath \"E:\\MongoDB\\data\\db\" --logpath \"E:\\MongoDB\\data\\log\\mongodb.log\" --port 7000 --serviceName \"myMongoDB\"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; **&nbsp;</div><div><br></div><div><font color=\"#ff0000\"><b>通过 NodeJS 调用 mongodb 的服务</b></font></div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>1.安装驱动文件</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; npm install mongodb</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;node-mongodb-native</div><div>&nbsp; &nbsp; &nbsp; &nbsp; <b>2.具体代码</b></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div>"
    }
  },
  "stockIds": {
    "600030": {
      "stockId": 600030,
      "stockName": "中信证券",
      "typeIndex": 3
    }
  },
  "dayInfoBystockId": {},
  "minInfoBystockId": {}
}